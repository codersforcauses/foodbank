{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\n\nconst useAudio = (url, loop) => {\n  _s();\n\n  const [audio] = useState(new Audio(url));\n  const [playing, setPlaying] = useState(false);\n  audio.loop = loop;\n\n  const toggle = () => {\n    setPlaying(!playing);\n  };\n\n  useEffect(() => {\n    playing ? audio.play() : audio.pause();\n  }, [audio, playing]);\n  useEffect(() => {\n    audio.addEventListener('ended', () => setPlaying(false));\n    return () => {\n      audio.removeEventListener('ended', () => setPlaying(false));\n    };\n  }, [audio]);\n  return [playing, toggle];\n};\n\n_s(useAudio, \"GtM9ncdyEaTcm0NdOFCfRvb7ZtI=\");\n\nexport default useAudio;","map":{"version":3,"sources":["/home/jun/foodbank/client/src/lib/hooks/useAudio.ts"],"names":["useEffect","useState","useAudio","url","loop","audio","Audio","playing","setPlaying","toggle","play","pause","addEventListener","removeEventListener"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,MAAMC,QAA+D,GAAG,CACtEC,GADsE,EAEtEC,IAFsE,KAG5C;AAAA;;AAC1B,QAAM,CAACC,KAAD,IAAUJ,QAAQ,CAAC,IAAIK,KAAJ,CAAUH,GAAV,CAAD,CAAxB;AACA,QAAM,CAACI,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,KAAD,CAAtC;AACAI,EAAAA,KAAK,CAACD,IAAN,GAAaA,IAAb;;AACA,QAAMK,MAAM,GAAG,MAAM;AACnBD,IAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AACD,GAFD;;AAGAP,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,OAAO,GAAGF,KAAK,CAACK,IAAN,EAAH,GAAkBL,KAAK,CAACM,KAAN,EAAzB;AACD,GAFQ,EAEN,CAACN,KAAD,EAAQE,OAAR,CAFM,CAAT;AAGAP,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,KAAK,CAACO,gBAAN,CAAuB,OAAvB,EAAgC,MAAMJ,UAAU,CAAC,KAAD,CAAhD;AACA,WAAO,MAAM;AACXH,MAAAA,KAAK,CAACQ,mBAAN,CAA0B,OAA1B,EAAmC,MAAML,UAAU,CAAC,KAAD,CAAnD;AACD,KAFD;AAGD,GALQ,EAKN,CAACH,KAAD,CALM,CAAT;AAMA,SAAO,CAACE,OAAD,EAAUE,MAAV,CAAP;AACD,CApBD;;GAAMP,Q;;AAsBN,eAAeA,QAAf","sourcesContent":["import { useEffect, useState } from 'react'\n\nconst useAudio: (url: string, loop: boolean) => [boolean, () => void] = (\n  url: string,\n  loop: boolean\n): [boolean, () => void] => {\n  const [audio] = useState(new Audio(url))\n  const [playing, setPlaying] = useState(false)\n  audio.loop = loop\n  const toggle = () => {\n    setPlaying(!playing)\n  }\n  useEffect(() => {\n    playing ? audio.play() : audio.pause()\n  }, [audio, playing])\n  useEffect(() => {\n    audio.addEventListener('ended', () => setPlaying(false))\n    return () => {\n      audio.removeEventListener('ended', () => setPlaying(false))\n    }\n  }, [audio])\n  return [playing, toggle]\n}\n\nexport default useAudio\n"]},"metadata":{},"sourceType":"module"}