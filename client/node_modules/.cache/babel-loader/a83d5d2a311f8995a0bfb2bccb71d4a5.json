{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/jun/foodbank/client/src/Components/Typewriter/index.tsx\",\n    _s = $RefreshSig$();\n\n// modified from https://github.com/tanmaylaud/react-typewriting-effect/blob/master/src/Typewriter.tsx\nimport React, { useEffect, useState } from 'react';\n\nconst Typewriter = ({\n  string,\n  delay = 100,\n  stopBlinkinOnComplete = false,\n  className,\n  onComplete = () => {\n    return;\n  },\n  cursor = '|',\n  cursorClassName = undefined\n}) => {\n  _s();\n\n  const [text, setText] = useState('');\n  const [pointer, setPointer] = useState(-1);\n  const [isBlinking, setBlinking] = useState(true);\n  useEffect(() => {\n    let isMounted = true;\n\n    if (pointer < string.length) {\n      setTimeout(() => {\n        if (isMounted) setText(text + string.charAt(pointer));\n        if (isMounted) setPointer(pointer + 1);\n      }, delay);\n    } else {\n      if (stopBlinkinOnComplete && isMounted) setBlinking(false);\n      if (isMounted) onComplete();\n    }\n\n    return () => {\n      isMounted = false;\n    };\n  }, [delay, onComplete, pointer, stopBlinkinOnComplete, string, text]);\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    className: className,\n    children: [text, isBlinking ? /*#__PURE__*/_jsxDEV(\"span\", {\n      className: cursorClassName || 'blinkingCursor',\n      children: cursor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Typewriter, \"PrJfgVfPBeQuoDp8Q1HF8QL015s=\");\n\n_c = Typewriter;\nexport default Typewriter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Typewriter\");","map":{"version":3,"sources":["/home/jun/foodbank/client/src/Components/Typewriter/index.tsx"],"names":["React","useEffect","useState","Typewriter","string","delay","stopBlinkinOnComplete","className","onComplete","cursor","cursorClassName","undefined","text","setText","pointer","setPointer","isBlinking","setBlinking","isMounted","length","setTimeout","charAt"],"mappings":";;;;;AAAA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;AAYA,MAAMC,UAA2B,GAAG,CAAC;AACnCC,EAAAA,MADmC;AAEnCC,EAAAA,KAAK,GAAG,GAF2B;AAGnCC,EAAAA,qBAAqB,GAAG,KAHW;AAInCC,EAAAA,SAJmC;AAKnCC,EAAAA,UAAU,GAAG,MAAM;AACjB;AACD,GAPkC;AAQnCC,EAAAA,MAAM,GAAG,GAR0B;AASnCC,EAAAA,eAAe,GAAGC;AATiB,CAAD,KAUvB;AAAA;;AACX,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACY,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,CAAC,CAAF,CAAtC;AACA,QAAM,CAACc,UAAD,EAAaC,WAAb,IAA4Bf,QAAQ,CAAC,IAAD,CAA1C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIiB,SAAS,GAAG,IAAhB;;AAEA,QAAIJ,OAAO,GAAGV,MAAM,CAACe,MAArB,EAA6B;AAC3BC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAIF,SAAJ,EAAeL,OAAO,CAACD,IAAI,GAAGR,MAAM,CAACiB,MAAP,CAAcP,OAAd,CAAR,CAAP;AACf,YAAII,SAAJ,EAAeH,UAAU,CAACD,OAAO,GAAG,CAAX,CAAV;AAChB,OAHS,EAGPT,KAHO,CAAV;AAID,KALD,MAKO;AACL,UAAIC,qBAAqB,IAAIY,SAA7B,EAAwCD,WAAW,CAAC,KAAD,CAAX;AACxC,UAAIC,SAAJ,EAAeV,UAAU;AAC1B;;AAED,WAAO,MAAM;AACXU,MAAAA,SAAS,GAAG,KAAZ;AACD,KAFD;AAGD,GAhBQ,EAgBN,CAACb,KAAD,EAAQG,UAAR,EAAoBM,OAApB,EAA6BR,qBAA7B,EAAoDF,MAApD,EAA4DQ,IAA5D,CAhBM,CAAT;AAkBA,sBACE;AAAM,IAAA,SAAS,EAAEL,SAAjB;AAAA,eACGK,IADH,EAEGI,UAAU,gBACT;AAAM,MAAA,SAAS,EAAEN,eAAe,IAAI,gBAApC;AAAA,gBAAuDD;AAAvD;AAAA;AAAA;AAAA;AAAA,YADS,GAEP,IAJN;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAzCD;;GAAMN,U;;KAAAA,U;AA2CN,eAAeA,UAAf","sourcesContent":["// modified from https://github.com/tanmaylaud/react-typewriting-effect/blob/master/src/Typewriter.tsx\n\nimport React, { useEffect, useState } from 'react'\n\ninterface Props {\n  string: string\n  delay?: number\n  stopBlinkinOnComplete?: boolean\n  className?: string\n  onComplete?: () => void\n  cursor?: string\n  cursorClassName?: string\n}\n\nconst Typewriter: React.FC<Props> = ({\n  string,\n  delay = 100,\n  stopBlinkinOnComplete = false,\n  className,\n  onComplete = () => {\n    return\n  },\n  cursor = '|',\n  cursorClassName = undefined\n}: Props) => {\n  const [text, setText] = useState('')\n  const [pointer, setPointer] = useState(-1)\n  const [isBlinking, setBlinking] = useState(true)\n\n  useEffect(() => {\n    let isMounted = true\n\n    if (pointer < string.length) {\n      setTimeout(() => {\n        if (isMounted) setText(text + string.charAt(pointer))\n        if (isMounted) setPointer(pointer + 1)\n      }, delay)\n    } else {\n      if (stopBlinkinOnComplete && isMounted) setBlinking(false)\n      if (isMounted) onComplete()\n    }\n\n    return () => {\n      isMounted = false\n    }\n  }, [delay, onComplete, pointer, stopBlinkinOnComplete, string, text])\n\n  return (\n    <span className={className}>\n      {text}\n      {isBlinking ? (\n        <span className={cursorClassName || 'blinkingCursor'}>{cursor}</span>\n      ) : null}\n    </span>\n  )\n}\n\nexport default Typewriter\n"]},"metadata":{},"sourceType":"module"}