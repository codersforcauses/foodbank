{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/jun/foodbank/client/src/Components/Map/index.tsx\",\n    _s = $RefreshSig$();\n\n// naming conventions of items in svg = id of group in camelCase, image import name in PascalCase.\n// svg tree generated from dev/svgParse.py (super hacky atm)\nimport React, { useEffect, useRef, useState } from 'react';\nimport './index.css';\nimport { Location } from '../../lib/types';\nimport svgData from './svgImageData.json';\nimport SVGLocationGroup from './SVGLocationGroup';\nimport mapImg from './assets/TuckerMap.jpg';\nimport descData from './assets/description.json';\n\nconst Map = () => {\n  _s();\n\n  // Used because SVG does not scale properly without\n  const [height, setHeight] = useState(0);\n  const [width, setWidth] = useState(0);\n  const elementRef = useRef(null);\n  const [selected, onSelect] = useState(null);\n  const [header, setHeader] = useState(\"\");\n  const [caption, setCaption] = useState(\"\");\n  const [showButton, setButton] = useState(false);\n  const [maxWidth, setMaxWidth] = useState(\"200\");\n  const [maxHeight, setMaxHeight] = useState(\"100\");\n  const [scale, setScale] = useState(1);\n  useEffect(() => {\n    var _elementRef$current;\n\n    if (elementRef === null || elementRef === void 0 ? void 0 : (_elementRef$current = elementRef.current) === null || _elementRef$current === void 0 ? void 0 : _elementRef$current.clientHeight) {\n      var _elementRef$current2;\n\n      setHeight(elementRef === null || elementRef === void 0 ? void 0 : (_elementRef$current2 = elementRef.current) === null || _elementRef$current2 === void 0 ? void 0 : _elementRef$current2.clientHeight);\n    }\n  }, []); //empty dependency array so it only runs once at render\n\n  useEffect(() => {\n    var _elementRef$current3;\n\n    if (elementRef === null || elementRef === void 0 ? void 0 : (_elementRef$current3 = elementRef.current) === null || _elementRef$current3 === void 0 ? void 0 : _elementRef$current3.clientWidth) {\n      var _elementRef$current4;\n\n      setWidth(elementRef === null || elementRef === void 0 ? void 0 : (_elementRef$current4 = elementRef.current) === null || _elementRef$current4 === void 0 ? void 0 : _elementRef$current4.clientWidth);\n      setScale(width / 4961);\n    }\n  }, [width]);\n  useEffect(() => {\n    if (selected != null) {\n      const description = descData.descriptionArray.filter(data => {\n        return Location[data.id] == selected;\n      });\n      setHeader(description[0].headerText);\n      setCaption(description[0].captionText);\n      setButton(description[0].showButton);\n      setMaxWidth(description[0].maxWidth);\n      setMaxHeight(description[0].maxHeight);\n    }\n  }, [selected]);\n\n  const onMapClick = area => {\n    console.log(Location[area]);\n    let i;\n\n    for (i = 0; i < svgData.groupArray.length; i++) {\n      if (svgData.groupArray[i].id == Location[area] || svgData.groupArray[i].id == \"bg\") {\n        //if (svgData.groupArray[i].id == \"bg\") {\n        console.log(svgData.groupArray[i]);\n        svgData.groupArray[i].transform = \"translate(0 0) scale(1)\";\n      } else {\n        //svgData.groupArray[i].width = '5000'\n        svgData.groupArray[i].width = '0'; //console.log(svgData.groupArray[i])\n        //console.log(svgData.groupArray[i].transform)\n      } //console.log(svgData.groupArray[i])\n      //svgData.groupArray[i].width = '100'\n      //console.log(svgData.groupArray[i].xlinkHref)\n\n    }\n\n    console.log(svgData.groupArray);\n    selected === area ? onSelect(null) : onSelect(area);\n  };\n\n  const handleClick = event => {\n    //need to change this type\n    event.preventDefault();\n    const area = event.target.alt;\n    onMapClick(Location[area]);\n  }; // Data can be made from dev/svgParse.py\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: elementRef,\n    className: \"flex-auto 2xl:flex-none xl:flex-none 2xl:h-4/5 xl:h-4/5 flex justify-center\",\n    children: height === 0 ? null : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"svgrow\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: mapImg,\n        alt: \"Tucker Island Map\",\n        useMap: \"#tuckerislandmap\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"map\", {\n        name: \"tuckerislandmap\",\n        children: svgData.groupArray.map(location => {\n          if (location.coords) {\n            const scaledCoords = location.coords.map(coord => coord * scale);\n            return /*#__PURE__*/_jsxDEV(\"area\", {\n              alt: location.id,\n              onClick: handleClick,\n              href: location.id,\n              coords: scaledCoords.join(),\n              className: Location[location.id] === selected ? 'map-selected' : 'map-unselected',\n              shape: \"poly\"\n            }, location.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 17\n            }, this);\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n        viewBox: \"0 0 1000 490.56\",\n        height: height,\n        overflow: \"scroll\",\n        children: svgData.groupArray.map(group => /*#__PURE__*/_jsxDEV(SVGLocationGroup, {\n          name: Location[group.id],\n          width: group.width,\n          height: group.height,\n          header: header,\n          caption: caption,\n          showButton: showButton,\n          maxHeight: maxHeight,\n          maxWidth: maxWidth,\n          transform: group.transform,\n          className: Location[group.id] === selected ? 'map-selected' : 'map-unselected',\n          onClick: onMapClick,\n          image: group.id\n        }, group.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Map, \"rp7td5gXl81rXZQ1F5blwUnfGnA=\");\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/home/jun/foodbank/client/src/Components/Map/index.tsx"],"names":["React","useEffect","useRef","useState","Location","svgData","SVGLocationGroup","mapImg","descData","Map","height","setHeight","width","setWidth","elementRef","selected","onSelect","header","setHeader","caption","setCaption","showButton","setButton","maxWidth","setMaxWidth","maxHeight","setMaxHeight","scale","setScale","current","clientHeight","clientWidth","description","descriptionArray","filter","data","id","headerText","captionText","onMapClick","area","console","log","i","groupArray","length","transform","handleClick","event","preventDefault","target","alt","map","location","coords","scaledCoords","coord","join","group"],"mappings":"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","sourcesContent":["// naming conventions of items in svg = id of group in camelCase, image import name in PascalCase.\n// svg tree generated from dev/svgParse.py (super hacky atm)\n\nimport React, { useEffect, useRef, useState } from 'react'\nimport './index.css'\nimport { Location } from '../../lib/types'\nimport svgData from './svgImageData.json'\nimport SVGLocationGroup from './SVGLocationGroup'\nimport mapImg from './assets/TuckerMap.jpg'\nimport descData from './assets/description.json'\nconst Map: React.FC = () => {\n  // Used because SVG does not scale properly without\n  const [height, setHeight] = useState(0)\n  const [width, setWidth] = useState(0)\n  const elementRef = useRef(null as null | HTMLDivElement)\n\n  const [selected, onSelect] = useState<Location | null>(null)\n  const [header, setHeader] = useState<string>(\"\")\n  const [caption, setCaption] = useState<string>(\"\")\n  const [showButton, setButton] = useState<boolean>(false)\n  const [maxWidth, setMaxWidth] = useState<string>(\"200\")\n  const [maxHeight, setMaxHeight] = useState<string>(\"100\")\n  const [scale, setScale] = useState(1)\n  \n  useEffect(() => {\n    if (elementRef?.current?.clientHeight) {\n      setHeight(elementRef?.current?.clientHeight)\n    }\n  }, []) //empty dependency array so it only runs once at render\n\n  useEffect(() => {\n    if (elementRef?.current?.clientWidth) {\n      setWidth(elementRef?.current?.clientWidth)\n      setScale(width/4961)\n    }\n  }, [width])\n\n  useEffect(() => {\n    if(selected != null){\n      const description = descData.descriptionArray.filter(data =>{\n        return Location[data.id as keyof typeof Location] == selected\n      });\n      setHeader(description[0].headerText);\n      setCaption(description[0].captionText);\n      setButton(description[0].showButton);\n      setMaxWidth(description[0].maxWidth);\n      setMaxHeight(description[0].maxHeight);\n    }  \n  }, [selected])\n\n  const onMapClick = (area: Location) => {\n    console.log(Location[area]);\n    let i;\n    for(i=0; i < svgData.groupArray.length; i++) {\n\n      if ((svgData.groupArray[i].id == Location[area]) || (svgData.groupArray[i].id == \"bg\")) {\n      //if (svgData.groupArray[i].id == \"bg\") {\n        console.log(svgData.groupArray[i])\n        svgData.groupArray[i].transform = \"translate(0 0) scale(1)\"\n      }\n      else{\n        //svgData.groupArray[i].width = '5000'\n        svgData.groupArray[i].width = '0'\n        //console.log(svgData.groupArray[i])\n        //console.log(svgData.groupArray[i].transform)\n      }\n      //console.log(svgData.groupArray[i])\n      //svgData.groupArray[i].width = '100'\n      //console.log(svgData.groupArray[i].xlinkHref)\n    }\n    console.log(svgData.groupArray)\n    selected === area ? onSelect(null) : onSelect(area)\n  }\n\n  const handleClick = (event:any) => { //need to change this type\n    event.preventDefault()\n    const area = event.target.alt\n    onMapClick(Location[area as keyof typeof Location])\n  }\n\n  // Data can be made from dev/svgParse.py\n  return (\n    <div\n      ref={elementRef}\n      className='flex-auto 2xl:flex-none xl:flex-none 2xl:h-4/5 xl:h-4/5 flex justify-center'\n    >\n      {height === 0 ? null : (\n        <div className='svgrow'>\n          <img src={mapImg} alt=\"Tucker Island Map\" useMap=\"#tuckerislandmap\"/>\n          <map name=\"tuckerislandmap\">\n          {\n            svgData.groupArray.map(location => {\n              if (location.coords) {\n              const scaledCoords = location.coords.map(coord => coord*scale)\n\n              return (\n                <area\n                key={location.id}\n                alt={location.id}\n                onClick={handleClick}\n                href={location.id}\n                coords={scaledCoords.join()}\n                className={\n                  Location[location.id as keyof typeof Location] === selected\n                    ? 'map-selected'\n                    : 'map-unselected'\n                }\n                shape=\"poly\"\n                  />\n              )\n              }\n            })\n          }\n            </map>\n          <svg\n            xmlns='http://www.w3.org/2000/svg'\n            xmlnsXlink='http://www.w3.org/1999/xlink'\n            viewBox='0 0 1000 490.56'\n            height={height}\n            overflow='scroll'\n          >\n            {svgData.groupArray.map(group => (\n              <SVGLocationGroup\n                key={group.id}\n                name={Location[group.id as keyof typeof Location]}\n                width={group.width}\n                height={group.height}\n                header={header}\n                caption={caption}\n                showButton={showButton}\n                maxHeight={maxHeight}\n                maxWidth={maxWidth}\n                transform={group.transform}\n                className={\n                  Location[group.id as keyof typeof Location] === selected\n                    ? 'map-selected'\n                    : 'map-unselected'\n                }\n                onClick={onMapClick}\n                image={group.id}\n              />\n            ))}\n          </svg>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default Map\n"]},"metadata":{},"sourceType":"module"}