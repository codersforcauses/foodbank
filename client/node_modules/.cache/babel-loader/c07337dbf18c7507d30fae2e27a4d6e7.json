{"ast":null,"code":"import { getter } from 'property-expr';\nconst prefixes = {\n  context: '$',\n  value: '.'\n};\nexport function create(key, options) {\n  return new Reference(key, options);\n}\nexport default class Reference {\n  constructor(key, options = {}) {\n    if (typeof key !== 'string') throw new TypeError('ref must be a string, got: ' + key);\n    this.key = key.trim();\n    if (key === '') throw new TypeError('ref must be a non-empty string');\n    this.isContext = this.key[0] === prefixes.context;\n    this.isValue = this.key[0] === prefixes.value;\n    this.isSibling = !this.isContext && !this.isValue;\n    let prefix = this.isContext ? prefixes.context : this.isValue ? prefixes.value : '';\n    this.path = this.key.slice(prefix.length);\n    this.getter = this.path && getter(this.path, true);\n    this.map = options.map;\n  }\n\n  getValue(value, parent, context) {\n    let result = this.isContext ? context : this.isValue ? value : parent;\n    if (this.getter) result = this.getter(result || {});\n    if (this.map) result = this.map(result);\n    return result;\n  }\n  /**\n   *\n   * @param {*} value\n   * @param {Object} options\n   * @param {Object=} options.context\n   * @param {Object=} options.parent\n   */\n\n\n  cast(value, options) {\n    return this.getValue(value, options == null ? void 0 : options.parent, options == null ? void 0 : options.context);\n  }\n\n  resolve() {\n    return this;\n  }\n\n  describe() {\n    return {\n      type: 'ref',\n      key: this.key\n    };\n  }\n\n  toString() {\n    return `Ref(${this.key})`;\n  }\n\n  static isRef(value) {\n    return value && value.__isYupRef;\n  }\n\n} // @ts-ignore\n\nReference.prototype.__isYupRef = true;","map":{"version":3,"sources":["/home/jun/foodbank/node_modules/yup/es/Reference.js"],"names":["getter","prefixes","context","value","create","key","options","Reference","constructor","TypeError","trim","isContext","isValue","isSibling","prefix","path","slice","length","map","getValue","parent","result","cast","resolve","describe","type","toString","isRef","__isYupRef","prototype"],"mappings":"AAAA,SAASA,MAAT,QAAuB,eAAvB;AACA,MAAMC,QAAQ,GAAG;AACfC,EAAAA,OAAO,EAAE,GADM;AAEfC,EAAAA,KAAK,EAAE;AAFQ,CAAjB;AAIA,OAAO,SAASC,MAAT,CAAgBC,GAAhB,EAAqBC,OAArB,EAA8B;AACnC,SAAO,IAAIC,SAAJ,CAAcF,GAAd,EAAmBC,OAAnB,CAAP;AACD;AACD,eAAe,MAAMC,SAAN,CAAgB;AAC7BC,EAAAA,WAAW,CAACH,GAAD,EAAMC,OAAO,GAAG,EAAhB,EAAoB;AAC7B,QAAI,OAAOD,GAAP,KAAe,QAAnB,EAA6B,MAAM,IAAII,SAAJ,CAAc,gCAAgCJ,GAA9C,CAAN;AAC7B,SAAKA,GAAL,GAAWA,GAAG,CAACK,IAAJ,EAAX;AACA,QAAIL,GAAG,KAAK,EAAZ,EAAgB,MAAM,IAAII,SAAJ,CAAc,gCAAd,CAAN;AAChB,SAAKE,SAAL,GAAiB,KAAKN,GAAL,CAAS,CAAT,MAAgBJ,QAAQ,CAACC,OAA1C;AACA,SAAKU,OAAL,GAAe,KAAKP,GAAL,CAAS,CAAT,MAAgBJ,QAAQ,CAACE,KAAxC;AACA,SAAKU,SAAL,GAAiB,CAAC,KAAKF,SAAN,IAAmB,CAAC,KAAKC,OAA1C;AACA,QAAIE,MAAM,GAAG,KAAKH,SAAL,GAAiBV,QAAQ,CAACC,OAA1B,GAAoC,KAAKU,OAAL,GAAeX,QAAQ,CAACE,KAAxB,GAAgC,EAAjF;AACA,SAAKY,IAAL,GAAY,KAAKV,GAAL,CAASW,KAAT,CAAeF,MAAM,CAACG,MAAtB,CAAZ;AACA,SAAKjB,MAAL,GAAc,KAAKe,IAAL,IAAaf,MAAM,CAAC,KAAKe,IAAN,EAAY,IAAZ,CAAjC;AACA,SAAKG,GAAL,GAAWZ,OAAO,CAACY,GAAnB;AACD;;AAEDC,EAAAA,QAAQ,CAAChB,KAAD,EAAQiB,MAAR,EAAgBlB,OAAhB,EAAyB;AAC/B,QAAImB,MAAM,GAAG,KAAKV,SAAL,GAAiBT,OAAjB,GAA2B,KAAKU,OAAL,GAAeT,KAAf,GAAuBiB,MAA/D;AACA,QAAI,KAAKpB,MAAT,EAAiBqB,MAAM,GAAG,KAAKrB,MAAL,CAAYqB,MAAM,IAAI,EAAtB,CAAT;AACjB,QAAI,KAAKH,GAAT,EAAcG,MAAM,GAAG,KAAKH,GAAL,CAASG,MAAT,CAAT;AACd,WAAOA,MAAP;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;;;AAGEC,EAAAA,IAAI,CAACnB,KAAD,EAAQG,OAAR,EAAiB;AACnB,WAAO,KAAKa,QAAL,CAAchB,KAAd,EAAqBG,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,CAACc,MAAxD,EAAgEd,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,CAACJ,OAAnG,CAAP;AACD;;AAEDqB,EAAAA,OAAO,GAAG;AACR,WAAO,IAAP;AACD;;AAEDC,EAAAA,QAAQ,GAAG;AACT,WAAO;AACLC,MAAAA,IAAI,EAAE,KADD;AAELpB,MAAAA,GAAG,EAAE,KAAKA;AAFL,KAAP;AAID;;AAEDqB,EAAAA,QAAQ,GAAG;AACT,WAAQ,OAAM,KAAKrB,GAAI,GAAvB;AACD;;AAED,SAAOsB,KAAP,CAAaxB,KAAb,EAAoB;AAClB,WAAOA,KAAK,IAAIA,KAAK,CAACyB,UAAtB;AACD;;AAlD4B,C,CAoD7B;;AAEFrB,SAAS,CAACsB,SAAV,CAAoBD,UAApB,GAAiC,IAAjC","sourcesContent":["import { getter } from 'property-expr';\nconst prefixes = {\n  context: '$',\n  value: '.'\n};\nexport function create(key, options) {\n  return new Reference(key, options);\n}\nexport default class Reference {\n  constructor(key, options = {}) {\n    if (typeof key !== 'string') throw new TypeError('ref must be a string, got: ' + key);\n    this.key = key.trim();\n    if (key === '') throw new TypeError('ref must be a non-empty string');\n    this.isContext = this.key[0] === prefixes.context;\n    this.isValue = this.key[0] === prefixes.value;\n    this.isSibling = !this.isContext && !this.isValue;\n    let prefix = this.isContext ? prefixes.context : this.isValue ? prefixes.value : '';\n    this.path = this.key.slice(prefix.length);\n    this.getter = this.path && getter(this.path, true);\n    this.map = options.map;\n  }\n\n  getValue(value, parent, context) {\n    let result = this.isContext ? context : this.isValue ? value : parent;\n    if (this.getter) result = this.getter(result || {});\n    if (this.map) result = this.map(result);\n    return result;\n  }\n  /**\n   *\n   * @param {*} value\n   * @param {Object} options\n   * @param {Object=} options.context\n   * @param {Object=} options.parent\n   */\n\n\n  cast(value, options) {\n    return this.getValue(value, options == null ? void 0 : options.parent, options == null ? void 0 : options.context);\n  }\n\n  resolve() {\n    return this;\n  }\n\n  describe() {\n    return {\n      type: 'ref',\n      key: this.key\n    };\n  }\n\n  toString() {\n    return `Ref(${this.key})`;\n  }\n\n  static isRef(value) {\n    return value && value.__isYupRef;\n  }\n\n} // @ts-ignore\n\nReference.prototype.__isYupRef = true;"]},"metadata":{},"sourceType":"module"}