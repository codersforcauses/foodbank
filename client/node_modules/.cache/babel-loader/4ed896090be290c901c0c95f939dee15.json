{"ast":null,"code":"/**\n * @ignore\n * @type {RegExp}\n */\nconst matrixRegex = /^matrix\\(\\s*([0-9_+-.e]+)\\s*,\\s*([0-9_+-.e]+)\\s*,\\s*([0-9_+-.e]+)\\s*,\\s*([0-9_+-.e]+)\\s*,\\s*([0-9_+-.e]+)\\s*,\\s*([0-9_+-.e]+)\\s*\\)$/i;\n/**\n * Parse a string formatted as matrix(a,b,c,d,e,f)\n * @param string {string} String with an affine matrix\n * @returns {Matrix} Affine Matrix\n *\n * @example\n * > fromString('matrix(1,2,3,4,5,6)')\n * {a: 1, b: 2, c: 3, d: 4, c: 5, e: 6}\n */\n\nexport function fromString(string) {\n  const parsed = string.match(matrixRegex);\n  if (parsed === null || parsed.length < 7) throw new Error(`'${string}' is not a matrix`);\n  return {\n    a: parseFloat(parsed[1]),\n    b: parseFloat(parsed[2]),\n    c: parseFloat(parsed[3]),\n    d: parseFloat(parsed[4]),\n    e: parseFloat(parsed[5]),\n    f: parseFloat(parsed[6])\n  };\n}","map":{"version":3,"sources":["/home/jun/foodbank/node_modules/transformation-matrix/src/fromString.js"],"names":["matrixRegex","fromString","string","parsed","match","length","Error","a","parseFloat","b","c","d","e","f"],"mappings":"AAAA;AACA;AACA;AACA;AACA,MAAMA,WAAW,GAAG,sIAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,UAAT,CAAqBC,MAArB,EAA6B;AAClC,QAAMC,MAAM,GAAGD,MAAM,CAACE,KAAP,CAAaJ,WAAb,CAAf;AACA,MAAIG,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACE,MAAP,GAAgB,CAAvC,EAA0C,MAAM,IAAIC,KAAJ,CAAW,IAAGJ,MAAO,mBAArB,CAAN;AAC1C,SAAO;AACLK,IAAAA,CAAC,EAAEC,UAAU,CAACL,MAAM,CAAC,CAAD,CAAP,CADR;AAELM,IAAAA,CAAC,EAAED,UAAU,CAACL,MAAM,CAAC,CAAD,CAAP,CAFR;AAGLO,IAAAA,CAAC,EAAEF,UAAU,CAACL,MAAM,CAAC,CAAD,CAAP,CAHR;AAILQ,IAAAA,CAAC,EAAEH,UAAU,CAACL,MAAM,CAAC,CAAD,CAAP,CAJR;AAKLS,IAAAA,CAAC,EAAEJ,UAAU,CAACL,MAAM,CAAC,CAAD,CAAP,CALR;AAMLU,IAAAA,CAAC,EAAEL,UAAU,CAACL,MAAM,CAAC,CAAD,CAAP;AANR,GAAP;AAQD","sourcesContent":["/**\n * @ignore\n * @type {RegExp}\n */\nconst matrixRegex = /^matrix\\(\\s*([0-9_+-.e]+)\\s*,\\s*([0-9_+-.e]+)\\s*,\\s*([0-9_+-.e]+)\\s*,\\s*([0-9_+-.e]+)\\s*,\\s*([0-9_+-.e]+)\\s*,\\s*([0-9_+-.e]+)\\s*\\)$/i\n\n/**\n * Parse a string formatted as matrix(a,b,c,d,e,f)\n * @param string {string} String with an affine matrix\n * @returns {Matrix} Affine Matrix\n *\n * @example\n * > fromString('matrix(1,2,3,4,5,6)')\n * {a: 1, b: 2, c: 3, d: 4, c: 5, e: 6}\n */\nexport function fromString (string) {\n  const parsed = string.match(matrixRegex)\n  if (parsed === null || parsed.length < 7) throw new Error(`'${string}' is not a matrix`)\n  return {\n    a: parseFloat(parsed[1]),\n    b: parseFloat(parsed[2]),\n    c: parseFloat(parsed[3]),\n    d: parseFloat(parsed[4]),\n    e: parseFloat(parsed[5]),\n    f: parseFloat(parsed[6])\n  }\n}\n"]},"metadata":{},"sourceType":"module"}