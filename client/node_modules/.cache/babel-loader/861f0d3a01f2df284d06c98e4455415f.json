{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/jun/foodbank/client/src/Components/Map/index.tsx\",\n    _s = $RefreshSig$();\n\n// naming conventions of items in svg = id of group in camelCase, image import name in PascalCase.\n// svg tree generated from dev/svgParse.py (super hacky atm)\nimport React, { useEffect, useRef, useState } from 'react';\nimport './index.css';\nimport { Location } from '../../lib/types';\nimport svgData from './svgImageData.json';\nimport SVGLocationGroup from './SVGLocationGroup';\n\nconst Map = () => {\n  _s();\n\n  // Used because SVG does not scale properly without\n  const [height, setHeight] = useState(0);\n  const elementRef = useRef(null);\n  const [selected, onSelect] = useState(null);\n  useEffect(() => {\n    var _elementRef$current;\n\n    if (elementRef === null || elementRef === void 0 ? void 0 : (_elementRef$current = elementRef.current) === null || _elementRef$current === void 0 ? void 0 : _elementRef$current.clientHeight) {\n      var _elementRef$current2;\n\n      setHeight(elementRef === null || elementRef === void 0 ? void 0 : (_elementRef$current2 = elementRef.current) === null || _elementRef$current2 === void 0 ? void 0 : _elementRef$current2.clientHeight);\n    }\n  }, []); //empty dependency array so it only runs once at render\n\n  const onMapClick = area => {\n    selected === area ? onSelect(null) : onSelect(area);\n  }; // Data can be made from dev/svgParse.py\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: elementRef,\n    className: \"flex-auto 2xl:flex-none xl:flex-none 2xl:h-4/5 xl:h-4/5 flex justify-center\",\n    children: height === 0 ? null : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"svgrow\",\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n        viewBox: \"0 0 1000 490.56\",\n        height: height,\n        overflow: \"scroll\",\n        children: svgData.groupArray.map(group => /*#__PURE__*/_jsxDEV(SVGLocationGroup, {\n          name: Location[group.id],\n          width: group.width,\n          height: group.height,\n          transform: group.transform,\n          className: Location[group.id] === selected ? 'map-selected' : 'map-unselected',\n          onClick: onMapClick,\n          image: group.id\n        }, group.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Map, \"POZs8j49X/fxc9WwFBz5vnV3sTo=\");\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/home/jun/foodbank/client/src/Components/Map/index.tsx"],"names":["React","useEffect","useRef","useState","Location","svgData","SVGLocationGroup","Map","height","setHeight","elementRef","selected","onSelect","current","clientHeight","onMapClick","area","groupArray","map","group","id","width","transform"],"mappings":";;;;;AAAA;AACA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAO,aAAP;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;;AAEA,MAAMC,GAAa,GAAG,MAAM;AAAA;;AAC1B;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,CAAD,CAApC;AACA,QAAMO,UAAU,GAAGR,MAAM,CAAC,IAAD,CAAzB;AACA,QAAM,CAACS,QAAD,EAAWC,QAAX,IAAuBT,QAAQ,CAAkB,IAAlB,CAArC;AAEAF,EAAAA,SAAS,CAAC,MAAM;AAAA;;AACd,QAAIS,UAAJ,aAAIA,UAAJ,8CAAIA,UAAU,CAAEG,OAAhB,wDAAI,oBAAqBC,YAAzB,EAAuC;AAAA;;AACrCL,MAAAA,SAAS,CAACC,UAAD,aAACA,UAAD,+CAACA,UAAU,CAAEG,OAAb,yDAAC,qBAAqBC,YAAtB,CAAT;AACD;AACF,GAJQ,EAIN,EAJM,CAAT,CAN0B,CAUnB;;AAEP,QAAMC,UAAU,GAAIC,IAAD,IAAoB;AACrCL,IAAAA,QAAQ,KAAKK,IAAb,GAAoBJ,QAAQ,CAAC,IAAD,CAA5B,GAAqCA,QAAQ,CAACI,IAAD,CAA7C;AACD,GAFD,CAZ0B,CAgB1B;;;AACA,sBACE;AACE,IAAA,GAAG,EAAEN,UADP;AAEE,IAAA,SAAS,EAAC,6EAFZ;AAAA,cAIGF,MAAM,KAAK,CAAX,GAAe,IAAf,gBACC;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,6BACE;AACE,QAAA,KAAK,EAAC,4BADR;AAEE,QAAA,UAAU,EAAC,8BAFb;AAGE,QAAA,OAAO,EAAC,iBAHV;AAIE,QAAA,MAAM,EAAEA,MAJV;AAKE,QAAA,QAAQ,EAAC,QALX;AAAA,kBAOGH,OAAO,CAACY,UAAR,CAAmBC,GAAnB,CAAuBC,KAAK,iBAC3B,QAAC,gBAAD;AAEE,UAAA,IAAI,EAAEf,QAAQ,CAACe,KAAK,CAACC,EAAP,CAFhB;AAGE,UAAA,KAAK,EAAED,KAAK,CAACE,KAHf;AAIE,UAAA,MAAM,EAAEF,KAAK,CAACX,MAJhB;AAKE,UAAA,SAAS,EAAEW,KAAK,CAACG,SALnB;AAME,UAAA,SAAS,EACPlB,QAAQ,CAACe,KAAK,CAACC,EAAP,CAAR,KAAgDT,QAAhD,GACI,cADJ,GAEI,gBATR;AAWE,UAAA,OAAO,EAAEI,UAXX;AAYE,UAAA,KAAK,EAAEI,KAAK,CAACC;AAZf,WACOD,KAAK,CAACC,EADb;AAAA;AAAA;AAAA;AAAA,gBADD;AAPH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AALJ;AAAA;AAAA;AAAA;AAAA,UADF;AAmCD,CApDD;;GAAMb,G;;KAAAA,G;AAsDN,eAAeA,GAAf","sourcesContent":["// naming conventions of items in svg = id of group in camelCase, image import name in PascalCase.\n// svg tree generated from dev/svgParse.py (super hacky atm)\n\nimport React, { useEffect, useRef, useState } from 'react'\nimport './index.css'\nimport { Location } from '../../lib/types'\nimport svgData from './svgImageData.json'\nimport SVGLocationGroup from './SVGLocationGroup'\n\nconst Map: React.FC = () => {\n  // Used because SVG does not scale properly without\n  const [height, setHeight] = useState(0)\n  const elementRef = useRef(null as null | HTMLDivElement)\n  const [selected, onSelect] = useState<Location | null>(null)\n\n  useEffect(() => {\n    if (elementRef?.current?.clientHeight) {\n      setHeight(elementRef?.current?.clientHeight)\n    }\n  }, []) //empty dependency array so it only runs once at render\n\n  const onMapClick = (area: Location) => {\n    selected === area ? onSelect(null) : onSelect(area)\n  }\n\n  // Data can be made from dev/svgParse.py\n  return (\n    <div\n      ref={elementRef}\n      className='flex-auto 2xl:flex-none xl:flex-none 2xl:h-4/5 xl:h-4/5 flex justify-center'\n    >\n      {height === 0 ? null : (\n        <div className='svgrow'>\n          <svg\n            xmlns='http://www.w3.org/2000/svg'\n            xmlnsXlink='http://www.w3.org/1999/xlink'\n            viewBox='0 0 1000 490.56'\n            height={height}\n            overflow='scroll'\n          >\n            {svgData.groupArray.map(group => (\n              <SVGLocationGroup\n                key={group.id}\n                name={Location[group.id as keyof typeof Location]}\n                width={group.width}\n                height={group.height}\n                transform={group.transform}\n                className={\n                  Location[group.id as keyof typeof Location] === selected\n                    ? 'map-selected'\n                    : 'map-unselected'\n                }\n                onClick={onMapClick}\n                image={group.id}\n              />\n            ))}\n          </svg>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default Map\n"]},"metadata":{},"sourceType":"module"}