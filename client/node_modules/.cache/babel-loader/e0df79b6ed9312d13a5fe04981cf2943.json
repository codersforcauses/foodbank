{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/jun/foodbank/client/src/Components/Map/index.tsx\",\n    _s = $RefreshSig$();\n\n// naming conventions of items in svg = id of group in camelCase, image import name in PascalCase.\n// svg tree generated from dev/svgParse.py (super hacky atm)\nimport React, { useEffect, useRef, useState } from 'react';\nimport './index.css';\nimport { Location } from '../../lib/types';\nimport svgData from './svgImageData.json';\nimport mapImg from './assets/TuckerMap.jpg';\nimport descData from './assets/description.json';\nimport Townbox from '../Townbox';\nimport { TransformWrapper, TransformComponent } from 'react-zoom-pan-pinch';\n\nconst Map = () => {\n  _s();\n\n  // Used because SVG does not scale properly without\n  const [height, setHeight] = useState(1);\n  const elementRef = useRef(null);\n  const [selected, onSelect] = useState(null);\n  const [scale, setScale] = useState(1);\n  const [display, changeDisplay] = useState(false); // const [townbox, setTownbox] = useState(<></>)\n\n  useEffect(() => {\n    var _elementRef$current;\n\n    if (elementRef === null || elementRef === void 0 ? void 0 : (_elementRef$current = elementRef.current) === null || _elementRef$current === void 0 ? void 0 : _elementRef$current.clientHeight) {\n      var _elementRef$current2;\n\n      setHeight(elementRef === null || elementRef === void 0 ? void 0 : (_elementRef$current2 = elementRef.current) === null || _elementRef$current2 === void 0 ? void 0 : _elementRef$current2.clientHeight);\n    }\n  }, []); //empty dependency array so it only runs once at render\n\n  useEffect(() => {\n    function handleResize() {\n      const mobileWidth = 2900;\n      const minStaticWidth = 1170;\n      const targetWidth = window.innerWidth > minStaticWidth ? window.innerWidth : mobileWidth;\n      setScale(targetWidth / 4961);\n    }\n\n    handleResize();\n    window.addEventListener('resize', handleResize);\n  }, []); // to get the area description given an area so you can actually use headers/captions\n  // returns null if such area doesn't exist in assets/description.json\n\n  const getAreaDescription = area => {\n    for (const description of descData.descriptionArray) {\n      if (description.id === Location[area]) {\n        return description;\n      }\n    }\n\n    return null;\n  };\n\n  const onClose = () => {\n    onSelect(null);\n    changeDisplay(false);\n  };\n\n  const onMapClick = area => {\n    selected === area ? onSelect(null) : onSelect(area);\n    changeDisplay(!display);\n  }; // eslint-disable-next-line\n\n\n  const handleClick = event => {\n    //need to change this type\n    event.preventDefault();\n    const area = event.target.alt;\n    onMapClick(Location[area]);\n  }; // Data can be made from dev/svgParse.py\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(TransformWrapper, {\n      children: ({\n        resetTransform,\n        setTransform\n      }) => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => resetTransform(),\n            children: \"Reset\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(TransformComponent, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            ref: elementRef,\n            className: \"block w-full min-h-full items-stretch\",\n            style: {\n              minHeight: '900px'\n            },\n            children: height === 0 ? null : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"svgrow\",\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: mapImg,\n                alt: \"Tucker Island Map\",\n                useMap: \"#tuckerislandmap\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"map\", {\n                name: \"tuckerislandmap\",\n                children: svgData.groupArray.map(location => {\n                  if (location.coords) {\n                    const xtrans = parseInt(location.xtrans) * scale * 8; // I have no clue why everything is overscaled 8x\n\n                    const ytrans = parseInt(location.ytrans) * scale * 8; // this is probably worth looking into\n\n                    const scaledCoords = location.coords.map(coord => coord * scale);\n                    const className = Location[location.id] === selected ? 'map-selected' : 'map-unselected';\n                    return /*#__PURE__*/_jsxDEV(\"area\", {\n                      alt: location.id //onClick={handleClick}\n                      ,\n                      onClick: e => {\n                        handleClick(e);\n                        setTransform(-xtrans, -ytrans, 2);\n                      },\n                      href: location.id,\n                      coords: scaledCoords.join(),\n                      className: className,\n                      shape: \"poly\"\n                    }, location.id, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 102,\n                      columnNumber: 25\n                    }, this);\n                  }\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 13\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `full-page-wrapper ${display ? '' : 'none'}`,\n            children: svgData.groupArray.map(area => {\n              if (selected !== null && area.coords) {\n                const selectedArea = getAreaDescription(selected);\n\n                if (selectedArea !== null && selectedArea.id === area.id) {\n                  const header = selectedArea === null || selectedArea === void 0 ? void 0 : selectedArea.headerText;\n                  const caption = selectedArea === null || selectedArea === void 0 ? void 0 : selectedArea.captionText;\n                  const showButton = selectedArea === null || selectedArea === void 0 ? void 0 : selectedArea.showButton;\n                  const headerColor = selectedArea === null || selectedArea === void 0 ? void 0 : selectedArea.headerColor;\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"townbox-wrapper\",\n                    children: /*#__PURE__*/_jsxDEV(Townbox, {\n                      headerColor: headerColor,\n                      headerText: header,\n                      captionText: caption,\n                      showButton: showButton,\n                      close: onClose\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 137,\n                      columnNumber: 21\n                    }, this)\n                  }, selectedArea.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 136,\n                    columnNumber: 19\n                  }, this);\n                }\n              }\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 5\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Map, \"oILqyrSxCQwmn4YWlP7PyqnzSVg=\");\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/home/jun/foodbank/client/src/Components/Map/index.tsx"],"names":["React","useEffect","useRef","useState","Location","svgData","mapImg","descData","Townbox","TransformWrapper","TransformComponent","Map","height","setHeight","elementRef","selected","onSelect","scale","setScale","display","changeDisplay","current","clientHeight","handleResize","mobileWidth","minStaticWidth","targetWidth","window","innerWidth","addEventListener","getAreaDescription","area","description","descriptionArray","id","onClose","onMapClick","handleClick","event","preventDefault","target","alt","resetTransform","setTransform","minHeight","groupArray","map","location","coords","xtrans","parseInt","ytrans","scaledCoords","coord","className","e","join","selectedArea","header","headerText","caption","captionText","showButton","headerColor"],"mappings":"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","sourcesContent":["// naming conventions of items in svg = id of group in camelCase, image import name in PascalCase.\n// svg tree generated from dev/svgParse.py (super hacky atm)\n\nimport React, { useEffect, useRef, useState } from 'react'\nimport './index.css'\nimport { Location } from '../../lib/types'\nimport svgData from './svgImageData.json'\nimport mapImg from './assets/TuckerMap.jpg'\nimport descData from './assets/description.json'\nimport Townbox from '../Townbox'\nimport {TransformWrapper, TransformComponent} from 'react-zoom-pan-pinch'\n\nconst Map: React.FC = () => {\n  // Used because SVG does not scale properly without\n  const [height, setHeight] = useState(1)\n  const elementRef = useRef(null as null | HTMLDivElement)\n  const [selected, onSelect] = useState<Location | null>(null)\n  const [scale, setScale] = useState(1)\n  const [display, changeDisplay] = useState(false)\n  // const [townbox, setTownbox] = useState(<></>)\n  type HeaderColor = 'primary' | 'orange';\n  useEffect(() => {\n    if (elementRef?.current?.clientHeight) {\n      setHeight(elementRef?.current?.clientHeight)\n    }\n  }, []) //empty dependency array so it only runs once at render\n\n  useEffect(() => {\n    function handleResize() {\n      const mobileWidth = 2900\n      const minStaticWidth = 1170\n      const targetWidth = window.innerWidth > minStaticWidth ? window.innerWidth : mobileWidth\n      setScale(targetWidth/4961)\n    }\n    handleResize();\n    window.addEventListener('resize', handleResize)\n    },\n    []\n  )\n\n  // to get the area description given an area so you can actually use headers/captions\n  // returns null if such area doesn't exist in assets/description.json\n  const getAreaDescription = (area: Location) => {\n    for(const description of descData.descriptionArray) {\n      if (description.id === Location[area]) {\n        return description\n      }\n    }\n\n    return null\n  }\n  const onClose = () => {\n    onSelect(null) \n    changeDisplay(false)\n  }\n  const onMapClick = (area: Location) => {\n    selected === area ? onSelect(null) : onSelect(area)\n    changeDisplay(!display)\n  }\n  // eslint-disable-next-line\n  const handleClick = (event: any) => { //need to change this type\n    event.preventDefault()\n    const area = event.target.alt\n    onMapClick(Location[area as keyof typeof Location])\n  }\n\n\n  // Data can be made from dev/svgParse.py\n  return (\n    <div>\n      <TransformWrapper>\n      {({ resetTransform, setTransform }) => (\n                <>\n                <div>\n                    <button\n                    onClick={() => resetTransform()}\n                  >\n                    Reset\n                  </button>\n                </div>  \n      <TransformComponent>\n    <div\n      ref={elementRef}\n      className='block w-full min-h-full items-stretch'\n      style={{minHeight:'900px'}}\n    >\n      {height === 0 ? null : (\n          <div className='svgrow'>\n            <img src={mapImg} alt=\"Tucker Island Map\" useMap=\"#tuckerislandmap\"/>\n\n            <map name=\"tuckerislandmap\">\n              {\n                svgData.groupArray.map(location => {\n                  if (location.coords){\n                    const xtrans = parseInt(location.xtrans) * scale * 8; // I have no clue why everything is overscaled 8x\n                    const ytrans = parseInt(location.ytrans) * scale * 8; // this is probably worth looking into\n                    const scaledCoords = location.coords.map(coord => coord*scale)\n                    const className = Location[location.id as keyof typeof Location] === selected\n                          ? 'map-selected'\n                          : 'map-unselected'\n                    return (\n                        <area \n                          key={location.id}\n                          alt={location.id}\n                          //onClick={handleClick}\n                          onClick={(e) => { handleClick(e); setTransform(-xtrans, -ytrans, 2)}}\n                          href={location.id}\n                          coords={scaledCoords.join()}\n                          className={className}\n                          shape=\"poly\"\n                        />\n                    )\n                  }\n                })\n              }\n            </map>\n        </div>\n      )}\n      \n    </div>\n\n    <div className={`full-page-wrapper ${display ? '': 'none'}`}>\n      {\n        svgData.groupArray.map(area => {\n          if (selected !== null && area.coords){\n            const selectedArea = getAreaDescription(selected)\n\n            if(selectedArea !== null && selectedArea.id === area.id) {\n              const header = selectedArea?.headerText\n              const caption = selectedArea?.captionText\n              const showButton = selectedArea?.showButton\n              \n              const headerColor:HeaderColor = selectedArea?.headerColor as HeaderColor;\n\n              return (\n                  <div key={selectedArea.id} className=\"townbox-wrapper\">\n                    <Townbox \n                      headerColor={headerColor}\n                      headerText={header}\n                      captionText={caption}\n                      showButton = {showButton}\n                      close={onClose}\n                    />\n                  </div>\n              )\n            }\n          }\n        })\n      }\n    </div>\n    </TransformComponent>\n              </>\n              )}\n    </TransformWrapper>\n    </div>\n  )\n}\n\nexport default Map"]},"metadata":{},"sourceType":"module"}