{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/jun/foodbank/client/src/Components/Map/SVGLocationGroup/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Location } from '../../../lib/types';\nimport assetMap from '../assets/AssetMap';\nimport Townbox from '../../Townbox';\n\nconst SVGLocationGroup = ({\n  name,\n  width,\n  height,\n  transform,\n  className,\n  header,\n  caption,\n  showButton,\n  maxHeight,\n  maxWidth,\n  image,\n  onClick\n}) => {\n  _s();\n\n  const initalTranslationEndIndex = transform.indexOf(')');\n  const initialTranslation = transform.slice(0, initalTranslationEndIndex + 1);\n  const [translation, setTranslation] = useState(initialTranslation);\n  useEffect(() => {\n    const translationEndIndex = transform.indexOf(')');\n    const newTranslation = transform.slice(0, translationEndIndex + 1);\n    setTranslation(newTranslation);\n  }, [transform]);\n  const [netTransform, setTransform] = useState(transform);\n  useEffect(() => {\n    const newNetTransform = className.includes('map-selected') ? \"translate(0 0) scale(0 0)\" : transform;\n    setTransform(newNetTransform); //console.log(\"nt\", newNetTransform)\n  }, [className, transform]);\n\n  if (name === Location.bg) {\n    return /*#__PURE__*/_jsxDEV(\"g\", {\n      id: \"bg\",\n      children: /*#__PURE__*/_jsxDEV(\"image\", {\n        width: width,\n        height: height,\n        transform: transform,\n        xlinkHref: assetMap[image]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: image,\n    children: /*#__PURE__*/_jsxDEV(\"g\", {\n      onClick: () => onClick(name),\n      children: [/*#__PURE__*/_jsxDEV(\"g\", {\n        transform: netTransform,\n        children: /*#__PURE__*/_jsxDEV(\"image\", {\n          width: width,\n          height: height,\n          className: className,\n          xlinkHref: assetMap[image]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 7\n      }, this), className.includes('map-selected') && /*#__PURE__*/_jsxDEV(\"foreignObject\", {\n        transform: translation,\n        width: \"2000\",\n        height: \"2000\",\n        children: /*#__PURE__*/_jsxDEV(Townbox, {\n          maxWidth: maxWidth,\n          maxHeight: maxHeight,\n          headerColor: \"orange\",\n          headerText: header,\n          captionText: caption,\n          showButton: showButton\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SVGLocationGroup, \"TdMOc/CZMV6XOMcSJyexoCfkJxU=\");\n\n_c = SVGLocationGroup;\nexport default SVGLocationGroup;\n\nvar _c;\n\n$RefreshReg$(_c, \"SVGLocationGroup\");","map":{"version":3,"sources":["/home/jun/foodbank/client/src/Components/Map/SVGLocationGroup/index.tsx"],"names":["React","useState","useEffect","Location","assetMap","Townbox","SVGLocationGroup","name","width","height","transform","className","header","caption","showButton","maxHeight","maxWidth","image","onClick","initalTranslationEndIndex","indexOf","initialTranslation","slice","translation","setTranslation","translationEndIndex","newTranslation","netTransform","setTransform","newNetTransform","includes","bg"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport { Location } from '../../../lib/types'\nimport assetMap, { AssetMapProps } from '../assets/AssetMap'\nimport Townbox from '../../Townbox'\n\n\ninterface Props {\n  name: Location\n  width: string\n  height: string\n  transform: string\n  className: string\n  header?: string\n  caption?: string\n  showButton?: boolean \n  maxHeight?: string\n  maxWidth?: string\n  image: string\n  onClick: (area: Location) => void\n}\n\nconst SVGLocationGroup: React.FC<Props> = ({\n  name,\n  width,\n  height,\n  transform,\n  className,\n  header,\n  caption,\n  showButton,\n  maxHeight,\n  maxWidth,\n  image,\n  onClick\n}) => {\n  const initalTranslationEndIndex = transform.indexOf(')')\n  const initialTranslation = transform.slice(0, initalTranslationEndIndex + 1) \n\n  const [translation, setTranslation] = useState(initialTranslation)\n\n  useEffect(\n    () => {\n      const translationEndIndex = transform.indexOf(')')\n      const newTranslation = transform.slice(0, translationEndIndex + 1)\n      setTranslation(newTranslation)\n    },\n    [transform]\n  );\n\n  const [netTransform, setTransform] = useState(transform)\n\n  useEffect(\n    () => {\n\n      const newNetTransform = \n      className.includes('map-selected') ?\n        \"translate(0 0) scale(0 0)\" :\n        transform\n      \n      setTransform(newNetTransform)\n      //console.log(\"nt\", newNetTransform)\n    },\n    [className, transform]\n  )\n\n  if (name === Location.bg) {\n    return (\n      <g id='bg'>\n        <image\n          width={width}\n          height={height}\n          transform={transform}\n          xlinkHref={assetMap[image as keyof AssetMapProps]}\n        />\n      </g>\n    )\n  }\n  return (\n    <div id={image}>\n    <g onClick={() => onClick(name)}>\n      <g transform={netTransform}>\n        <image\n          width={width}\n          height={height}\n          className={className}\n          xlinkHref={assetMap[image as keyof AssetMapProps]}\n        />\n      </g>\n      {\n      className.includes('map-selected') &&  \n        <foreignObject transform={translation} width='2000' height='2000'>\n          <Townbox \n            maxWidth={maxWidth} \n            maxHeight={maxHeight}\n            headerColor=\"orange\" \n            headerText={header}\n            captionText={caption}\n            showButton = {showButton}\n            />\n        </foreignObject>\n      }\n    </g>\n    </div>\n  )\n}\n\nexport default SVGLocationGroup\n"]},"metadata":{},"sourceType":"module"}