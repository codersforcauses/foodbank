{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/jun/foodbank/client/src/Components/Map/SVGLocationGroup/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Location } from '../../../lib/types';\nimport assetMap from '../assets/AssetMap';\nimport Townbox from '../../Townbox';\n\nconst SVGLocationGroup = ({\n  id,\n  name,\n  width,\n  height,\n  transform,\n  className,\n  header,\n  caption,\n  showButton,\n  maxHeight,\n  maxWidth,\n  image //onClick\n\n}) => {\n  _s();\n\n  const initalTranslationEndIndex = transform.indexOf(')');\n  const initialTranslation = transform.slice(0, initalTranslationEndIndex + 1);\n  const [translation, setTranslation] = useState(initialTranslation);\n  useEffect(() => {\n    const translationEndIndex = transform.indexOf(')');\n    const newTranslation = transform.slice(0, translationEndIndex + 1);\n    setTranslation(newTranslation);\n  }, [transform]);\n  const [netTransform, setTransform] = useState(transform);\n  useEffect(() => {\n    const newNetTransform = className.includes('map-selected') ? \"translate(0 0) scale(1 1)\" : transform;\n    setTransform(newNetTransform);\n    console.log(\"nt\", newNetTransform);\n  }, [className, transform]);\n\n  if (name === Location.bg) {\n    return /*#__PURE__*/_jsxDEV(\"g\", {\n      children: /*#__PURE__*/_jsxDEV(\"image\", {\n        id: id,\n        width: width,\n        height: height,\n        transform: transform,\n        xlinkHref: assetMap[image]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this);\n  } // onClick={() => onClick(name)}\n\n\n  return /*#__PURE__*/_jsxDEV(\"g\", {\n    children: [/*#__PURE__*/_jsxDEV(\"g\", {\n      transform: netTransform,\n      children: /*#__PURE__*/_jsxDEV(\"image\", {\n        id: id,\n        width: width,\n        height: height,\n        className: className,\n        xlinkHref: assetMap[image]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), className.includes('map-selected') && /*#__PURE__*/_jsxDEV(\"foreignObject\", {\n      transform: translation,\n      width: \"2000\",\n      height: \"2000\",\n      children: /*#__PURE__*/_jsxDEV(Townbox, {\n        maxWidth: maxWidth,\n        maxHeight: maxHeight,\n        headerColor: \"orange\",\n        headerText: header,\n        captionText: caption,\n        showButton: showButton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SVGLocationGroup, \"TdMOc/CZMV6XOMcSJyexoCfkJxU=\");\n\n_c = SVGLocationGroup;\nexport default SVGLocationGroup;\n\nvar _c;\n\n$RefreshReg$(_c, \"SVGLocationGroup\");","map":{"version":3,"sources":["/home/jun/foodbank/client/src/Components/Map/SVGLocationGroup/index.tsx"],"names":["React","useState","useEffect","Location","assetMap","Townbox","SVGLocationGroup","id","name","width","height","transform","className","header","caption","showButton","maxHeight","maxWidth","image","initalTranslationEndIndex","indexOf","initialTranslation","slice","translation","setTranslation","translationEndIndex","newTranslation","netTransform","setTransform","newNetTransform","includes","console","log","bg"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport { Location } from '../../../lib/types'\nimport assetMap, { AssetMapProps } from '../assets/AssetMap'\nimport Townbox from '../../Townbox'\n\n\ninterface Props {\n  id: string\n  name: Location\n  width: string\n  height: string\n  transform: string\n  className: string\n  header?: string\n  caption?: string\n  showButton?: boolean \n  maxHeight?: string\n  maxWidth?: string\n  image: string\n  onClick: (area: Location) => void\n}\n\nconst SVGLocationGroup: React.FC<Props> = ({\n  id,\n  name,\n  width,\n  height,\n  transform,\n  className,\n  header,\n  caption,\n  showButton,\n  maxHeight,\n  maxWidth,\n  image,\n  //onClick\n}) => {\n  const initalTranslationEndIndex = transform.indexOf(')')\n  const initialTranslation = transform.slice(0, initalTranslationEndIndex + 1) \n\n  const [translation, setTranslation] = useState(initialTranslation)\n\n  useEffect(\n    () => {\n      const translationEndIndex = transform.indexOf(')')\n      const newTranslation = transform.slice(0, translationEndIndex + 1)\n      setTranslation(newTranslation)\n    },\n    [transform]\n  );\n\n  const [netTransform, setTransform] = useState(transform)\n\n  useEffect(\n    () => {\n\n      const newNetTransform = \n      className.includes('map-selected') ?\n        \"translate(0 0) scale(1 1)\" :\n        transform\n      \n      setTransform(newNetTransform)\n      console.log(\"nt\", newNetTransform)\n    },\n    [className, transform]\n  )\n\n  if (name === Location.bg) {\n    return (\n      <g>\n        <image\n          id={id}\n          width={width}\n          height={height}\n          transform={transform}\n          xlinkHref={assetMap[image as keyof AssetMapProps]}\n        />\n      </g>\n    )\n  }\n  // onClick={() => onClick(name)}\n  return (\n    <g>\n      <g transform={netTransform}>\n        <image\n          id={id}\n          width={width}\n          height={height}\n          className={className}\n          xlinkHref={assetMap[image as keyof AssetMapProps]}\n        />\n      </g>\n      {\n      className.includes('map-selected') &&  \n        <foreignObject transform={translation} width='2000' height='2000'>\n          <Townbox \n            maxWidth={maxWidth} \n            maxHeight={maxHeight}\n            headerColor=\"orange\" \n            headerText={header}\n            captionText={caption}\n            showButton = {showButton}\n            />\n        </foreignObject>\n      }\n    </g>\n  )\n}\n\nexport default SVGLocationGroup\n"]},"metadata":{},"sourceType":"module"}