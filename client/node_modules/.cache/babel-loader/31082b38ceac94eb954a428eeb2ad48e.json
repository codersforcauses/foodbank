{"ast":null,"code":"import has from 'lodash/has';\nimport isSchema from './util/isSchema';\n\nclass Condition {\n  constructor(refs, options) {\n    this.refs = refs;\n    this.refs = refs;\n\n    if (typeof options === 'function') {\n      this.fn = options;\n      return;\n    }\n\n    if (!has(options, 'is')) throw new TypeError('`is:` is required for `when()` conditions');\n    if (!options.then && !options.otherwise) throw new TypeError('either `then:` or `otherwise:` is required for `when()` conditions');\n    let {\n      is,\n      then,\n      otherwise\n    } = options;\n    let check = typeof is === 'function' ? is : (...values) => values.every(value => value === is);\n\n    this.fn = function (...args) {\n      let options = args.pop();\n      let schema = args.pop();\n      let branch = check(...args) ? then : otherwise;\n      if (!branch) return undefined;\n      if (typeof branch === 'function') return branch(schema);\n      return schema.concat(branch.resolve(options));\n    };\n  }\n\n  resolve(base, options) {\n    let values = this.refs.map(ref => ref.getValue(options == null ? void 0 : options.value, options == null ? void 0 : options.parent, options == null ? void 0 : options.context));\n    let schema = this.fn.apply(base, values.concat(base, options));\n    if (schema === undefined || schema === base) return base;\n    if (!isSchema(schema)) throw new TypeError('conditions must return a schema object');\n    return schema.resolve(options);\n  }\n\n}\n\nexport default Condition;","map":{"version":3,"sources":["/home/jun/foodbank/node_modules/yup/es/Condition.js"],"names":["has","isSchema","Condition","constructor","refs","options","fn","TypeError","then","otherwise","is","check","values","every","value","args","pop","schema","branch","undefined","concat","resolve","base","map","ref","getValue","parent","context","apply"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,YAAhB;AACA,OAAOC,QAAP,MAAqB,iBAArB;;AAEA,MAAMC,SAAN,CAAgB;AACdC,EAAAA,WAAW,CAACC,IAAD,EAAOC,OAAP,EAAgB;AACzB,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKA,IAAL,GAAYA,IAAZ;;AAEA,QAAI,OAAOC,OAAP,KAAmB,UAAvB,EAAmC;AACjC,WAAKC,EAAL,GAAUD,OAAV;AACA;AACD;;AAED,QAAI,CAACL,GAAG,CAACK,OAAD,EAAU,IAAV,CAAR,EAAyB,MAAM,IAAIE,SAAJ,CAAc,2CAAd,CAAN;AACzB,QAAI,CAACF,OAAO,CAACG,IAAT,IAAiB,CAACH,OAAO,CAACI,SAA9B,EAAyC,MAAM,IAAIF,SAAJ,CAAc,oEAAd,CAAN;AACzC,QAAI;AACFG,MAAAA,EADE;AAEFF,MAAAA,IAFE;AAGFC,MAAAA;AAHE,QAIAJ,OAJJ;AAKA,QAAIM,KAAK,GAAG,OAAOD,EAAP,KAAc,UAAd,GAA2BA,EAA3B,GAAgC,CAAC,GAAGE,MAAJ,KAAeA,MAAM,CAACC,KAAP,CAAaC,KAAK,IAAIA,KAAK,KAAKJ,EAAhC,CAA3D;;AAEA,SAAKJ,EAAL,GAAU,UAAU,GAAGS,IAAb,EAAmB;AAC3B,UAAIV,OAAO,GAAGU,IAAI,CAACC,GAAL,EAAd;AACA,UAAIC,MAAM,GAAGF,IAAI,CAACC,GAAL,EAAb;AACA,UAAIE,MAAM,GAAGP,KAAK,CAAC,GAAGI,IAAJ,CAAL,GAAiBP,IAAjB,GAAwBC,SAArC;AACA,UAAI,CAACS,MAAL,EAAa,OAAOC,SAAP;AACb,UAAI,OAAOD,MAAP,KAAkB,UAAtB,EAAkC,OAAOA,MAAM,CAACD,MAAD,CAAb;AAClC,aAAOA,MAAM,CAACG,MAAP,CAAcF,MAAM,CAACG,OAAP,CAAehB,OAAf,CAAd,CAAP;AACD,KAPD;AAQD;;AAEDgB,EAAAA,OAAO,CAACC,IAAD,EAAOjB,OAAP,EAAgB;AACrB,QAAIO,MAAM,GAAG,KAAKR,IAAL,CAAUmB,GAAV,CAAcC,GAAG,IAAIA,GAAG,CAACC,QAAJ,CAAapB,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,CAACS,KAAhD,EAAuDT,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,CAACqB,MAA1F,EAAkGrB,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,CAACsB,OAArI,CAArB,CAAb;AACA,QAAIV,MAAM,GAAG,KAAKX,EAAL,CAAQsB,KAAR,CAAcN,IAAd,EAAoBV,MAAM,CAACQ,MAAP,CAAcE,IAAd,EAAoBjB,OAApB,CAApB,CAAb;AACA,QAAIY,MAAM,KAAKE,SAAX,IAAwBF,MAAM,KAAKK,IAAvC,EAA6C,OAAOA,IAAP;AAC7C,QAAI,CAACrB,QAAQ,CAACgB,MAAD,CAAb,EAAuB,MAAM,IAAIV,SAAJ,CAAc,wCAAd,CAAN;AACvB,WAAOU,MAAM,CAACI,OAAP,CAAehB,OAAf,CAAP;AACD;;AAnCa;;AAuChB,eAAeH,SAAf","sourcesContent":["import has from 'lodash/has';\nimport isSchema from './util/isSchema';\n\nclass Condition {\n  constructor(refs, options) {\n    this.refs = refs;\n    this.refs = refs;\n\n    if (typeof options === 'function') {\n      this.fn = options;\n      return;\n    }\n\n    if (!has(options, 'is')) throw new TypeError('`is:` is required for `when()` conditions');\n    if (!options.then && !options.otherwise) throw new TypeError('either `then:` or `otherwise:` is required for `when()` conditions');\n    let {\n      is,\n      then,\n      otherwise\n    } = options;\n    let check = typeof is === 'function' ? is : (...values) => values.every(value => value === is);\n\n    this.fn = function (...args) {\n      let options = args.pop();\n      let schema = args.pop();\n      let branch = check(...args) ? then : otherwise;\n      if (!branch) return undefined;\n      if (typeof branch === 'function') return branch(schema);\n      return schema.concat(branch.resolve(options));\n    };\n  }\n\n  resolve(base, options) {\n    let values = this.refs.map(ref => ref.getValue(options == null ? void 0 : options.value, options == null ? void 0 : options.parent, options == null ? void 0 : options.context));\n    let schema = this.fn.apply(base, values.concat(base, options));\n    if (schema === undefined || schema === base) return base;\n    if (!isSchema(schema)) throw new TypeError('conditions must return a schema object');\n    return schema.resolve(options);\n  }\n\n}\n\nexport default Condition;"]},"metadata":{},"sourceType":"module"}