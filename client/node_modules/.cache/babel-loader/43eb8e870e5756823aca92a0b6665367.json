{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Util_1 = require(\"../Util\");\n\nvar Factory_1 = require(\"../Factory\");\n\nvar Shape_1 = require(\"../Shape\");\n\nvar Global_1 = require(\"../Global\");\n\nvar Validators_1 = require(\"../Validators\");\n\nvar Global_2 = require(\"../Global\");\n\nfunction stringToArray(string) {\n  return Array.from(string);\n}\n\nexports.stringToArray = stringToArray;\nvar AUTO = 'auto',\n    CENTER = 'center',\n    JUSTIFY = 'justify',\n    CHANGE_KONVA = 'Change.konva',\n    CONTEXT_2D = '2d',\n    DASH = '-',\n    LEFT = 'left',\n    TEXT = 'text',\n    TEXT_UPPER = 'Text',\n    TOP = 'top',\n    BOTTOM = 'bottom',\n    MIDDLE = 'middle',\n    NORMAL = 'normal',\n    PX_SPACE = 'px ',\n    SPACE = ' ',\n    RIGHT = 'right',\n    WORD = 'word',\n    CHAR = 'char',\n    NONE = 'none',\n    ELLIPSIS = 'â€¦',\n    ATTR_CHANGE_LIST = ['fontFamily', 'fontSize', 'fontStyle', 'fontVariant', 'padding', 'align', 'verticalAlign', 'lineHeight', 'text', 'width', 'height', 'wrap', 'ellipsis', 'letterSpacing'],\n    attrChangeListLen = ATTR_CHANGE_LIST.length;\n\nfunction normalizeFontFamily(fontFamily) {\n  return fontFamily.split(',').map(function (family) {\n    family = family.trim();\n    var hasSpace = family.indexOf(' ') >= 0;\n    var hasQuotes = family.indexOf('\"') >= 0 || family.indexOf(\"'\") >= 0;\n\n    if (hasSpace && !hasQuotes) {\n      family = \"\\\"\" + family + \"\\\"\";\n    }\n\n    return family;\n  }).join(', ');\n}\n\nvar dummyContext;\n\nfunction getDummyContext() {\n  if (dummyContext) {\n    return dummyContext;\n  }\n\n  dummyContext = Util_1.Util.createCanvasElement().getContext(CONTEXT_2D);\n  return dummyContext;\n}\n\nfunction _fillFunc(context) {\n  context.fillText(this._partialText, this._partialTextX, this._partialTextY);\n}\n\nfunction _strokeFunc(context) {\n  context.strokeText(this._partialText, this._partialTextX, this._partialTextY);\n}\n\nfunction checkDefaultFill(config) {\n  config = config || {};\n\n  if (!config.fillLinearGradientColorStops && !config.fillRadialGradientColorStops && !config.fillPatternImage) {\n    config.fill = config.fill || 'black';\n  }\n\n  return config;\n}\n\nvar Text = function (_super) {\n  __extends(Text, _super);\n\n  function Text(config) {\n    var _this = _super.call(this, checkDefaultFill(config)) || this;\n\n    _this._partialTextX = 0;\n    _this._partialTextY = 0;\n\n    for (var n = 0; n < attrChangeListLen; n++) {\n      _this.on(ATTR_CHANGE_LIST[n] + CHANGE_KONVA, _this._setTextData);\n    }\n\n    _this._setTextData();\n\n    return _this;\n  }\n\n  Text.prototype._sceneFunc = function (context) {\n    var textArr = this.textArr,\n        textArrLen = textArr.length;\n\n    if (!this.text()) {\n      return;\n    }\n\n    var padding = this.padding(),\n        fontSize = this.fontSize(),\n        lineHeightPx = this.lineHeight() * fontSize,\n        verticalAlign = this.verticalAlign(),\n        alignY = 0,\n        align = this.align(),\n        totalWidth = this.getWidth(),\n        letterSpacing = this.letterSpacing(),\n        fill = this.fill(),\n        textDecoration = this.textDecoration(),\n        shouldUnderline = textDecoration.indexOf('underline') !== -1,\n        shouldLineThrough = textDecoration.indexOf('line-through') !== -1,\n        n;\n    var translateY = 0;\n    var translateY = lineHeightPx / 2;\n    var lineTranslateX = 0;\n    var lineTranslateY = 0;\n    context.setAttr('font', this._getContextFont());\n    context.setAttr('textBaseline', MIDDLE);\n    context.setAttr('textAlign', LEFT);\n\n    if (verticalAlign === MIDDLE) {\n      alignY = (this.getHeight() - textArrLen * lineHeightPx - padding * 2) / 2;\n    } else if (verticalAlign === BOTTOM) {\n      alignY = this.getHeight() - textArrLen * lineHeightPx - padding * 2;\n    }\n\n    context.translate(padding, alignY + padding);\n\n    for (n = 0; n < textArrLen; n++) {\n      var lineTranslateX = 0;\n      var lineTranslateY = 0;\n      var obj = textArr[n],\n          text = obj.text,\n          width = obj.width,\n          lastLine = n !== textArrLen - 1,\n          spacesNumber,\n          oneWord,\n          lineWidth;\n      context.save();\n\n      if (align === RIGHT) {\n        lineTranslateX += totalWidth - width - padding * 2;\n      } else if (align === CENTER) {\n        lineTranslateX += (totalWidth - width - padding * 2) / 2;\n      }\n\n      if (shouldUnderline) {\n        context.save();\n        context.beginPath();\n        context.moveTo(lineTranslateX, translateY + lineTranslateY + Math.round(fontSize / 2));\n        spacesNumber = text.split(' ').length - 1;\n        oneWord = spacesNumber === 0;\n        lineWidth = align === JUSTIFY && lastLine && !oneWord ? totalWidth - padding * 2 : width;\n        context.lineTo(lineTranslateX + Math.round(lineWidth), translateY + lineTranslateY + Math.round(fontSize / 2));\n        context.lineWidth = fontSize / 15;\n        context.strokeStyle = fill;\n        context.stroke();\n        context.restore();\n      }\n\n      if (shouldLineThrough) {\n        context.save();\n        context.beginPath();\n        context.moveTo(lineTranslateX, translateY + lineTranslateY);\n        spacesNumber = text.split(' ').length - 1;\n        oneWord = spacesNumber === 0;\n        lineWidth = align === JUSTIFY && lastLine && !oneWord ? totalWidth - padding * 2 : width;\n        context.lineTo(lineTranslateX + Math.round(lineWidth), translateY + lineTranslateY);\n        context.lineWidth = fontSize / 15;\n        context.strokeStyle = fill;\n        context.stroke();\n        context.restore();\n      }\n\n      if (letterSpacing !== 0 || align === JUSTIFY) {\n        spacesNumber = text.split(' ').length - 1;\n        var array = stringToArray(text);\n\n        for (var li = 0; li < array.length; li++) {\n          var letter = array[li];\n\n          if (letter === ' ' && n !== textArrLen - 1 && align === JUSTIFY) {\n            lineTranslateX += (totalWidth - padding * 2 - width) / spacesNumber;\n          }\n\n          this._partialTextX = lineTranslateX;\n          this._partialTextY = translateY + lineTranslateY;\n          this._partialText = letter;\n          context.fillStrokeShape(this);\n          lineTranslateX += this.measureSize(letter).width + letterSpacing;\n        }\n      } else {\n        this._partialTextX = lineTranslateX;\n        this._partialTextY = translateY + lineTranslateY;\n        this._partialText = text;\n        context.fillStrokeShape(this);\n      }\n\n      context.restore();\n\n      if (textArrLen > 1) {\n        translateY += lineHeightPx;\n      }\n    }\n  };\n\n  Text.prototype._hitFunc = function (context) {\n    var width = this.getWidth(),\n        height = this.getHeight();\n    context.beginPath();\n    context.rect(0, 0, width, height);\n    context.closePath();\n    context.fillStrokeShape(this);\n  };\n\n  Text.prototype.setText = function (text) {\n    var str = Util_1.Util._isString(text) ? text : text === null || text === undefined ? '' : text + '';\n\n    this._setAttr(TEXT, str);\n\n    return this;\n  };\n\n  Text.prototype.getWidth = function () {\n    var isAuto = this.attrs.width === AUTO || this.attrs.width === undefined;\n    return isAuto ? this.getTextWidth() + this.padding() * 2 : this.attrs.width;\n  };\n\n  Text.prototype.getHeight = function () {\n    var isAuto = this.attrs.height === AUTO || this.attrs.height === undefined;\n    return isAuto ? this.fontSize() * this.textArr.length * this.lineHeight() + this.padding() * 2 : this.attrs.height;\n  };\n\n  Text.prototype.getTextWidth = function () {\n    return this.textWidth;\n  };\n\n  Text.prototype.getTextHeight = function () {\n    Util_1.Util.warn('text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height.');\n    return this.textHeight;\n  };\n\n  Text.prototype.measureSize = function (text) {\n    var _context = getDummyContext(),\n        fontSize = this.fontSize(),\n        metrics;\n\n    _context.save();\n\n    _context.font = this._getContextFont();\n    metrics = _context.measureText(text);\n\n    _context.restore();\n\n    return {\n      width: metrics.width,\n      height: fontSize\n    };\n  };\n\n  Text.prototype._getContextFont = function () {\n    if (Global_1.Konva.UA.isIE) {\n      return this.fontStyle() + SPACE + this.fontSize() + PX_SPACE + this.fontFamily();\n    }\n\n    return this.fontStyle() + SPACE + this.fontVariant() + SPACE + (this.fontSize() + PX_SPACE) + normalizeFontFamily(this.fontFamily());\n  };\n\n  Text.prototype._addTextLine = function (line) {\n    if (this.align() === JUSTIFY) {\n      line = line.trim();\n    }\n\n    var width = this._getTextWidth(line);\n\n    return this.textArr.push({\n      text: line,\n      width: width\n    });\n  };\n\n  Text.prototype._getTextWidth = function (text) {\n    var letterSpacing = this.letterSpacing();\n    var length = text.length;\n    return getDummyContext().measureText(text).width + (length ? letterSpacing * (length - 1) : 0);\n  };\n\n  Text.prototype._setTextData = function () {\n    var lines = this.text().split('\\n'),\n        fontSize = +this.fontSize(),\n        textWidth = 0,\n        lineHeightPx = this.lineHeight() * fontSize,\n        width = this.attrs.width,\n        height = this.attrs.height,\n        fixedWidth = width !== AUTO && width !== undefined,\n        fixedHeight = height !== AUTO && height !== undefined,\n        padding = this.padding(),\n        maxWidth = width - padding * 2,\n        maxHeightPx = height - padding * 2,\n        currentHeightPx = 0,\n        wrap = this.wrap(),\n        shouldWrap = wrap !== NONE,\n        wrapAtWord = wrap !== CHAR && shouldWrap,\n        shouldAddEllipsis = this.ellipsis();\n    this.textArr = [];\n    getDummyContext().font = this._getContextFont();\n    var additionalWidth = shouldAddEllipsis ? this._getTextWidth(ELLIPSIS) : 0;\n\n    for (var i = 0, max = lines.length; i < max; ++i) {\n      var line = lines[i];\n\n      var lineWidth = this._getTextWidth(line);\n\n      if (fixedWidth && lineWidth > maxWidth) {\n        while (line.length > 0) {\n          var low = 0,\n              high = line.length,\n              match = '',\n              matchWidth = 0;\n\n          while (low < high) {\n            var mid = low + high >>> 1,\n                substr = line.slice(0, mid + 1),\n                substrWidth = this._getTextWidth(substr) + additionalWidth;\n\n            if (substrWidth <= maxWidth) {\n              low = mid + 1;\n              match = substr;\n              matchWidth = substrWidth;\n            } else {\n              high = mid;\n            }\n          }\n\n          if (match) {\n            if (wrapAtWord) {\n              var wrapIndex;\n              var nextChar = line[match.length];\n              var nextIsSpaceOrDash = nextChar === SPACE || nextChar === DASH;\n\n              if (nextIsSpaceOrDash && matchWidth <= maxWidth) {\n                wrapIndex = match.length;\n              } else {\n                wrapIndex = Math.max(match.lastIndexOf(SPACE), match.lastIndexOf(DASH)) + 1;\n              }\n\n              if (wrapIndex > 0) {\n                low = wrapIndex;\n                match = match.slice(0, low);\n                matchWidth = this._getTextWidth(match);\n              }\n            }\n\n            match = match.trimRight();\n\n            this._addTextLine(match);\n\n            textWidth = Math.max(textWidth, matchWidth);\n            currentHeightPx += lineHeightPx;\n\n            if (!shouldWrap || fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx) {\n              var lastLine = this.textArr[this.textArr.length - 1];\n\n              if (lastLine) {\n                if (shouldAddEllipsis) {\n                  var haveSpace = this._getTextWidth(lastLine.text + ELLIPSIS) < maxWidth;\n\n                  if (!haveSpace) {\n                    lastLine.text = lastLine.text.slice(0, lastLine.text.length - 3);\n                  }\n\n                  this.textArr.splice(this.textArr.length - 1, 1);\n\n                  this._addTextLine(lastLine.text + ELLIPSIS);\n                }\n              }\n\n              break;\n            }\n\n            line = line.slice(low);\n            line = line.trimLeft();\n\n            if (line.length > 0) {\n              lineWidth = this._getTextWidth(line);\n\n              if (lineWidth <= maxWidth) {\n                this._addTextLine(line);\n\n                currentHeightPx += lineHeightPx;\n                textWidth = Math.max(textWidth, lineWidth);\n                break;\n              }\n            }\n          } else {\n            break;\n          }\n        }\n      } else {\n        this._addTextLine(line);\n\n        currentHeightPx += lineHeightPx;\n        textWidth = Math.max(textWidth, lineWidth);\n      }\n\n      if (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx) {\n        break;\n      }\n    }\n\n    this.textHeight = fontSize;\n    this.textWidth = textWidth;\n  };\n\n  Text.prototype.getStrokeScaleEnabled = function () {\n    return true;\n  };\n\n  return Text;\n}(Shape_1.Shape);\n\nexports.Text = Text;\nText.prototype._fillFunc = _fillFunc;\nText.prototype._strokeFunc = _strokeFunc;\nText.prototype.className = TEXT_UPPER;\nText.prototype._attrsAffectingSize = ['text', 'fontSize', 'padding', 'wrap', 'lineHeight'];\n\nGlobal_2._registerNode(Text);\n\nFactory_1.Factory.overWriteSetter(Text, 'width', Validators_1.getNumberOrAutoValidator());\nFactory_1.Factory.overWriteSetter(Text, 'height', Validators_1.getNumberOrAutoValidator());\nFactory_1.Factory.addGetterSetter(Text, 'fontFamily', 'Arial');\nFactory_1.Factory.addGetterSetter(Text, 'fontSize', 12, Validators_1.getNumberValidator());\nFactory_1.Factory.addGetterSetter(Text, 'fontStyle', NORMAL);\nFactory_1.Factory.addGetterSetter(Text, 'fontVariant', NORMAL);\nFactory_1.Factory.addGetterSetter(Text, 'padding', 0, Validators_1.getNumberValidator());\nFactory_1.Factory.addGetterSetter(Text, 'align', LEFT);\nFactory_1.Factory.addGetterSetter(Text, 'verticalAlign', TOP);\nFactory_1.Factory.addGetterSetter(Text, 'lineHeight', 1, Validators_1.getNumberValidator());\nFactory_1.Factory.addGetterSetter(Text, 'wrap', WORD);\nFactory_1.Factory.addGetterSetter(Text, 'ellipsis', false, Validators_1.getBooleanValidator());\nFactory_1.Factory.addGetterSetter(Text, 'letterSpacing', 0, Validators_1.getNumberValidator());\nFactory_1.Factory.addGetterSetter(Text, 'text', '', Validators_1.getStringValidator());\nFactory_1.Factory.addGetterSetter(Text, 'textDecoration', '');\nUtil_1.Collection.mapMethods(Text);","map":{"version":3,"sources":["/home/jun/foodbank/node_modules/konva/lib/shapes/Text.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","defineProperty","exports","value","Util_1","require","Factory_1","Shape_1","Global_1","Validators_1","Global_2","stringToArray","string","from","AUTO","CENTER","JUSTIFY","CHANGE_KONVA","CONTEXT_2D","DASH","LEFT","TEXT","TEXT_UPPER","TOP","BOTTOM","MIDDLE","NORMAL","PX_SPACE","SPACE","RIGHT","WORD","CHAR","NONE","ELLIPSIS","ATTR_CHANGE_LIST","attrChangeListLen","length","normalizeFontFamily","fontFamily","split","map","family","trim","hasSpace","indexOf","hasQuotes","join","dummyContext","getDummyContext","Util","createCanvasElement","getContext","_fillFunc","context","fillText","_partialText","_partialTextX","_partialTextY","_strokeFunc","strokeText","checkDefaultFill","config","fillLinearGradientColorStops","fillRadialGradientColorStops","fillPatternImage","fill","Text","_super","_this","call","n","on","_setTextData","_sceneFunc","textArr","textArrLen","text","padding","fontSize","lineHeightPx","lineHeight","verticalAlign","alignY","align","totalWidth","getWidth","letterSpacing","textDecoration","shouldUnderline","shouldLineThrough","translateY","lineTranslateX","lineTranslateY","setAttr","_getContextFont","getHeight","translate","obj","width","lastLine","spacesNumber","oneWord","lineWidth","save","beginPath","moveTo","Math","round","lineTo","strokeStyle","stroke","restore","array","li","letter","fillStrokeShape","measureSize","_hitFunc","height","rect","closePath","setText","str","_isString","undefined","_setAttr","isAuto","attrs","getTextWidth","textWidth","getTextHeight","warn","textHeight","_context","metrics","font","measureText","Konva","UA","isIE","fontStyle","fontVariant","_addTextLine","line","_getTextWidth","push","lines","fixedWidth","fixedHeight","maxWidth","maxHeightPx","currentHeightPx","wrap","shouldWrap","wrapAtWord","shouldAddEllipsis","ellipsis","additionalWidth","i","max","low","high","match","matchWidth","mid","substr","slice","substrWidth","wrapIndex","nextChar","nextIsSpaceOrDash","lastIndexOf","trimRight","haveSpace","splice","trimLeft","getStrokeScaleEnabled","Shape","className","_attrsAffectingSize","_registerNode","Factory","overWriteSetter","getNumberOrAutoValidator","addGetterSetter","getNumberValidator","getBooleanValidator","getStringValidator","Collection","mapMethods"],"mappings":"AAAA;;AACA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA6B,YAAY;AACrD,MAAIC,aAAa,GAAG,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAChCF,IAAAA,aAAa,GAAGG,MAAM,CAACC,cAAP,IACX;AAAEC,MAAAA,SAAS,EAAE;AAAb,iBAA6BC,KAA7B,IAAsC,UAAUL,CAAV,EAAaC,CAAb,EAAgB;AAAED,MAAAA,CAAC,CAACI,SAAF,GAAcH,CAAd;AAAkB,KAD/D,IAEZ,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AAAE,WAAK,IAAIK,CAAT,IAAcL,CAAd,EAAiB,IAAIA,CAAC,CAACM,cAAF,CAAiBD,CAAjB,CAAJ,EAAyBN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AAAc,KAF9E;;AAGA,WAAOP,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAApB;AACH,GALD;;AAMA,SAAO,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AACnBF,IAAAA,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAAb;;AACA,aAASO,EAAT,GAAc;AAAE,WAAKC,WAAL,GAAmBT,CAAnB;AAAuB;;AACvCA,IAAAA,CAAC,CAACU,SAAF,GAAcT,CAAC,KAAK,IAAN,GAAaC,MAAM,CAACS,MAAP,CAAcV,CAAd,CAAb,IAAiCO,EAAE,CAACE,SAAH,GAAeT,CAAC,CAACS,SAAjB,EAA4B,IAAIF,EAAJ,EAA7D,CAAd;AACH,GAJD;AAKH,CAZ2C,EAA5C;;AAaAN,MAAM,CAACU,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,SAAD,CAApB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,YAAD,CAAvB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,UAAD,CAArB;;AACA,IAAIG,QAAQ,GAAGH,OAAO,CAAC,WAAD,CAAtB;;AACA,IAAII,YAAY,GAAGJ,OAAO,CAAC,eAAD,CAA1B;;AACA,IAAIK,QAAQ,GAAGL,OAAO,CAAC,WAAD,CAAtB;;AACA,SAASM,aAAT,CAAuBC,MAAvB,EAA+B;AAC3B,SAAOlB,KAAK,CAACmB,IAAN,CAAWD,MAAX,CAAP;AACH;;AACDV,OAAO,CAACS,aAAR,GAAwBA,aAAxB;AACA,IAAIG,IAAI,GAAG,MAAX;AAAA,IAAmBC,MAAM,GAAG,QAA5B;AAAA,IAAsCC,OAAO,GAAG,SAAhD;AAAA,IAA2DC,YAAY,GAAG,cAA1E;AAAA,IAA0FC,UAAU,GAAG,IAAvG;AAAA,IAA6GC,IAAI,GAAG,GAApH;AAAA,IAAyHC,IAAI,GAAG,MAAhI;AAAA,IAAwIC,IAAI,GAAG,MAA/I;AAAA,IAAuJC,UAAU,GAAG,MAApK;AAAA,IAA4KC,GAAG,GAAG,KAAlL;AAAA,IAAyLC,MAAM,GAAG,QAAlM;AAAA,IAA4MC,MAAM,GAAG,QAArN;AAAA,IAA+NC,MAAM,GAAG,QAAxO;AAAA,IAAkPC,QAAQ,GAAG,KAA7P;AAAA,IAAoQC,KAAK,GAAG,GAA5Q;AAAA,IAAiRC,KAAK,GAAG,OAAzR;AAAA,IAAkSC,IAAI,GAAG,MAAzS;AAAA,IAAiTC,IAAI,GAAG,MAAxT;AAAA,IAAgUC,IAAI,GAAG,MAAvU;AAAA,IAA+UC,QAAQ,GAAG,GAA1V;AAAA,IAA+VC,gBAAgB,GAAG,CAC9W,YAD8W,EAE9W,UAF8W,EAG9W,WAH8W,EAI9W,aAJ8W,EAK9W,SAL8W,EAM9W,OAN8W,EAO9W,eAP8W,EAQ9W,YAR8W,EAS9W,MAT8W,EAU9W,OAV8W,EAW9W,QAX8W,EAY9W,MAZ8W,EAa9W,UAb8W,EAc9W,eAd8W,CAAlX;AAAA,IAeGC,iBAAiB,GAAGD,gBAAgB,CAACE,MAfxC;;AAgBA,SAASC,mBAAT,CAA6BC,UAA7B,EAAyC;AACrC,SAAOA,UAAU,CACZC,KADE,CACI,GADJ,EAEFC,GAFE,CAEE,UAAUC,MAAV,EAAkB;AACvBA,IAAAA,MAAM,GAAGA,MAAM,CAACC,IAAP,EAAT;AACA,QAAIC,QAAQ,GAAGF,MAAM,CAACG,OAAP,CAAe,GAAf,KAAuB,CAAtC;AACA,QAAIC,SAAS,GAAGJ,MAAM,CAACG,OAAP,CAAe,GAAf,KAAuB,CAAvB,IAA4BH,MAAM,CAACG,OAAP,CAAe,GAAf,KAAuB,CAAnE;;AACA,QAAID,QAAQ,IAAI,CAACE,SAAjB,EAA4B;AACxBJ,MAAAA,MAAM,GAAG,OAAOA,MAAP,GAAgB,IAAzB;AACH;;AACD,WAAOA,MAAP;AACH,GAVM,EAWFK,IAXE,CAWG,IAXH,CAAP;AAYH;;AACD,IAAIC,YAAJ;;AACA,SAASC,eAAT,GAA2B;AACvB,MAAID,YAAJ,EAAkB;AACd,WAAOA,YAAP;AACH;;AACDA,EAAAA,YAAY,GAAG3C,MAAM,CAAC6C,IAAP,CAAYC,mBAAZ,GAAkCC,UAAlC,CAA6CjC,UAA7C,CAAf;AACA,SAAO6B,YAAP;AACH;;AACD,SAASK,SAAT,CAAmBC,OAAnB,EAA4B;AACxBA,EAAAA,OAAO,CAACC,QAAR,CAAiB,KAAKC,YAAtB,EAAoC,KAAKC,aAAzC,EAAwD,KAAKC,aAA7D;AACH;;AACD,SAASC,WAAT,CAAqBL,OAArB,EAA8B;AAC1BA,EAAAA,OAAO,CAACM,UAAR,CAAmB,KAAKJ,YAAxB,EAAsC,KAAKC,aAA3C,EAA0D,KAAKC,aAA/D;AACH;;AACD,SAASG,gBAAT,CAA0BC,MAA1B,EAAkC;AAC9BA,EAAAA,MAAM,GAAGA,MAAM,IAAI,EAAnB;;AACA,MAAI,CAACA,MAAM,CAACC,4BAAR,IACA,CAACD,MAAM,CAACE,4BADR,IAEA,CAACF,MAAM,CAACG,gBAFZ,EAE8B;AAC1BH,IAAAA,MAAM,CAACI,IAAP,GAAcJ,MAAM,CAACI,IAAP,IAAe,OAA7B;AACH;;AACD,SAAOJ,MAAP;AACH;;AACD,IAAIK,IAAI,GAAI,UAAUC,MAAV,EAAkB;AAC1BhF,EAAAA,SAAS,CAAC+E,IAAD,EAAOC,MAAP,CAAT;;AACA,WAASD,IAAT,CAAcL,MAAd,EAAsB;AAClB,QAAIO,KAAK,GAAGD,MAAM,CAACE,IAAP,CAAY,IAAZ,EAAkBT,gBAAgB,CAACC,MAAD,CAAlC,KAA+C,IAA3D;;AACAO,IAAAA,KAAK,CAACZ,aAAN,GAAsB,CAAtB;AACAY,IAAAA,KAAK,CAACX,aAAN,GAAsB,CAAtB;;AACA,SAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGnC,iBAApB,EAAuCmC,CAAC,EAAxC,EAA4C;AACxCF,MAAAA,KAAK,CAACG,EAAN,CAASrC,gBAAgB,CAACoC,CAAD,CAAhB,GAAsBrD,YAA/B,EAA6CmD,KAAK,CAACI,YAAnD;AACH;;AACDJ,IAAAA,KAAK,CAACI,YAAN;;AACA,WAAOJ,KAAP;AACH;;AACDF,EAAAA,IAAI,CAACnE,SAAL,CAAe0E,UAAf,GAA4B,UAAUpB,OAAV,EAAmB;AAC3C,QAAIqB,OAAO,GAAG,KAAKA,OAAnB;AAAA,QAA4BC,UAAU,GAAGD,OAAO,CAACtC,MAAjD;;AACA,QAAI,CAAC,KAAKwC,IAAL,EAAL,EAAkB;AACd;AACH;;AACD,QAAIC,OAAO,GAAG,KAAKA,OAAL,EAAd;AAAA,QAA8BC,QAAQ,GAAG,KAAKA,QAAL,EAAzC;AAAA,QAA0DC,YAAY,GAAG,KAAKC,UAAL,KAAoBF,QAA7F;AAAA,QAAuGG,aAAa,GAAG,KAAKA,aAAL,EAAvH;AAAA,QAA6IC,MAAM,GAAG,CAAtJ;AAAA,QAAyJC,KAAK,GAAG,KAAKA,KAAL,EAAjK;AAAA,QAA+KC,UAAU,GAAG,KAAKC,QAAL,EAA5L;AAAA,QAA6MC,aAAa,GAAG,KAAKA,aAAL,EAA7N;AAAA,QAAmPrB,IAAI,GAAG,KAAKA,IAAL,EAA1P;AAAA,QAAuQsB,cAAc,GAAG,KAAKA,cAAL,EAAxR;AAAA,QAA+SC,eAAe,GAAGD,cAAc,CAAC3C,OAAf,CAAuB,WAAvB,MAAwC,CAAC,CAA1W;AAAA,QAA6W6C,iBAAiB,GAAGF,cAAc,CAAC3C,OAAf,CAAuB,cAAvB,MAA2C,CAAC,CAA7a;AAAA,QAAgb0B,CAAhb;AACA,QAAIoB,UAAU,GAAG,CAAjB;AACA,QAAIA,UAAU,GAAGX,YAAY,GAAG,CAAhC;AACA,QAAIY,cAAc,GAAG,CAArB;AACA,QAAIC,cAAc,GAAG,CAArB;AACAvC,IAAAA,OAAO,CAACwC,OAAR,CAAgB,MAAhB,EAAwB,KAAKC,eAAL,EAAxB;AACAzC,IAAAA,OAAO,CAACwC,OAAR,CAAgB,cAAhB,EAAgCpE,MAAhC;AACA4B,IAAAA,OAAO,CAACwC,OAAR,CAAgB,WAAhB,EAA6BzE,IAA7B;;AACA,QAAI6D,aAAa,KAAKxD,MAAtB,EAA8B;AAC1ByD,MAAAA,MAAM,GAAG,CAAC,KAAKa,SAAL,KAAmBpB,UAAU,GAAGI,YAAhC,GAA+CF,OAAO,GAAG,CAA1D,IAA+D,CAAxE;AACH,KAFD,MAGK,IAAII,aAAa,KAAKzD,MAAtB,EAA8B;AAC/B0D,MAAAA,MAAM,GAAG,KAAKa,SAAL,KAAmBpB,UAAU,GAAGI,YAAhC,GAA+CF,OAAO,GAAG,CAAlE;AACH;;AACDxB,IAAAA,OAAO,CAAC2C,SAAR,CAAkBnB,OAAlB,EAA2BK,MAAM,GAAGL,OAApC;;AACA,SAAKP,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGK,UAAhB,EAA4BL,CAAC,EAA7B,EAAiC;AAC7B,UAAIqB,cAAc,GAAG,CAArB;AACA,UAAIC,cAAc,GAAG,CAArB;AACA,UAAIK,GAAG,GAAGvB,OAAO,CAACJ,CAAD,CAAjB;AAAA,UAAsBM,IAAI,GAAGqB,GAAG,CAACrB,IAAjC;AAAA,UAAuCsB,KAAK,GAAGD,GAAG,CAACC,KAAnD;AAAA,UAA0DC,QAAQ,GAAG7B,CAAC,KAAKK,UAAU,GAAG,CAAxF;AAAA,UAA2FyB,YAA3F;AAAA,UAAyGC,OAAzG;AAAA,UAAkHC,SAAlH;AACAjD,MAAAA,OAAO,CAACkD,IAAR;;AACA,UAAIpB,KAAK,KAAKtD,KAAd,EAAqB;AACjB8D,QAAAA,cAAc,IAAIP,UAAU,GAAGc,KAAb,GAAqBrB,OAAO,GAAG,CAAjD;AACH,OAFD,MAGK,IAAIM,KAAK,KAAKpE,MAAd,EAAsB;AACvB4E,QAAAA,cAAc,IAAI,CAACP,UAAU,GAAGc,KAAb,GAAqBrB,OAAO,GAAG,CAAhC,IAAqC,CAAvD;AACH;;AACD,UAAIW,eAAJ,EAAqB;AACjBnC,QAAAA,OAAO,CAACkD,IAAR;AACAlD,QAAAA,OAAO,CAACmD,SAAR;AACAnD,QAAAA,OAAO,CAACoD,MAAR,CAAed,cAAf,EAA+BD,UAAU,GAAGE,cAAb,GAA8Bc,IAAI,CAACC,KAAL,CAAW7B,QAAQ,GAAG,CAAtB,CAA7D;AACAsB,QAAAA,YAAY,GAAGxB,IAAI,CAACrC,KAAL,CAAW,GAAX,EAAgBH,MAAhB,GAAyB,CAAxC;AACAiE,QAAAA,OAAO,GAAGD,YAAY,KAAK,CAA3B;AACAE,QAAAA,SAAS,GACLnB,KAAK,KAAKnE,OAAV,IAAqBmF,QAArB,IAAiC,CAACE,OAAlC,GACMjB,UAAU,GAAGP,OAAO,GAAG,CAD7B,GAEMqB,KAHV;AAIA7C,QAAAA,OAAO,CAACuD,MAAR,CAAejB,cAAc,GAAGe,IAAI,CAACC,KAAL,CAAWL,SAAX,CAAhC,EAAuDZ,UAAU,GAAGE,cAAb,GAA8Bc,IAAI,CAACC,KAAL,CAAW7B,QAAQ,GAAG,CAAtB,CAArF;AACAzB,QAAAA,OAAO,CAACiD,SAAR,GAAoBxB,QAAQ,GAAG,EAA/B;AACAzB,QAAAA,OAAO,CAACwD,WAAR,GAAsB5C,IAAtB;AACAZ,QAAAA,OAAO,CAACyD,MAAR;AACAzD,QAAAA,OAAO,CAAC0D,OAAR;AACH;;AACD,UAAItB,iBAAJ,EAAuB;AACnBpC,QAAAA,OAAO,CAACkD,IAAR;AACAlD,QAAAA,OAAO,CAACmD,SAAR;AACAnD,QAAAA,OAAO,CAACoD,MAAR,CAAed,cAAf,EAA+BD,UAAU,GAAGE,cAA5C;AACAQ,QAAAA,YAAY,GAAGxB,IAAI,CAACrC,KAAL,CAAW,GAAX,EAAgBH,MAAhB,GAAyB,CAAxC;AACAiE,QAAAA,OAAO,GAAGD,YAAY,KAAK,CAA3B;AACAE,QAAAA,SAAS,GACLnB,KAAK,KAAKnE,OAAV,IAAqBmF,QAArB,IAAiC,CAACE,OAAlC,GACMjB,UAAU,GAAGP,OAAO,GAAG,CAD7B,GAEMqB,KAHV;AAIA7C,QAAAA,OAAO,CAACuD,MAAR,CAAejB,cAAc,GAAGe,IAAI,CAACC,KAAL,CAAWL,SAAX,CAAhC,EAAuDZ,UAAU,GAAGE,cAApE;AACAvC,QAAAA,OAAO,CAACiD,SAAR,GAAoBxB,QAAQ,GAAG,EAA/B;AACAzB,QAAAA,OAAO,CAACwD,WAAR,GAAsB5C,IAAtB;AACAZ,QAAAA,OAAO,CAACyD,MAAR;AACAzD,QAAAA,OAAO,CAAC0D,OAAR;AACH;;AACD,UAAIzB,aAAa,KAAK,CAAlB,IAAuBH,KAAK,KAAKnE,OAArC,EAA8C;AAC1CoF,QAAAA,YAAY,GAAGxB,IAAI,CAACrC,KAAL,CAAW,GAAX,EAAgBH,MAAhB,GAAyB,CAAxC;AACA,YAAI4E,KAAK,GAAGrG,aAAa,CAACiE,IAAD,CAAzB;;AACA,aAAK,IAAIqC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGD,KAAK,CAAC5E,MAA5B,EAAoC6E,EAAE,EAAtC,EAA0C;AACtC,cAAIC,MAAM,GAAGF,KAAK,CAACC,EAAD,CAAlB;;AACA,cAAIC,MAAM,KAAK,GAAX,IAAkB5C,CAAC,KAAKK,UAAU,GAAG,CAArC,IAA0CQ,KAAK,KAAKnE,OAAxD,EAAiE;AAC7D2E,YAAAA,cAAc,IAAI,CAACP,UAAU,GAAGP,OAAO,GAAG,CAAvB,GAA2BqB,KAA5B,IAAqCE,YAAvD;AACH;;AACD,eAAK5C,aAAL,GAAqBmC,cAArB;AACA,eAAKlC,aAAL,GAAqBiC,UAAU,GAAGE,cAAlC;AACA,eAAKrC,YAAL,GAAoB2D,MAApB;AACA7D,UAAAA,OAAO,CAAC8D,eAAR,CAAwB,IAAxB;AACAxB,UAAAA,cAAc,IAAI,KAAKyB,WAAL,CAAiBF,MAAjB,EAAyBhB,KAAzB,GAAiCZ,aAAnD;AACH;AACJ,OAdD,MAeK;AACD,aAAK9B,aAAL,GAAqBmC,cAArB;AACA,aAAKlC,aAAL,GAAqBiC,UAAU,GAAGE,cAAlC;AACA,aAAKrC,YAAL,GAAoBqB,IAApB;AACAvB,QAAAA,OAAO,CAAC8D,eAAR,CAAwB,IAAxB;AACH;;AACD9D,MAAAA,OAAO,CAAC0D,OAAR;;AACA,UAAIpC,UAAU,GAAG,CAAjB,EAAoB;AAChBe,QAAAA,UAAU,IAAIX,YAAd;AACH;AACJ;AACJ,GAzFD;;AA0FAb,EAAAA,IAAI,CAACnE,SAAL,CAAesH,QAAf,GAA0B,UAAUhE,OAAV,EAAmB;AACzC,QAAI6C,KAAK,GAAG,KAAKb,QAAL,EAAZ;AAAA,QAA6BiC,MAAM,GAAG,KAAKvB,SAAL,EAAtC;AACA1C,IAAAA,OAAO,CAACmD,SAAR;AACAnD,IAAAA,OAAO,CAACkE,IAAR,CAAa,CAAb,EAAgB,CAAhB,EAAmBrB,KAAnB,EAA0BoB,MAA1B;AACAjE,IAAAA,OAAO,CAACmE,SAAR;AACAnE,IAAAA,OAAO,CAAC8D,eAAR,CAAwB,IAAxB;AACH,GAND;;AAOAjD,EAAAA,IAAI,CAACnE,SAAL,CAAe0H,OAAf,GAAyB,UAAU7C,IAAV,EAAgB;AACrC,QAAI8C,GAAG,GAAGtH,MAAM,CAAC6C,IAAP,CAAY0E,SAAZ,CAAsB/C,IAAtB,IACJA,IADI,GAEJA,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAKgD,SAA1B,GACI,EADJ,GAEIhD,IAAI,GAAG,EAJjB;;AAKA,SAAKiD,QAAL,CAAcxG,IAAd,EAAoBqG,GAApB;;AACA,WAAO,IAAP;AACH,GARD;;AASAxD,EAAAA,IAAI,CAACnE,SAAL,CAAesF,QAAf,GAA0B,YAAY;AAClC,QAAIyC,MAAM,GAAG,KAAKC,KAAL,CAAW7B,KAAX,KAAqBpF,IAArB,IAA6B,KAAKiH,KAAL,CAAW7B,KAAX,KAAqB0B,SAA/D;AACA,WAAOE,MAAM,GAAG,KAAKE,YAAL,KAAsB,KAAKnD,OAAL,KAAiB,CAA1C,GAA8C,KAAKkD,KAAL,CAAW7B,KAAtE;AACH,GAHD;;AAIAhC,EAAAA,IAAI,CAACnE,SAAL,CAAegG,SAAf,GAA2B,YAAY;AACnC,QAAI+B,MAAM,GAAG,KAAKC,KAAL,CAAWT,MAAX,KAAsBxG,IAAtB,IAA8B,KAAKiH,KAAL,CAAWT,MAAX,KAAsBM,SAAjE;AACA,WAAOE,MAAM,GACP,KAAKhD,QAAL,KAAkB,KAAKJ,OAAL,CAAatC,MAA/B,GAAwC,KAAK4C,UAAL,EAAxC,GACE,KAAKH,OAAL,KAAiB,CAFZ,GAGP,KAAKkD,KAAL,CAAWT,MAHjB;AAIH,GAND;;AAOApD,EAAAA,IAAI,CAACnE,SAAL,CAAeiI,YAAf,GAA8B,YAAY;AACtC,WAAO,KAAKC,SAAZ;AACH,GAFD;;AAGA/D,EAAAA,IAAI,CAACnE,SAAL,CAAemI,aAAf,GAA+B,YAAY;AACvC9H,IAAAA,MAAM,CAAC6C,IAAP,CAAYkF,IAAZ,CAAiB,2HAAjB;AACA,WAAO,KAAKC,UAAZ;AACH,GAHD;;AAIAlE,EAAAA,IAAI,CAACnE,SAAL,CAAeqH,WAAf,GAA6B,UAAUxC,IAAV,EAAgB;AACzC,QAAIyD,QAAQ,GAAGrF,eAAe,EAA9B;AAAA,QAAkC8B,QAAQ,GAAG,KAAKA,QAAL,EAA7C;AAAA,QAA8DwD,OAA9D;;AACAD,IAAAA,QAAQ,CAAC9B,IAAT;;AACA8B,IAAAA,QAAQ,CAACE,IAAT,GAAgB,KAAKzC,eAAL,EAAhB;AACAwC,IAAAA,OAAO,GAAGD,QAAQ,CAACG,WAAT,CAAqB5D,IAArB,CAAV;;AACAyD,IAAAA,QAAQ,CAACtB,OAAT;;AACA,WAAO;AACHb,MAAAA,KAAK,EAAEoC,OAAO,CAACpC,KADZ;AAEHoB,MAAAA,MAAM,EAAExC;AAFL,KAAP;AAIH,GAVD;;AAWAZ,EAAAA,IAAI,CAACnE,SAAL,CAAe+F,eAAf,GAAiC,YAAY;AACzC,QAAItF,QAAQ,CAACiI,KAAT,CAAeC,EAAf,CAAkBC,IAAtB,EAA4B;AACxB,aAAQ,KAAKC,SAAL,KACJhH,KADI,GAEJ,KAAKkD,QAAL,EAFI,GAGJnD,QAHI,GAIJ,KAAKW,UAAL,EAJJ;AAKH;;AACD,WAAQ,KAAKsG,SAAL,KACJhH,KADI,GAEJ,KAAKiH,WAAL,EAFI,GAGJjH,KAHI,IAIH,KAAKkD,QAAL,KAAkBnD,QAJf,IAKJU,mBAAmB,CAAC,KAAKC,UAAL,EAAD,CALvB;AAMH,GAdD;;AAeA4B,EAAAA,IAAI,CAACnE,SAAL,CAAe+I,YAAf,GAA8B,UAAUC,IAAV,EAAgB;AAC1C,QAAI,KAAK5D,KAAL,OAAiBnE,OAArB,EAA8B;AAC1B+H,MAAAA,IAAI,GAAGA,IAAI,CAACrG,IAAL,EAAP;AACH;;AACD,QAAIwD,KAAK,GAAG,KAAK8C,aAAL,CAAmBD,IAAnB,CAAZ;;AACA,WAAO,KAAKrE,OAAL,CAAauE,IAAb,CAAkB;AAAErE,MAAAA,IAAI,EAAEmE,IAAR;AAAc7C,MAAAA,KAAK,EAAEA;AAArB,KAAlB,CAAP;AACH,GAND;;AAOAhC,EAAAA,IAAI,CAACnE,SAAL,CAAeiJ,aAAf,GAA+B,UAAUpE,IAAV,EAAgB;AAC3C,QAAIU,aAAa,GAAG,KAAKA,aAAL,EAApB;AACA,QAAIlD,MAAM,GAAGwC,IAAI,CAACxC,MAAlB;AACA,WAAQY,eAAe,GAAGwF,WAAlB,CAA8B5D,IAA9B,EAAoCsB,KAApC,IACH9D,MAAM,GAAGkD,aAAa,IAAIlD,MAAM,GAAG,CAAb,CAAhB,GAAkC,CADrC,CAAR;AAEH,GALD;;AAMA8B,EAAAA,IAAI,CAACnE,SAAL,CAAeyE,YAAf,GAA8B,YAAY;AACtC,QAAI0E,KAAK,GAAG,KAAKtE,IAAL,GAAYrC,KAAZ,CAAkB,IAAlB,CAAZ;AAAA,QAAqCuC,QAAQ,GAAG,CAAC,KAAKA,QAAL,EAAjD;AAAA,QAAkEmD,SAAS,GAAG,CAA9E;AAAA,QAAiFlD,YAAY,GAAG,KAAKC,UAAL,KAAoBF,QAApH;AAAA,QAA8HoB,KAAK,GAAG,KAAK6B,KAAL,CAAW7B,KAAjJ;AAAA,QAAwJoB,MAAM,GAAG,KAAKS,KAAL,CAAWT,MAA5K;AAAA,QAAoL6B,UAAU,GAAGjD,KAAK,KAAKpF,IAAV,IAAkBoF,KAAK,KAAK0B,SAA7N;AAAA,QAAwOwB,WAAW,GAAG9B,MAAM,KAAKxG,IAAX,IAAmBwG,MAAM,KAAKM,SAApR;AAAA,QAA+R/C,OAAO,GAAG,KAAKA,OAAL,EAAzS;AAAA,QAAyTwE,QAAQ,GAAGnD,KAAK,GAAGrB,OAAO,GAAG,CAAtV;AAAA,QAAyVyE,WAAW,GAAGhC,MAAM,GAAGzC,OAAO,GAAG,CAA1X;AAAA,QAA6X0E,eAAe,GAAG,CAA/Y;AAAA,QAAkZC,IAAI,GAAG,KAAKA,IAAL,EAAzZ;AAAA,QAAsaC,UAAU,GAAGD,IAAI,KAAKxH,IAA5b;AAAA,QAAkc0H,UAAU,GAAGF,IAAI,KAAKzH,IAAT,IAAiB0H,UAAhe;AAAA,QAA4eE,iBAAiB,GAAG,KAAKC,QAAL,EAAhgB;AACA,SAAKlF,OAAL,GAAe,EAAf;AACA1B,IAAAA,eAAe,GAAGuF,IAAlB,GAAyB,KAAKzC,eAAL,EAAzB;AACA,QAAI+D,eAAe,GAAGF,iBAAiB,GAAG,KAAKX,aAAL,CAAmB/G,QAAnB,CAAH,GAAkC,CAAzE;;AACA,SAAK,IAAI6H,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGb,KAAK,CAAC9G,MAA5B,EAAoC0H,CAAC,GAAGC,GAAxC,EAA6C,EAAED,CAA/C,EAAkD;AAC9C,UAAIf,IAAI,GAAGG,KAAK,CAACY,CAAD,CAAhB;;AACA,UAAIxD,SAAS,GAAG,KAAK0C,aAAL,CAAmBD,IAAnB,CAAhB;;AACA,UAAII,UAAU,IAAI7C,SAAS,GAAG+C,QAA9B,EAAwC;AACpC,eAAON,IAAI,CAAC3G,MAAL,GAAc,CAArB,EAAwB;AACpB,cAAI4H,GAAG,GAAG,CAAV;AAAA,cAAaC,IAAI,GAAGlB,IAAI,CAAC3G,MAAzB;AAAA,cAAiC8H,KAAK,GAAG,EAAzC;AAAA,cAA6CC,UAAU,GAAG,CAA1D;;AACA,iBAAOH,GAAG,GAAGC,IAAb,EAAmB;AACf,gBAAIG,GAAG,GAAIJ,GAAG,GAAGC,IAAP,KAAiB,CAA3B;AAAA,gBAA8BI,MAAM,GAAGtB,IAAI,CAACuB,KAAL,CAAW,CAAX,EAAcF,GAAG,GAAG,CAApB,CAAvC;AAAA,gBAA+DG,WAAW,GAAG,KAAKvB,aAAL,CAAmBqB,MAAnB,IAA6BR,eAA1G;;AACA,gBAAIU,WAAW,IAAIlB,QAAnB,EAA6B;AACzBW,cAAAA,GAAG,GAAGI,GAAG,GAAG,CAAZ;AACAF,cAAAA,KAAK,GAAGG,MAAR;AACAF,cAAAA,UAAU,GAAGI,WAAb;AACH,aAJD,MAKK;AACDN,cAAAA,IAAI,GAAGG,GAAP;AACH;AACJ;;AACD,cAAIF,KAAJ,EAAW;AACP,gBAAIR,UAAJ,EAAgB;AACZ,kBAAIc,SAAJ;AACA,kBAAIC,QAAQ,GAAG1B,IAAI,CAACmB,KAAK,CAAC9H,MAAP,CAAnB;AACA,kBAAIsI,iBAAiB,GAAGD,QAAQ,KAAK7I,KAAb,IAAsB6I,QAAQ,KAAKtJ,IAA3D;;AACA,kBAAIuJ,iBAAiB,IAAIP,UAAU,IAAId,QAAvC,EAAiD;AAC7CmB,gBAAAA,SAAS,GAAGN,KAAK,CAAC9H,MAAlB;AACH,eAFD,MAGK;AACDoI,gBAAAA,SAAS,GACL9D,IAAI,CAACqD,GAAL,CAASG,KAAK,CAACS,WAAN,CAAkB/I,KAAlB,CAAT,EAAmCsI,KAAK,CAACS,WAAN,CAAkBxJ,IAAlB,CAAnC,IACI,CAFR;AAGH;;AACD,kBAAIqJ,SAAS,GAAG,CAAhB,EAAmB;AACfR,gBAAAA,GAAG,GAAGQ,SAAN;AACAN,gBAAAA,KAAK,GAAGA,KAAK,CAACI,KAAN,CAAY,CAAZ,EAAeN,GAAf,CAAR;AACAG,gBAAAA,UAAU,GAAG,KAAKnB,aAAL,CAAmBkB,KAAnB,CAAb;AACH;AACJ;;AACDA,YAAAA,KAAK,GAAGA,KAAK,CAACU,SAAN,EAAR;;AACA,iBAAK9B,YAAL,CAAkBoB,KAAlB;;AACAjC,YAAAA,SAAS,GAAGvB,IAAI,CAACqD,GAAL,CAAS9B,SAAT,EAAoBkC,UAApB,CAAZ;AACAZ,YAAAA,eAAe,IAAIxE,YAAnB;;AACA,gBAAI,CAAC0E,UAAD,IACCL,WAAW,IAAIG,eAAe,GAAGxE,YAAlB,GAAiCuE,WADrD,EACmE;AAC/D,kBAAInD,QAAQ,GAAG,KAAKzB,OAAL,CAAa,KAAKA,OAAL,CAAatC,MAAb,GAAsB,CAAnC,CAAf;;AACA,kBAAI+D,QAAJ,EAAc;AACV,oBAAIwD,iBAAJ,EAAuB;AACnB,sBAAIkB,SAAS,GAAG,KAAK7B,aAAL,CAAmB7C,QAAQ,CAACvB,IAAT,GAAgB3C,QAAnC,IAA+CoH,QAA/D;;AACA,sBAAI,CAACwB,SAAL,EAAgB;AACZ1E,oBAAAA,QAAQ,CAACvB,IAAT,GAAgBuB,QAAQ,CAACvB,IAAT,CAAc0F,KAAd,CAAoB,CAApB,EAAuBnE,QAAQ,CAACvB,IAAT,CAAcxC,MAAd,GAAuB,CAA9C,CAAhB;AACH;;AACD,uBAAKsC,OAAL,CAAaoG,MAAb,CAAoB,KAAKpG,OAAL,CAAatC,MAAb,GAAsB,CAA1C,EAA6C,CAA7C;;AACA,uBAAK0G,YAAL,CAAkB3C,QAAQ,CAACvB,IAAT,GAAgB3C,QAAlC;AACH;AACJ;;AACD;AACH;;AACD8G,YAAAA,IAAI,GAAGA,IAAI,CAACuB,KAAL,CAAWN,GAAX,CAAP;AACAjB,YAAAA,IAAI,GAAGA,IAAI,CAACgC,QAAL,EAAP;;AACA,gBAAIhC,IAAI,CAAC3G,MAAL,GAAc,CAAlB,EAAqB;AACjBkE,cAAAA,SAAS,GAAG,KAAK0C,aAAL,CAAmBD,IAAnB,CAAZ;;AACA,kBAAIzC,SAAS,IAAI+C,QAAjB,EAA2B;AACvB,qBAAKP,YAAL,CAAkBC,IAAlB;;AACAQ,gBAAAA,eAAe,IAAIxE,YAAnB;AACAkD,gBAAAA,SAAS,GAAGvB,IAAI,CAACqD,GAAL,CAAS9B,SAAT,EAAoB3B,SAApB,CAAZ;AACA;AACH;AACJ;AACJ,WAjDD,MAkDK;AACD;AACH;AACJ;AACJ,OApED,MAqEK;AACD,aAAKwC,YAAL,CAAkBC,IAAlB;;AACAQ,QAAAA,eAAe,IAAIxE,YAAnB;AACAkD,QAAAA,SAAS,GAAGvB,IAAI,CAACqD,GAAL,CAAS9B,SAAT,EAAoB3B,SAApB,CAAZ;AACH;;AACD,UAAI8C,WAAW,IAAIG,eAAe,GAAGxE,YAAlB,GAAiCuE,WAApD,EAAiE;AAC7D;AACH;AACJ;;AACD,SAAKlB,UAAL,GAAkBtD,QAAlB;AACA,SAAKmD,SAAL,GAAiBA,SAAjB;AACH,GAxFD;;AAyFA/D,EAAAA,IAAI,CAACnE,SAAL,CAAeiL,qBAAf,GAAuC,YAAY;AAC/C,WAAO,IAAP;AACH,GAFD;;AAGA,SAAO9G,IAAP;AACH,CA5QW,CA4QV3D,OAAO,CAAC0K,KA5QE,CAAZ;;AA6QA/K,OAAO,CAACgE,IAAR,GAAeA,IAAf;AACAA,IAAI,CAACnE,SAAL,CAAeqD,SAAf,GAA2BA,SAA3B;AACAc,IAAI,CAACnE,SAAL,CAAe2D,WAAf,GAA6BA,WAA7B;AACAQ,IAAI,CAACnE,SAAL,CAAemL,SAAf,GAA2B5J,UAA3B;AACA4C,IAAI,CAACnE,SAAL,CAAeoL,mBAAf,GAAqC,CACjC,MADiC,EAEjC,UAFiC,EAGjC,SAHiC,EAIjC,MAJiC,EAKjC,YALiC,CAArC;;AAOAzK,QAAQ,CAAC0K,aAAT,CAAuBlH,IAAvB;;AACA5D,SAAS,CAAC+K,OAAV,CAAkBC,eAAlB,CAAkCpH,IAAlC,EAAwC,OAAxC,EAAiDzD,YAAY,CAAC8K,wBAAb,EAAjD;AACAjL,SAAS,CAAC+K,OAAV,CAAkBC,eAAlB,CAAkCpH,IAAlC,EAAwC,QAAxC,EAAkDzD,YAAY,CAAC8K,wBAAb,EAAlD;AACAjL,SAAS,CAAC+K,OAAV,CAAkBG,eAAlB,CAAkCtH,IAAlC,EAAwC,YAAxC,EAAsD,OAAtD;AACA5D,SAAS,CAAC+K,OAAV,CAAkBG,eAAlB,CAAkCtH,IAAlC,EAAwC,UAAxC,EAAoD,EAApD,EAAwDzD,YAAY,CAACgL,kBAAb,EAAxD;AACAnL,SAAS,CAAC+K,OAAV,CAAkBG,eAAlB,CAAkCtH,IAAlC,EAAwC,WAAxC,EAAqDxC,MAArD;AACApB,SAAS,CAAC+K,OAAV,CAAkBG,eAAlB,CAAkCtH,IAAlC,EAAwC,aAAxC,EAAuDxC,MAAvD;AACApB,SAAS,CAAC+K,OAAV,CAAkBG,eAAlB,CAAkCtH,IAAlC,EAAwC,SAAxC,EAAmD,CAAnD,EAAsDzD,YAAY,CAACgL,kBAAb,EAAtD;AACAnL,SAAS,CAAC+K,OAAV,CAAkBG,eAAlB,CAAkCtH,IAAlC,EAAwC,OAAxC,EAAiD9C,IAAjD;AACAd,SAAS,CAAC+K,OAAV,CAAkBG,eAAlB,CAAkCtH,IAAlC,EAAwC,eAAxC,EAAyD3C,GAAzD;AACAjB,SAAS,CAAC+K,OAAV,CAAkBG,eAAlB,CAAkCtH,IAAlC,EAAwC,YAAxC,EAAsD,CAAtD,EAAyDzD,YAAY,CAACgL,kBAAb,EAAzD;AACAnL,SAAS,CAAC+K,OAAV,CAAkBG,eAAlB,CAAkCtH,IAAlC,EAAwC,MAAxC,EAAgDpC,IAAhD;AACAxB,SAAS,CAAC+K,OAAV,CAAkBG,eAAlB,CAAkCtH,IAAlC,EAAwC,UAAxC,EAAoD,KAApD,EAA2DzD,YAAY,CAACiL,mBAAb,EAA3D;AACApL,SAAS,CAAC+K,OAAV,CAAkBG,eAAlB,CAAkCtH,IAAlC,EAAwC,eAAxC,EAAyD,CAAzD,EAA4DzD,YAAY,CAACgL,kBAAb,EAA5D;AACAnL,SAAS,CAAC+K,OAAV,CAAkBG,eAAlB,CAAkCtH,IAAlC,EAAwC,MAAxC,EAAgD,EAAhD,EAAoDzD,YAAY,CAACkL,kBAAb,EAApD;AACArL,SAAS,CAAC+K,OAAV,CAAkBG,eAAlB,CAAkCtH,IAAlC,EAAwC,gBAAxC,EAA0D,EAA1D;AACA9D,MAAM,CAACwL,UAAP,CAAkBC,UAAlB,CAA6B3H,IAA7B","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Util_1 = require(\"../Util\");\nvar Factory_1 = require(\"../Factory\");\nvar Shape_1 = require(\"../Shape\");\nvar Global_1 = require(\"../Global\");\nvar Validators_1 = require(\"../Validators\");\nvar Global_2 = require(\"../Global\");\nfunction stringToArray(string) {\n    return Array.from(string);\n}\nexports.stringToArray = stringToArray;\nvar AUTO = 'auto', CENTER = 'center', JUSTIFY = 'justify', CHANGE_KONVA = 'Change.konva', CONTEXT_2D = '2d', DASH = '-', LEFT = 'left', TEXT = 'text', TEXT_UPPER = 'Text', TOP = 'top', BOTTOM = 'bottom', MIDDLE = 'middle', NORMAL = 'normal', PX_SPACE = 'px ', SPACE = ' ', RIGHT = 'right', WORD = 'word', CHAR = 'char', NONE = 'none', ELLIPSIS = 'â€¦', ATTR_CHANGE_LIST = [\n    'fontFamily',\n    'fontSize',\n    'fontStyle',\n    'fontVariant',\n    'padding',\n    'align',\n    'verticalAlign',\n    'lineHeight',\n    'text',\n    'width',\n    'height',\n    'wrap',\n    'ellipsis',\n    'letterSpacing',\n], attrChangeListLen = ATTR_CHANGE_LIST.length;\nfunction normalizeFontFamily(fontFamily) {\n    return fontFamily\n        .split(',')\n        .map(function (family) {\n        family = family.trim();\n        var hasSpace = family.indexOf(' ') >= 0;\n        var hasQuotes = family.indexOf('\"') >= 0 || family.indexOf(\"'\") >= 0;\n        if (hasSpace && !hasQuotes) {\n            family = \"\\\"\" + family + \"\\\"\";\n        }\n        return family;\n    })\n        .join(', ');\n}\nvar dummyContext;\nfunction getDummyContext() {\n    if (dummyContext) {\n        return dummyContext;\n    }\n    dummyContext = Util_1.Util.createCanvasElement().getContext(CONTEXT_2D);\n    return dummyContext;\n}\nfunction _fillFunc(context) {\n    context.fillText(this._partialText, this._partialTextX, this._partialTextY);\n}\nfunction _strokeFunc(context) {\n    context.strokeText(this._partialText, this._partialTextX, this._partialTextY);\n}\nfunction checkDefaultFill(config) {\n    config = config || {};\n    if (!config.fillLinearGradientColorStops &&\n        !config.fillRadialGradientColorStops &&\n        !config.fillPatternImage) {\n        config.fill = config.fill || 'black';\n    }\n    return config;\n}\nvar Text = (function (_super) {\n    __extends(Text, _super);\n    function Text(config) {\n        var _this = _super.call(this, checkDefaultFill(config)) || this;\n        _this._partialTextX = 0;\n        _this._partialTextY = 0;\n        for (var n = 0; n < attrChangeListLen; n++) {\n            _this.on(ATTR_CHANGE_LIST[n] + CHANGE_KONVA, _this._setTextData);\n        }\n        _this._setTextData();\n        return _this;\n    }\n    Text.prototype._sceneFunc = function (context) {\n        var textArr = this.textArr, textArrLen = textArr.length;\n        if (!this.text()) {\n            return;\n        }\n        var padding = this.padding(), fontSize = this.fontSize(), lineHeightPx = this.lineHeight() * fontSize, verticalAlign = this.verticalAlign(), alignY = 0, align = this.align(), totalWidth = this.getWidth(), letterSpacing = this.letterSpacing(), fill = this.fill(), textDecoration = this.textDecoration(), shouldUnderline = textDecoration.indexOf('underline') !== -1, shouldLineThrough = textDecoration.indexOf('line-through') !== -1, n;\n        var translateY = 0;\n        var translateY = lineHeightPx / 2;\n        var lineTranslateX = 0;\n        var lineTranslateY = 0;\n        context.setAttr('font', this._getContextFont());\n        context.setAttr('textBaseline', MIDDLE);\n        context.setAttr('textAlign', LEFT);\n        if (verticalAlign === MIDDLE) {\n            alignY = (this.getHeight() - textArrLen * lineHeightPx - padding * 2) / 2;\n        }\n        else if (verticalAlign === BOTTOM) {\n            alignY = this.getHeight() - textArrLen * lineHeightPx - padding * 2;\n        }\n        context.translate(padding, alignY + padding);\n        for (n = 0; n < textArrLen; n++) {\n            var lineTranslateX = 0;\n            var lineTranslateY = 0;\n            var obj = textArr[n], text = obj.text, width = obj.width, lastLine = n !== textArrLen - 1, spacesNumber, oneWord, lineWidth;\n            context.save();\n            if (align === RIGHT) {\n                lineTranslateX += totalWidth - width - padding * 2;\n            }\n            else if (align === CENTER) {\n                lineTranslateX += (totalWidth - width - padding * 2) / 2;\n            }\n            if (shouldUnderline) {\n                context.save();\n                context.beginPath();\n                context.moveTo(lineTranslateX, translateY + lineTranslateY + Math.round(fontSize / 2));\n                spacesNumber = text.split(' ').length - 1;\n                oneWord = spacesNumber === 0;\n                lineWidth =\n                    align === JUSTIFY && lastLine && !oneWord\n                        ? totalWidth - padding * 2\n                        : width;\n                context.lineTo(lineTranslateX + Math.round(lineWidth), translateY + lineTranslateY + Math.round(fontSize / 2));\n                context.lineWidth = fontSize / 15;\n                context.strokeStyle = fill;\n                context.stroke();\n                context.restore();\n            }\n            if (shouldLineThrough) {\n                context.save();\n                context.beginPath();\n                context.moveTo(lineTranslateX, translateY + lineTranslateY);\n                spacesNumber = text.split(' ').length - 1;\n                oneWord = spacesNumber === 0;\n                lineWidth =\n                    align === JUSTIFY && lastLine && !oneWord\n                        ? totalWidth - padding * 2\n                        : width;\n                context.lineTo(lineTranslateX + Math.round(lineWidth), translateY + lineTranslateY);\n                context.lineWidth = fontSize / 15;\n                context.strokeStyle = fill;\n                context.stroke();\n                context.restore();\n            }\n            if (letterSpacing !== 0 || align === JUSTIFY) {\n                spacesNumber = text.split(' ').length - 1;\n                var array = stringToArray(text);\n                for (var li = 0; li < array.length; li++) {\n                    var letter = array[li];\n                    if (letter === ' ' && n !== textArrLen - 1 && align === JUSTIFY) {\n                        lineTranslateX += (totalWidth - padding * 2 - width) / spacesNumber;\n                    }\n                    this._partialTextX = lineTranslateX;\n                    this._partialTextY = translateY + lineTranslateY;\n                    this._partialText = letter;\n                    context.fillStrokeShape(this);\n                    lineTranslateX += this.measureSize(letter).width + letterSpacing;\n                }\n            }\n            else {\n                this._partialTextX = lineTranslateX;\n                this._partialTextY = translateY + lineTranslateY;\n                this._partialText = text;\n                context.fillStrokeShape(this);\n            }\n            context.restore();\n            if (textArrLen > 1) {\n                translateY += lineHeightPx;\n            }\n        }\n    };\n    Text.prototype._hitFunc = function (context) {\n        var width = this.getWidth(), height = this.getHeight();\n        context.beginPath();\n        context.rect(0, 0, width, height);\n        context.closePath();\n        context.fillStrokeShape(this);\n    };\n    Text.prototype.setText = function (text) {\n        var str = Util_1.Util._isString(text)\n            ? text\n            : text === null || text === undefined\n                ? ''\n                : text + '';\n        this._setAttr(TEXT, str);\n        return this;\n    };\n    Text.prototype.getWidth = function () {\n        var isAuto = this.attrs.width === AUTO || this.attrs.width === undefined;\n        return isAuto ? this.getTextWidth() + this.padding() * 2 : this.attrs.width;\n    };\n    Text.prototype.getHeight = function () {\n        var isAuto = this.attrs.height === AUTO || this.attrs.height === undefined;\n        return isAuto\n            ? this.fontSize() * this.textArr.length * this.lineHeight() +\n                this.padding() * 2\n            : this.attrs.height;\n    };\n    Text.prototype.getTextWidth = function () {\n        return this.textWidth;\n    };\n    Text.prototype.getTextHeight = function () {\n        Util_1.Util.warn('text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height.');\n        return this.textHeight;\n    };\n    Text.prototype.measureSize = function (text) {\n        var _context = getDummyContext(), fontSize = this.fontSize(), metrics;\n        _context.save();\n        _context.font = this._getContextFont();\n        metrics = _context.measureText(text);\n        _context.restore();\n        return {\n            width: metrics.width,\n            height: fontSize,\n        };\n    };\n    Text.prototype._getContextFont = function () {\n        if (Global_1.Konva.UA.isIE) {\n            return (this.fontStyle() +\n                SPACE +\n                this.fontSize() +\n                PX_SPACE +\n                this.fontFamily());\n        }\n        return (this.fontStyle() +\n            SPACE +\n            this.fontVariant() +\n            SPACE +\n            (this.fontSize() + PX_SPACE) +\n            normalizeFontFamily(this.fontFamily()));\n    };\n    Text.prototype._addTextLine = function (line) {\n        if (this.align() === JUSTIFY) {\n            line = line.trim();\n        }\n        var width = this._getTextWidth(line);\n        return this.textArr.push({ text: line, width: width });\n    };\n    Text.prototype._getTextWidth = function (text) {\n        var letterSpacing = this.letterSpacing();\n        var length = text.length;\n        return (getDummyContext().measureText(text).width +\n            (length ? letterSpacing * (length - 1) : 0));\n    };\n    Text.prototype._setTextData = function () {\n        var lines = this.text().split('\\n'), fontSize = +this.fontSize(), textWidth = 0, lineHeightPx = this.lineHeight() * fontSize, width = this.attrs.width, height = this.attrs.height, fixedWidth = width !== AUTO && width !== undefined, fixedHeight = height !== AUTO && height !== undefined, padding = this.padding(), maxWidth = width - padding * 2, maxHeightPx = height - padding * 2, currentHeightPx = 0, wrap = this.wrap(), shouldWrap = wrap !== NONE, wrapAtWord = wrap !== CHAR && shouldWrap, shouldAddEllipsis = this.ellipsis();\n        this.textArr = [];\n        getDummyContext().font = this._getContextFont();\n        var additionalWidth = shouldAddEllipsis ? this._getTextWidth(ELLIPSIS) : 0;\n        for (var i = 0, max = lines.length; i < max; ++i) {\n            var line = lines[i];\n            var lineWidth = this._getTextWidth(line);\n            if (fixedWidth && lineWidth > maxWidth) {\n                while (line.length > 0) {\n                    var low = 0, high = line.length, match = '', matchWidth = 0;\n                    while (low < high) {\n                        var mid = (low + high) >>> 1, substr = line.slice(0, mid + 1), substrWidth = this._getTextWidth(substr) + additionalWidth;\n                        if (substrWidth <= maxWidth) {\n                            low = mid + 1;\n                            match = substr;\n                            matchWidth = substrWidth;\n                        }\n                        else {\n                            high = mid;\n                        }\n                    }\n                    if (match) {\n                        if (wrapAtWord) {\n                            var wrapIndex;\n                            var nextChar = line[match.length];\n                            var nextIsSpaceOrDash = nextChar === SPACE || nextChar === DASH;\n                            if (nextIsSpaceOrDash && matchWidth <= maxWidth) {\n                                wrapIndex = match.length;\n                            }\n                            else {\n                                wrapIndex =\n                                    Math.max(match.lastIndexOf(SPACE), match.lastIndexOf(DASH)) +\n                                        1;\n                            }\n                            if (wrapIndex > 0) {\n                                low = wrapIndex;\n                                match = match.slice(0, low);\n                                matchWidth = this._getTextWidth(match);\n                            }\n                        }\n                        match = match.trimRight();\n                        this._addTextLine(match);\n                        textWidth = Math.max(textWidth, matchWidth);\n                        currentHeightPx += lineHeightPx;\n                        if (!shouldWrap ||\n                            (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx)) {\n                            var lastLine = this.textArr[this.textArr.length - 1];\n                            if (lastLine) {\n                                if (shouldAddEllipsis) {\n                                    var haveSpace = this._getTextWidth(lastLine.text + ELLIPSIS) < maxWidth;\n                                    if (!haveSpace) {\n                                        lastLine.text = lastLine.text.slice(0, lastLine.text.length - 3);\n                                    }\n                                    this.textArr.splice(this.textArr.length - 1, 1);\n                                    this._addTextLine(lastLine.text + ELLIPSIS);\n                                }\n                            }\n                            break;\n                        }\n                        line = line.slice(low);\n                        line = line.trimLeft();\n                        if (line.length > 0) {\n                            lineWidth = this._getTextWidth(line);\n                            if (lineWidth <= maxWidth) {\n                                this._addTextLine(line);\n                                currentHeightPx += lineHeightPx;\n                                textWidth = Math.max(textWidth, lineWidth);\n                                break;\n                            }\n                        }\n                    }\n                    else {\n                        break;\n                    }\n                }\n            }\n            else {\n                this._addTextLine(line);\n                currentHeightPx += lineHeightPx;\n                textWidth = Math.max(textWidth, lineWidth);\n            }\n            if (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx) {\n                break;\n            }\n        }\n        this.textHeight = fontSize;\n        this.textWidth = textWidth;\n    };\n    Text.prototype.getStrokeScaleEnabled = function () {\n        return true;\n    };\n    return Text;\n}(Shape_1.Shape));\nexports.Text = Text;\nText.prototype._fillFunc = _fillFunc;\nText.prototype._strokeFunc = _strokeFunc;\nText.prototype.className = TEXT_UPPER;\nText.prototype._attrsAffectingSize = [\n    'text',\n    'fontSize',\n    'padding',\n    'wrap',\n    'lineHeight',\n];\nGlobal_2._registerNode(Text);\nFactory_1.Factory.overWriteSetter(Text, 'width', Validators_1.getNumberOrAutoValidator());\nFactory_1.Factory.overWriteSetter(Text, 'height', Validators_1.getNumberOrAutoValidator());\nFactory_1.Factory.addGetterSetter(Text, 'fontFamily', 'Arial');\nFactory_1.Factory.addGetterSetter(Text, 'fontSize', 12, Validators_1.getNumberValidator());\nFactory_1.Factory.addGetterSetter(Text, 'fontStyle', NORMAL);\nFactory_1.Factory.addGetterSetter(Text, 'fontVariant', NORMAL);\nFactory_1.Factory.addGetterSetter(Text, 'padding', 0, Validators_1.getNumberValidator());\nFactory_1.Factory.addGetterSetter(Text, 'align', LEFT);\nFactory_1.Factory.addGetterSetter(Text, 'verticalAlign', TOP);\nFactory_1.Factory.addGetterSetter(Text, 'lineHeight', 1, Validators_1.getNumberValidator());\nFactory_1.Factory.addGetterSetter(Text, 'wrap', WORD);\nFactory_1.Factory.addGetterSetter(Text, 'ellipsis', false, Validators_1.getBooleanValidator());\nFactory_1.Factory.addGetterSetter(Text, 'letterSpacing', 0, Validators_1.getNumberValidator());\nFactory_1.Factory.addGetterSetter(Text, 'text', '', Validators_1.getStringValidator());\nFactory_1.Factory.addGetterSetter(Text, 'textDecoration', '');\nUtil_1.Collection.mapMethods(Text);\n"]},"metadata":{},"sourceType":"script"}