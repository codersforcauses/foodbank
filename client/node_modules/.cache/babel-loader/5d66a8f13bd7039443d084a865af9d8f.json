{"ast":null,"code":"// ES6 Map\nvar map;\n\ntry {\n  map = Map;\n} catch (_) {}\n\nvar set; // ES6 Set\n\ntry {\n  set = Set;\n} catch (_) {}\n\nfunction baseClone(src, circulars, clones) {\n  // Null/undefined/functions/etc\n  if (!src || typeof src !== 'object' || typeof src === 'function') {\n    return src;\n  } // DOM Node\n\n\n  if (src.nodeType && 'cloneNode' in src) {\n    return src.cloneNode(true);\n  } // Date\n\n\n  if (src instanceof Date) {\n    return new Date(src.getTime());\n  } // RegExp\n\n\n  if (src instanceof RegExp) {\n    return new RegExp(src);\n  } // Arrays\n\n\n  if (Array.isArray(src)) {\n    return src.map(clone);\n  } // ES6 Maps\n\n\n  if (map && src instanceof map) {\n    return new Map(Array.from(src.entries()));\n  } // ES6 Sets\n\n\n  if (set && src instanceof set) {\n    return new Set(Array.from(src.values()));\n  } // Object\n\n\n  if (src instanceof Object) {\n    circulars.push(src);\n    var obj = Object.create(src);\n    clones.push(obj);\n\n    for (var key in src) {\n      var idx = circulars.findIndex(function (i) {\n        return i === src[key];\n      });\n      obj[key] = idx > -1 ? clones[idx] : baseClone(src[key], circulars, clones);\n    }\n\n    return obj;\n  } // ???\n\n\n  return src;\n}\n\nexport default function clone(src) {\n  return baseClone(src, [], []);\n}","map":{"version":3,"sources":["/home/jun/foodbank/node_modules/nanoclone/src/index.js"],"names":["map","Map","_","set","Set","baseClone","src","circulars","clones","nodeType","cloneNode","Date","getTime","RegExp","Array","isArray","clone","from","entries","values","Object","push","obj","create","key","idx","findIndex","i"],"mappings":"AAAA;AACA,IAAIA,GAAJ;;AACA,IAAI;AACFA,EAAAA,GAAG,GAAGC,GAAN;AACD,CAFD,CAEE,OAAOC,CAAP,EAAU,CAAG;;AACf,IAAIC,GAAJ,C,CAEA;;AACA,IAAI;AACFA,EAAAA,GAAG,GAAGC,GAAN;AACD,CAFD,CAEE,OAAOF,CAAP,EAAU,CAAG;;AAEf,SAASG,SAAT,CAAoBC,GAApB,EAAyBC,SAAzB,EAAoCC,MAApC,EAA4C;AAC1C;AACA,MAAI,CAACF,GAAD,IAAQ,OAAOA,GAAP,KAAe,QAAvB,IAAmC,OAAOA,GAAP,KAAe,UAAtD,EAAkE;AAChE,WAAOA,GAAP;AACD,GAJyC,CAM1C;;;AACA,MAAIA,GAAG,CAACG,QAAJ,IAAgB,eAAeH,GAAnC,EAAwC;AACtC,WAAOA,GAAG,CAACI,SAAJ,CAAc,IAAd,CAAP;AACD,GATyC,CAW1C;;;AACA,MAAIJ,GAAG,YAAYK,IAAnB,EAAyB;AACvB,WAAO,IAAIA,IAAJ,CAASL,GAAG,CAACM,OAAJ,EAAT,CAAP;AACD,GAdyC,CAgB1C;;;AACA,MAAIN,GAAG,YAAYO,MAAnB,EAA2B;AACzB,WAAO,IAAIA,MAAJ,CAAWP,GAAX,CAAP;AACD,GAnByC,CAqB1C;;;AACA,MAAIQ,KAAK,CAACC,OAAN,CAAcT,GAAd,CAAJ,EAAwB;AACtB,WAAOA,GAAG,CAACN,GAAJ,CAAQgB,KAAR,CAAP;AACD,GAxByC,CA0B1C;;;AACA,MAAIhB,GAAG,IAAIM,GAAG,YAAYN,GAA1B,EAA+B;AAC7B,WAAO,IAAIC,GAAJ,CAAQa,KAAK,CAACG,IAAN,CAAWX,GAAG,CAACY,OAAJ,EAAX,CAAR,CAAP;AACD,GA7ByC,CA+B1C;;;AACA,MAAIf,GAAG,IAAIG,GAAG,YAAYH,GAA1B,EAA+B;AAC7B,WAAO,IAAIC,GAAJ,CAAQU,KAAK,CAACG,IAAN,CAAWX,GAAG,CAACa,MAAJ,EAAX,CAAR,CAAP;AACD,GAlCyC,CAoC1C;;;AACA,MAAIb,GAAG,YAAYc,MAAnB,EAA2B;AACzBb,IAAAA,SAAS,CAACc,IAAV,CAAef,GAAf;AACA,QAAIgB,GAAG,GAAGF,MAAM,CAACG,MAAP,CAAcjB,GAAd,CAAV;AACAE,IAAAA,MAAM,CAACa,IAAP,CAAYC,GAAZ;;AACA,SAAK,IAAIE,GAAT,IAAgBlB,GAAhB,EAAqB;AACnB,UAAImB,GAAG,GAAGlB,SAAS,CAACmB,SAAV,CAAoB,UAAUC,CAAV,EAAa;AACzC,eAAOA,CAAC,KAAKrB,GAAG,CAACkB,GAAD,CAAhB;AACD,OAFS,CAAV;AAGAF,MAAAA,GAAG,CAACE,GAAD,CAAH,GAAWC,GAAG,GAAG,CAAC,CAAP,GAAWjB,MAAM,CAACiB,GAAD,CAAjB,GAAyBpB,SAAS,CAACC,GAAG,CAACkB,GAAD,CAAJ,EAAWjB,SAAX,EAAsBC,MAAtB,CAA7C;AACD;;AACD,WAAOc,GAAP;AACD,GAhDyC,CAkD1C;;;AACA,SAAOhB,GAAP;AACD;;AAED,eAAe,SAASU,KAAT,CAAgBV,GAAhB,EAAqB;AAClC,SAAOD,SAAS,CAACC,GAAD,EAAM,EAAN,EAAU,EAAV,CAAhB;AACD","sourcesContent":["// ES6 Map\nvar map\ntry {\n  map = Map\n} catch (_) { }\nvar set\n\n// ES6 Set\ntry {\n  set = Set\n} catch (_) { }\n\nfunction baseClone (src, circulars, clones) {\n  // Null/undefined/functions/etc\n  if (!src || typeof src !== 'object' || typeof src === 'function') {\n    return src\n  }\n\n  // DOM Node\n  if (src.nodeType && 'cloneNode' in src) {\n    return src.cloneNode(true)\n  }\n\n  // Date\n  if (src instanceof Date) {\n    return new Date(src.getTime())\n  }\n\n  // RegExp\n  if (src instanceof RegExp) {\n    return new RegExp(src)\n  }\n\n  // Arrays\n  if (Array.isArray(src)) {\n    return src.map(clone)\n  }\n\n  // ES6 Maps\n  if (map && src instanceof map) {\n    return new Map(Array.from(src.entries()))\n  }\n\n  // ES6 Sets\n  if (set && src instanceof set) {\n    return new Set(Array.from(src.values()))\n  }\n\n  // Object\n  if (src instanceof Object) {\n    circulars.push(src)\n    var obj = Object.create(src)\n    clones.push(obj)\n    for (var key in src) {\n      var idx = circulars.findIndex(function (i) {\n        return i === src[key]\n      })\n      obj[key] = idx > -1 ? clones[idx] : baseClone(src[key], circulars, clones)\n    }\n    return obj\n  }\n\n  // ???\n  return src\n}\n\nexport default function clone (src) {\n  return baseClone(src, [], [])\n}\n"]},"metadata":{},"sourceType":"module"}