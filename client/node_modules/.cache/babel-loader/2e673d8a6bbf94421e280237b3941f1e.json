{"ast":null,"code":"import { inverse } from './inverse';\nimport { transform } from './transform';\nimport { smoothMatrix } from './smoothMatrix';\n/**\n * Returns a matrix that transforms a triangle t1 into another triangle t2, or throws an exception if it is impossible.\n * @param t1 {Point[]} Array of points containing the three points for the first triangle\n * @param t2 {Point[]} Array of points containing the three points for the second triangle\n * @returns {Matrix} Matrix which transforms t1 to t2\n * @throws Exception if the matrix becomes not invertible\n */\n\nexport function fromTriangles(t1, t2) {\n  // point p = first point of the triangle\n  const px1 = t1[0].x != null ? t1[0].x : t1[0][0];\n  const py1 = t1[0].y != null ? t1[0].y : t1[0][1];\n  const px2 = t2[0].x != null ? t2[0].x : t2[0][0];\n  const py2 = t2[0].y != null ? t2[0].y : t2[0][1]; // point q = second point of the triangle\n\n  const qx1 = t1[1].x != null ? t1[1].x : t1[1][0];\n  const qy1 = t1[1].y != null ? t1[1].y : t1[1][1];\n  const qx2 = t2[1].x != null ? t2[1].x : t2[1][0];\n  const qy2 = t2[1].y != null ? t2[1].y : t2[1][1]; // point r = third point of the triangle\n\n  const rx1 = t1[2].x != null ? t1[2].x : t1[2][0];\n  const ry1 = t1[2].y != null ? t1[2].y : t1[2][1];\n  const rx2 = t2[2].x != null ? t2[2].x : t2[2][0];\n  const ry2 = t2[2].y != null ? t2[2].y : t2[2][1];\n  const r1 = {\n    a: px1 - rx1,\n    b: py1 - ry1,\n    c: qx1 - rx1,\n    d: qy1 - ry1,\n    e: rx1,\n    f: ry1\n  };\n  const r2 = {\n    a: px2 - rx2,\n    b: py2 - ry2,\n    c: qx2 - rx2,\n    d: qy2 - ry2,\n    e: rx2,\n    f: ry2\n  };\n  const inverseR1 = inverse(r1);\n  const affineMatrix = transform([r2, inverseR1]); // round the matrix elements to smooth the finite inversion\n\n  return smoothMatrix(affineMatrix);\n}","map":{"version":3,"sources":["/home/jun/foodbank/node_modules/transformation-matrix/src/fromTriangles.js"],"names":["inverse","transform","smoothMatrix","fromTriangles","t1","t2","px1","x","py1","y","px2","py2","qx1","qy1","qx2","qy2","rx1","ry1","rx2","ry2","r1","a","b","c","d","e","f","r2","inverseR1","affineMatrix"],"mappings":"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","sourcesContent":["import { inverse } from './inverse'\nimport { transform } from './transform'\nimport { smoothMatrix } from './smoothMatrix'\n\n/**\n * Returns a matrix that transforms a triangle t1 into another triangle t2, or throws an exception if it is impossible.\n * @param t1 {Point[]} Array of points containing the three points for the first triangle\n * @param t2 {Point[]} Array of points containing the three points for the second triangle\n * @returns {Matrix} Matrix which transforms t1 to t2\n * @throws Exception if the matrix becomes not invertible\n */\nexport function fromTriangles (t1, t2) {\n  // point p = first point of the triangle\n  const px1 = t1[0].x != null ? t1[0].x : t1[0][0]\n  const py1 = t1[0].y != null ? t1[0].y : t1[0][1]\n  const px2 = t2[0].x != null ? t2[0].x : t2[0][0]\n  const py2 = t2[0].y != null ? t2[0].y : t2[0][1]\n\n  // point q = second point of the triangle\n  const qx1 = t1[1].x != null ? t1[1].x : t1[1][0]\n  const qy1 = t1[1].y != null ? t1[1].y : t1[1][1]\n  const qx2 = t2[1].x != null ? t2[1].x : t2[1][0]\n  const qy2 = t2[1].y != null ? t2[1].y : t2[1][1]\n\n  // point r = third point of the triangle\n  const rx1 = t1[2].x != null ? t1[2].x : t1[2][0]\n  const ry1 = t1[2].y != null ? t1[2].y : t1[2][1]\n  const rx2 = t2[2].x != null ? t2[2].x : t2[2][0]\n  const ry2 = t2[2].y != null ? t2[2].y : t2[2][1]\n\n  const r1 = {\n    a: px1 - rx1,\n    b: py1 - ry1,\n    c: qx1 - rx1,\n    d: qy1 - ry1,\n    e: rx1,\n    f: ry1\n  }\n  const r2 = {\n    a: px2 - rx2,\n    b: py2 - ry2,\n    c: qx2 - rx2,\n    d: qy2 - ry2,\n    e: rx2,\n    f: ry2\n  }\n\n  const inverseR1 = inverse(r1)\n  const affineMatrix = transform([r2, inverseR1])\n\n  // round the matrix elements to smooth the finite inversion\n  return smoothMatrix(affineMatrix)\n}\n"]},"metadata":{},"sourceType":"module"}