{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/jun/foodbank/client/src/Components/Input/TextField/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useField } from 'formik';\nimport { FieldControl, FieldInput, FieldLabel, FieldMessage } from '../Utils';\nexport const Input = ({\n  type = 'text',\n  disabled = false,\n  required = false,\n  label,\n  description,\n  ...props\n}) => {\n  _s();\n\n  const [{\n    name,\n    ...field\n  }, {\n    error,\n    touched\n  }] = useField(props.name);\n  return /*#__PURE__*/_jsxDEV(FieldControl, {\n    name: name,\n    error: error,\n    touched: touched,\n    required: required,\n    disabled: disabled,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col space-y-1\",\n      children: [/*#__PURE__*/_jsxDEV(FieldLabel, {\n        children: label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FieldInput, {\n        type: type,\n        ...props,\n        ...field\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), touched && error ? /*#__PURE__*/_jsxDEV(FieldMessage, {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this) : description && /*#__PURE__*/_jsxDEV(FieldMessage, {\n        description: true,\n        children: description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 26\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Input, \"jQOkJP8hS7cD9M3EZElva2bbWiM=\", false, function () {\n  return [useField];\n});\n\n_c = Input;\nexport default Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["/home/jun/foodbank/client/src/Components/Input/TextField/index.tsx"],"names":["React","useField","FieldControl","FieldInput","FieldLabel","FieldMessage","Input","type","disabled","required","label","description","props","name","field","error","touched"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,QAAzB;AACA,SAASC,YAAT,EAAuBC,UAAvB,EAAmCC,UAAnC,EAA+CC,YAA/C,QAAmE,UAAnE;AAiCA,OAAO,MAAMC,KAA2B,GAAG,CAAC;AAC1CC,EAAAA,IAAI,GAAG,MADmC;AAE1CC,EAAAA,QAAQ,GAAG,KAF+B;AAG1CC,EAAAA,QAAQ,GAAG,KAH+B;AAI1CC,EAAAA,KAJ0C;AAK1CC,EAAAA,WAL0C;AAM1C,KAAGC;AANuC,CAAD,KAOrC;AAAA;;AACJ,QAAM,CAAC;AAAEC,IAAAA,IAAF;AAAQ,OAAGC;AAAX,GAAD,EAAqB;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAArB,IAA2Cf,QAAQ,CAACW,KAAK,CAACC,IAAP,CAAzD;AACA,sBACE,QAAC,YAAD;AACE,IAAA,IAAI,EAAEA,IADR;AAEE,IAAA,KAAK,EAAEE,KAFT;AAGE,IAAA,OAAO,EAAEC,OAHX;AAIE,IAAA,QAAQ,EAAEP,QAJZ;AAKE,IAAA,QAAQ,EAAED,QALZ;AAAA,2BAOE;AAAK,MAAA,SAAS,EAAC,yBAAf;AAAA,8BACE,QAAC,UAAD;AAAA,kBAAaE;AAAb;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,UAAD;AAAY,QAAA,IAAI,EAAEH,IAAlB;AAAA,WAA4BK,KAA5B;AAAA,WAAuCE;AAAvC;AAAA;AAAA;AAAA;AAAA,cAFF,EAGGE,OAAO,IAAID,KAAX,gBACC,QAAC,YAAD;AAAA,kBAAeA;AAAf;AAAA;AAAA;AAAA;AAAA,cADD,GAGCJ,WAAW,iBAAI,QAAC,YAAD;AAAc,QAAA,WAAW,MAAzB;AAAA,kBAA2BA;AAA3B;AAAA;AAAA;AAAA;AAAA,cANnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAPF;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CA5BM;;GAAML,K;UAQsCL,Q;;;KARtCK,K;AA8Bb,eAAeA,KAAf","sourcesContent":["import React from 'react'\nimport { useField } from 'formik'\nimport { FieldControl, FieldInput, FieldLabel, FieldMessage } from '../Utils'\n\nexport interface InputProps {\n  /**\n   * If field is required for form\n   */\n  required?: boolean\n  /**\n   * If input is disabled\n   */\n  disabled?: boolean\n  /**\n   * Add description or helper text to input\n   */\n  description?: string\n  /**\n   * Placeholder text for input\n   */\n  placeholder?: string\n  /**\n   * Label for input\n   */\n  label: string\n  /**\n   * Name of input (required for Formik to work)\n   */\n  name: string\n  /**\n   * Type of text\n   */\n  type?: 'text' | 'email' | 'number' | 'tel' | 'password'\n}\n\nexport const Input: React.FC<InputProps> = ({\n  type = 'text',\n  disabled = false,\n  required = false,\n  label,\n  description,\n  ...props\n}) => {\n  const [{ name, ...field }, { error, touched }] = useField(props.name)\n  return (\n    <FieldControl\n      name={name}\n      error={error}\n      touched={touched}\n      required={required}\n      disabled={disabled}\n    >\n      <div className='flex flex-col space-y-1'>\n        <FieldLabel>{label}</FieldLabel>\n        <FieldInput type={type} {...props} {...field} />\n        {touched && error ? (\n          <FieldMessage>{error}</FieldMessage>\n        ) : (\n          description && <FieldMessage description>{description}</FieldMessage>\n        )}\n      </div>\n    </FieldControl>\n  )\n}\n\nexport default Input\n"]},"metadata":{},"sourceType":"module"}