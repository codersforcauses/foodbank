{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Factory_1 = require(\"../Factory\");\n\nvar Node_1 = require(\"../Node\");\n\nvar Validators_1 = require(\"../Validators\");\n\nexports.Threshold = function (imageData) {\n  var level = this.threshold() * 255,\n      data = imageData.data,\n      len = data.length,\n      i;\n\n  for (i = 0; i < len; i += 1) {\n    data[i] = data[i] < level ? 0 : 255;\n  }\n};\n\nFactory_1.Factory.addGetterSetter(Node_1.Node, 'threshold', 0.5, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);","map":{"version":3,"sources":["/home/jun/foodbank/node_modules/konva/lib/filters/Threshold.js"],"names":["Object","defineProperty","exports","value","Factory_1","require","Node_1","Validators_1","Threshold","imageData","level","threshold","data","len","length","i","Factory","addGetterSetter","Node","getNumberValidator","afterSetFilter"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,SAAS,GAAGC,OAAO,CAAC,YAAD,CAAvB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,SAAD,CAApB;;AACA,IAAIE,YAAY,GAAGF,OAAO,CAAC,eAAD,CAA1B;;AACAH,OAAO,CAACM,SAAR,GAAoB,UAAUC,SAAV,EAAqB;AACrC,MAAIC,KAAK,GAAG,KAAKC,SAAL,KAAmB,GAA/B;AAAA,MAAoCC,IAAI,GAAGH,SAAS,CAACG,IAArD;AAAA,MAA2DC,GAAG,GAAGD,IAAI,CAACE,MAAtE;AAAA,MAA8EC,CAA9E;;AACA,OAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGF,GAAhB,EAAqBE,CAAC,IAAI,CAA1B,EAA6B;AACzBH,IAAAA,IAAI,CAACG,CAAD,CAAJ,GAAUH,IAAI,CAACG,CAAD,CAAJ,GAAUL,KAAV,GAAkB,CAAlB,GAAsB,GAAhC;AACH;AACJ,CALD;;AAMAN,SAAS,CAACY,OAAV,CAAkBC,eAAlB,CAAkCX,MAAM,CAACY,IAAzC,EAA+C,WAA/C,EAA4D,GAA5D,EAAiEX,YAAY,CAACY,kBAAb,EAAjE,EAAoGf,SAAS,CAACY,OAAV,CAAkBI,cAAtH","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Factory_1 = require(\"../Factory\");\nvar Node_1 = require(\"../Node\");\nvar Validators_1 = require(\"../Validators\");\nexports.Threshold = function (imageData) {\n    var level = this.threshold() * 255, data = imageData.data, len = data.length, i;\n    for (i = 0; i < len; i += 1) {\n        data[i] = data[i] < level ? 0 : 255;\n    }\n};\nFactory_1.Factory.addGetterSetter(Node_1.Node, 'threshold', 0.5, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);\n"]},"metadata":{},"sourceType":"script"}