{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Factory_1 = require(\"../Factory\");\n\nvar Node_1 = require(\"../Node\");\n\nvar Util_1 = require(\"../Util\");\n\nvar Validators_1 = require(\"../Validators\");\n\nvar ToPolar = function (src, dst, opt) {\n  var srcPixels = src.data,\n      dstPixels = dst.data,\n      xSize = src.width,\n      ySize = src.height,\n      xMid = opt.polarCenterX || xSize / 2,\n      yMid = opt.polarCenterY || ySize / 2,\n      i,\n      x,\n      y,\n      r = 0,\n      g = 0,\n      b = 0,\n      a = 0;\n  var rad,\n      rMax = Math.sqrt(xMid * xMid + yMid * yMid);\n  x = xSize - xMid;\n  y = ySize - yMid;\n  rad = Math.sqrt(x * x + y * y);\n  rMax = rad > rMax ? rad : rMax;\n  var rSize = ySize,\n      tSize = xSize,\n      radius,\n      theta;\n  var conversion = 360 / tSize * Math.PI / 180,\n      sin,\n      cos;\n\n  for (theta = 0; theta < tSize; theta += 1) {\n    sin = Math.sin(theta * conversion);\n    cos = Math.cos(theta * conversion);\n\n    for (radius = 0; radius < rSize; radius += 1) {\n      x = Math.floor(xMid + rMax * radius / rSize * cos);\n      y = Math.floor(yMid + rMax * radius / rSize * sin);\n      i = (y * xSize + x) * 4;\n      r = srcPixels[i + 0];\n      g = srcPixels[i + 1];\n      b = srcPixels[i + 2];\n      a = srcPixels[i + 3];\n      i = (theta + radius * xSize) * 4;\n      dstPixels[i + 0] = r;\n      dstPixels[i + 1] = g;\n      dstPixels[i + 2] = b;\n      dstPixels[i + 3] = a;\n    }\n  }\n};\n\nvar FromPolar = function (src, dst, opt) {\n  var srcPixels = src.data,\n      dstPixels = dst.data,\n      xSize = src.width,\n      ySize = src.height,\n      xMid = opt.polarCenterX || xSize / 2,\n      yMid = opt.polarCenterY || ySize / 2,\n      i,\n      x,\n      y,\n      dx,\n      dy,\n      r = 0,\n      g = 0,\n      b = 0,\n      a = 0;\n  var rad,\n      rMax = Math.sqrt(xMid * xMid + yMid * yMid);\n  x = xSize - xMid;\n  y = ySize - yMid;\n  rad = Math.sqrt(x * x + y * y);\n  rMax = rad > rMax ? rad : rMax;\n  var rSize = ySize,\n      tSize = xSize,\n      radius,\n      theta,\n      phaseShift = opt.polarRotation || 0;\n  var x1, y1;\n\n  for (x = 0; x < xSize; x += 1) {\n    for (y = 0; y < ySize; y += 1) {\n      dx = x - xMid;\n      dy = y - yMid;\n      radius = Math.sqrt(dx * dx + dy * dy) * rSize / rMax;\n      theta = (Math.atan2(dy, dx) * 180 / Math.PI + 360 + phaseShift) % 360;\n      theta = theta * tSize / 360;\n      x1 = Math.floor(theta);\n      y1 = Math.floor(radius);\n      i = (y1 * xSize + x1) * 4;\n      r = srcPixels[i + 0];\n      g = srcPixels[i + 1];\n      b = srcPixels[i + 2];\n      a = srcPixels[i + 3];\n      i = (y * xSize + x) * 4;\n      dstPixels[i + 0] = r;\n      dstPixels[i + 1] = g;\n      dstPixels[i + 2] = b;\n      dstPixels[i + 3] = a;\n    }\n  }\n};\n\nexports.Kaleidoscope = function (imageData) {\n  var xSize = imageData.width,\n      ySize = imageData.height;\n  var x, y, xoff, i, r, g, b, a, srcPos, dstPos;\n  var power = Math.round(this.kaleidoscopePower());\n  var angle = Math.round(this.kaleidoscopeAngle());\n  var offset = Math.floor(xSize * (angle % 360) / 360);\n\n  if (power < 1) {\n    return;\n  }\n\n  var tempCanvas = Util_1.Util.createCanvasElement();\n  tempCanvas.width = xSize;\n  tempCanvas.height = ySize;\n  var scratchData = tempCanvas.getContext('2d').getImageData(0, 0, xSize, ySize);\n  ToPolar(imageData, scratchData, {\n    polarCenterX: xSize / 2,\n    polarCenterY: ySize / 2\n  });\n  var minSectionSize = xSize / Math.pow(2, power);\n\n  while (minSectionSize <= 8) {\n    minSectionSize = minSectionSize * 2;\n    power -= 1;\n  }\n\n  minSectionSize = Math.ceil(minSectionSize);\n  var sectionSize = minSectionSize;\n  var xStart = 0,\n      xEnd = sectionSize,\n      xDelta = 1;\n\n  if (offset + minSectionSize > xSize) {\n    xStart = sectionSize;\n    xEnd = 0;\n    xDelta = -1;\n  }\n\n  for (y = 0; y < ySize; y += 1) {\n    for (x = xStart; x !== xEnd; x += xDelta) {\n      xoff = Math.round(x + offset) % xSize;\n      srcPos = (xSize * y + xoff) * 4;\n      r = scratchData.data[srcPos + 0];\n      g = scratchData.data[srcPos + 1];\n      b = scratchData.data[srcPos + 2];\n      a = scratchData.data[srcPos + 3];\n      dstPos = (xSize * y + x) * 4;\n      scratchData.data[dstPos + 0] = r;\n      scratchData.data[dstPos + 1] = g;\n      scratchData.data[dstPos + 2] = b;\n      scratchData.data[dstPos + 3] = a;\n    }\n  }\n\n  for (y = 0; y < ySize; y += 1) {\n    sectionSize = Math.floor(minSectionSize);\n\n    for (i = 0; i < power; i += 1) {\n      for (x = 0; x < sectionSize + 1; x += 1) {\n        srcPos = (xSize * y + x) * 4;\n        r = scratchData.data[srcPos + 0];\n        g = scratchData.data[srcPos + 1];\n        b = scratchData.data[srcPos + 2];\n        a = scratchData.data[srcPos + 3];\n        dstPos = (xSize * y + sectionSize * 2 - x - 1) * 4;\n        scratchData.data[dstPos + 0] = r;\n        scratchData.data[dstPos + 1] = g;\n        scratchData.data[dstPos + 2] = b;\n        scratchData.data[dstPos + 3] = a;\n      }\n\n      sectionSize *= 2;\n    }\n  }\n\n  FromPolar(scratchData, imageData, {\n    polarRotation: 0\n  });\n};\n\nFactory_1.Factory.addGetterSetter(Node_1.Node, 'kaleidoscopePower', 2, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);\nFactory_1.Factory.addGetterSetter(Node_1.Node, 'kaleidoscopeAngle', 0, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);","map":{"version":3,"sources":["/home/jun/foodbank/node_modules/konva/lib/filters/Kaleidoscope.js"],"names":["Object","defineProperty","exports","value","Factory_1","require","Node_1","Util_1","Validators_1","ToPolar","src","dst","opt","srcPixels","data","dstPixels","xSize","width","ySize","height","xMid","polarCenterX","yMid","polarCenterY","i","x","y","r","g","b","a","rad","rMax","Math","sqrt","rSize","tSize","radius","theta","conversion","PI","sin","cos","floor","FromPolar","dx","dy","phaseShift","polarRotation","x1","y1","atan2","Kaleidoscope","imageData","xoff","srcPos","dstPos","power","round","kaleidoscopePower","angle","kaleidoscopeAngle","offset","tempCanvas","Util","createCanvasElement","scratchData","getContext","getImageData","minSectionSize","pow","ceil","sectionSize","xStart","xEnd","xDelta","Factory","addGetterSetter","Node","getNumberValidator","afterSetFilter"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Factory_1 = require(\"../Factory\");\nvar Node_1 = require(\"../Node\");\nvar Util_1 = require(\"../Util\");\nvar Validators_1 = require(\"../Validators\");\nvar ToPolar = function (src, dst, opt) {\n    var srcPixels = src.data, dstPixels = dst.data, xSize = src.width, ySize = src.height, xMid = opt.polarCenterX || xSize / 2, yMid = opt.polarCenterY || ySize / 2, i, x, y, r = 0, g = 0, b = 0, a = 0;\n    var rad, rMax = Math.sqrt(xMid * xMid + yMid * yMid);\n    x = xSize - xMid;\n    y = ySize - yMid;\n    rad = Math.sqrt(x * x + y * y);\n    rMax = rad > rMax ? rad : rMax;\n    var rSize = ySize, tSize = xSize, radius, theta;\n    var conversion = ((360 / tSize) * Math.PI) / 180, sin, cos;\n    for (theta = 0; theta < tSize; theta += 1) {\n        sin = Math.sin(theta * conversion);\n        cos = Math.cos(theta * conversion);\n        for (radius = 0; radius < rSize; radius += 1) {\n            x = Math.floor(xMid + ((rMax * radius) / rSize) * cos);\n            y = Math.floor(yMid + ((rMax * radius) / rSize) * sin);\n            i = (y * xSize + x) * 4;\n            r = srcPixels[i + 0];\n            g = srcPixels[i + 1];\n            b = srcPixels[i + 2];\n            a = srcPixels[i + 3];\n            i = (theta + radius * xSize) * 4;\n            dstPixels[i + 0] = r;\n            dstPixels[i + 1] = g;\n            dstPixels[i + 2] = b;\n            dstPixels[i + 3] = a;\n        }\n    }\n};\nvar FromPolar = function (src, dst, opt) {\n    var srcPixels = src.data, dstPixels = dst.data, xSize = src.width, ySize = src.height, xMid = opt.polarCenterX || xSize / 2, yMid = opt.polarCenterY || ySize / 2, i, x, y, dx, dy, r = 0, g = 0, b = 0, a = 0;\n    var rad, rMax = Math.sqrt(xMid * xMid + yMid * yMid);\n    x = xSize - xMid;\n    y = ySize - yMid;\n    rad = Math.sqrt(x * x + y * y);\n    rMax = rad > rMax ? rad : rMax;\n    var rSize = ySize, tSize = xSize, radius, theta, phaseShift = opt.polarRotation || 0;\n    var x1, y1;\n    for (x = 0; x < xSize; x += 1) {\n        for (y = 0; y < ySize; y += 1) {\n            dx = x - xMid;\n            dy = y - yMid;\n            radius = (Math.sqrt(dx * dx + dy * dy) * rSize) / rMax;\n            theta = ((Math.atan2(dy, dx) * 180) / Math.PI + 360 + phaseShift) % 360;\n            theta = (theta * tSize) / 360;\n            x1 = Math.floor(theta);\n            y1 = Math.floor(radius);\n            i = (y1 * xSize + x1) * 4;\n            r = srcPixels[i + 0];\n            g = srcPixels[i + 1];\n            b = srcPixels[i + 2];\n            a = srcPixels[i + 3];\n            i = (y * xSize + x) * 4;\n            dstPixels[i + 0] = r;\n            dstPixels[i + 1] = g;\n            dstPixels[i + 2] = b;\n            dstPixels[i + 3] = a;\n        }\n    }\n};\nexports.Kaleidoscope = function (imageData) {\n    var xSize = imageData.width, ySize = imageData.height;\n    var x, y, xoff, i, r, g, b, a, srcPos, dstPos;\n    var power = Math.round(this.kaleidoscopePower());\n    var angle = Math.round(this.kaleidoscopeAngle());\n    var offset = Math.floor((xSize * (angle % 360)) / 360);\n    if (power < 1) {\n        return;\n    }\n    var tempCanvas = Util_1.Util.createCanvasElement();\n    tempCanvas.width = xSize;\n    tempCanvas.height = ySize;\n    var scratchData = tempCanvas\n        .getContext('2d')\n        .getImageData(0, 0, xSize, ySize);\n    ToPolar(imageData, scratchData, {\n        polarCenterX: xSize / 2,\n        polarCenterY: ySize / 2\n    });\n    var minSectionSize = xSize / Math.pow(2, power);\n    while (minSectionSize <= 8) {\n        minSectionSize = minSectionSize * 2;\n        power -= 1;\n    }\n    minSectionSize = Math.ceil(minSectionSize);\n    var sectionSize = minSectionSize;\n    var xStart = 0, xEnd = sectionSize, xDelta = 1;\n    if (offset + minSectionSize > xSize) {\n        xStart = sectionSize;\n        xEnd = 0;\n        xDelta = -1;\n    }\n    for (y = 0; y < ySize; y += 1) {\n        for (x = xStart; x !== xEnd; x += xDelta) {\n            xoff = Math.round(x + offset) % xSize;\n            srcPos = (xSize * y + xoff) * 4;\n            r = scratchData.data[srcPos + 0];\n            g = scratchData.data[srcPos + 1];\n            b = scratchData.data[srcPos + 2];\n            a = scratchData.data[srcPos + 3];\n            dstPos = (xSize * y + x) * 4;\n            scratchData.data[dstPos + 0] = r;\n            scratchData.data[dstPos + 1] = g;\n            scratchData.data[dstPos + 2] = b;\n            scratchData.data[dstPos + 3] = a;\n        }\n    }\n    for (y = 0; y < ySize; y += 1) {\n        sectionSize = Math.floor(minSectionSize);\n        for (i = 0; i < power; i += 1) {\n            for (x = 0; x < sectionSize + 1; x += 1) {\n                srcPos = (xSize * y + x) * 4;\n                r = scratchData.data[srcPos + 0];\n                g = scratchData.data[srcPos + 1];\n                b = scratchData.data[srcPos + 2];\n                a = scratchData.data[srcPos + 3];\n                dstPos = (xSize * y + sectionSize * 2 - x - 1) * 4;\n                scratchData.data[dstPos + 0] = r;\n                scratchData.data[dstPos + 1] = g;\n                scratchData.data[dstPos + 2] = b;\n                scratchData.data[dstPos + 3] = a;\n            }\n            sectionSize *= 2;\n        }\n    }\n    FromPolar(scratchData, imageData, { polarRotation: 0 });\n};\nFactory_1.Factory.addGetterSetter(Node_1.Node, 'kaleidoscopePower', 2, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);\nFactory_1.Factory.addGetterSetter(Node_1.Node, 'kaleidoscopeAngle', 0, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);\n"]},"metadata":{},"sourceType":"script"}