{"ast":null,"code":"import BaseSchema from './schema';\nimport { boolean as locale } from './locale';\nimport isAbsent from './util/isAbsent';\nexport function create() {\n  return new BooleanSchema();\n}\nexport default class BooleanSchema extends BaseSchema {\n  constructor() {\n    super({\n      type: 'boolean'\n    });\n    this.withMutation(() => {\n      this.transform(function (value) {\n        if (!this.isType(value)) {\n          if (/^(true|1)$/i.test(String(value))) return true;\n          if (/^(false|0)$/i.test(String(value))) return false;\n        }\n\n        return value;\n      });\n    });\n  }\n\n  _typeCheck(v) {\n    if (v instanceof Boolean) v = v.valueOf();\n    return typeof v === 'boolean';\n  }\n\n  isTrue(message = locale.isValue) {\n    return this.test({\n      message,\n      name: 'is-value',\n      exclusive: true,\n      params: {\n        value: 'true'\n      },\n\n      test(value) {\n        return isAbsent(value) || value === true;\n      }\n\n    });\n  }\n\n  isFalse(message = locale.isValue) {\n    return this.test({\n      message,\n      name: 'is-value',\n      exclusive: true,\n      params: {\n        value: 'false'\n      },\n\n      test(value) {\n        return isAbsent(value) || value === false;\n      }\n\n    });\n  }\n\n}\ncreate.prototype = BooleanSchema.prototype;","map":{"version":3,"sources":["/home/jun/foodbank/node_modules/yup/es/boolean.js"],"names":["BaseSchema","boolean","locale","isAbsent","create","BooleanSchema","constructor","type","withMutation","transform","value","isType","test","String","_typeCheck","v","Boolean","valueOf","isTrue","message","isValue","name","exclusive","params","isFalse","prototype"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,UAAvB;AACA,SAASC,OAAO,IAAIC,MAApB,QAAkC,UAAlC;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAO,SAASC,MAAT,GAAkB;AACvB,SAAO,IAAIC,aAAJ,EAAP;AACD;AACD,eAAe,MAAMA,aAAN,SAA4BL,UAA5B,CAAuC;AACpDM,EAAAA,WAAW,GAAG;AACZ,UAAM;AACJC,MAAAA,IAAI,EAAE;AADF,KAAN;AAGA,SAAKC,YAAL,CAAkB,MAAM;AACtB,WAAKC,SAAL,CAAe,UAAUC,KAAV,EAAiB;AAC9B,YAAI,CAAC,KAAKC,MAAL,CAAYD,KAAZ,CAAL,EAAyB;AACvB,cAAI,cAAcE,IAAd,CAAmBC,MAAM,CAACH,KAAD,CAAzB,CAAJ,EAAuC,OAAO,IAAP;AACvC,cAAI,eAAeE,IAAf,CAAoBC,MAAM,CAACH,KAAD,CAA1B,CAAJ,EAAwC,OAAO,KAAP;AACzC;;AAED,eAAOA,KAAP;AACD,OAPD;AAQD,KATD;AAUD;;AAEDI,EAAAA,UAAU,CAACC,CAAD,EAAI;AACZ,QAAIA,CAAC,YAAYC,OAAjB,EAA0BD,CAAC,GAAGA,CAAC,CAACE,OAAF,EAAJ;AAC1B,WAAO,OAAOF,CAAP,KAAa,SAApB;AACD;;AAEDG,EAAAA,MAAM,CAACC,OAAO,GAAGjB,MAAM,CAACkB,OAAlB,EAA2B;AAC/B,WAAO,KAAKR,IAAL,CAAU;AACfO,MAAAA,OADe;AAEfE,MAAAA,IAAI,EAAE,UAFS;AAGfC,MAAAA,SAAS,EAAE,IAHI;AAIfC,MAAAA,MAAM,EAAE;AACNb,QAAAA,KAAK,EAAE;AADD,OAJO;;AAQfE,MAAAA,IAAI,CAACF,KAAD,EAAQ;AACV,eAAOP,QAAQ,CAACO,KAAD,CAAR,IAAmBA,KAAK,KAAK,IAApC;AACD;;AAVc,KAAV,CAAP;AAaD;;AAEDc,EAAAA,OAAO,CAACL,OAAO,GAAGjB,MAAM,CAACkB,OAAlB,EAA2B;AAChC,WAAO,KAAKR,IAAL,CAAU;AACfO,MAAAA,OADe;AAEfE,MAAAA,IAAI,EAAE,UAFS;AAGfC,MAAAA,SAAS,EAAE,IAHI;AAIfC,MAAAA,MAAM,EAAE;AACNb,QAAAA,KAAK,EAAE;AADD,OAJO;;AAQfE,MAAAA,IAAI,CAACF,KAAD,EAAQ;AACV,eAAOP,QAAQ,CAACO,KAAD,CAAR,IAAmBA,KAAK,KAAK,KAApC;AACD;;AAVc,KAAV,CAAP;AAaD;;AApDmD;AAuDtDN,MAAM,CAACqB,SAAP,GAAmBpB,aAAa,CAACoB,SAAjC","sourcesContent":["import BaseSchema from './schema';\nimport { boolean as locale } from './locale';\nimport isAbsent from './util/isAbsent';\nexport function create() {\n  return new BooleanSchema();\n}\nexport default class BooleanSchema extends BaseSchema {\n  constructor() {\n    super({\n      type: 'boolean'\n    });\n    this.withMutation(() => {\n      this.transform(function (value) {\n        if (!this.isType(value)) {\n          if (/^(true|1)$/i.test(String(value))) return true;\n          if (/^(false|0)$/i.test(String(value))) return false;\n        }\n\n        return value;\n      });\n    });\n  }\n\n  _typeCheck(v) {\n    if (v instanceof Boolean) v = v.valueOf();\n    return typeof v === 'boolean';\n  }\n\n  isTrue(message = locale.isValue) {\n    return this.test({\n      message,\n      name: 'is-value',\n      exclusive: true,\n      params: {\n        value: 'true'\n      },\n\n      test(value) {\n        return isAbsent(value) || value === true;\n      }\n\n    });\n  }\n\n  isFalse(message = locale.isValue) {\n    return this.test({\n      message,\n      name: 'is-value',\n      exclusive: true,\n      params: {\n        value: 'false'\n      },\n\n      test(value) {\n        return isAbsent(value) || value === false;\n      }\n\n    });\n  }\n\n}\ncreate.prototype = BooleanSchema.prototype;"]},"metadata":{},"sourceType":"module"}