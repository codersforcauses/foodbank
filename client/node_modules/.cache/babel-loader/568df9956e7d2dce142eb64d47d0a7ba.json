{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/jun/foodbank/client/src/Components/Map/index.tsx\",\n    _s = $RefreshSig$();\n\n// naming conventions of items in svg = id of group in camelCase, image import name in PascalCase.\n// svg tree generated from dev/svgParse.py (super hacky atm)\nimport React, { useEffect, useRef, useState } from 'react';\nimport './index.css';\nimport { Location } from '../../lib/types';\nimport svgData from './svgImageData.json';\nimport mapImg from './assets/TuckerMap.jpg';\nimport descData from './assets/description.json';\nimport Townbox from '../Townbox'; //import { TransformWrapper, TransformComponent } from \"react-zoom-pan-pinch\";\n\nconst Map = () => {\n  _s();\n\n  // Used because SVG does not scale properly without\n  const [height, setHeight] = useState(0);\n  const [width, setWidth] = useState(0);\n  const elementRef = useRef(null);\n  const [selected, onSelect] = useState(null);\n  const [scale, setScale] = useState(1);\n  const [townbox, setTownbox] = useState( /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false));\n  const [zoomScale, setZoom] = useState(0);\n  useEffect(() => {\n    var _elementRef$current;\n\n    if (elementRef === null || elementRef === void 0 ? void 0 : (_elementRef$current = elementRef.current) === null || _elementRef$current === void 0 ? void 0 : _elementRef$current.clientHeight) {\n      var _elementRef$current2;\n\n      setHeight(elementRef === null || elementRef === void 0 ? void 0 : (_elementRef$current2 = elementRef.current) === null || _elementRef$current2 === void 0 ? void 0 : _elementRef$current2.clientHeight);\n    }\n  }, []); //empty dependency array so it only runs once at render\n\n  useEffect(() => {\n    function handleResize() {\n      setScale(window.innerWidth / 4961);\n      console.log('resized to: ', window.innerWidth, 'x', window.innerHeight);\n    }\n\n    window.addEventListener('resize', handleResize);\n  });\n  useEffect(() => {\n    var _elementRef$current3;\n\n    if (elementRef === null || elementRef === void 0 ? void 0 : (_elementRef$current3 = elementRef.current) === null || _elementRef$current3 === void 0 ? void 0 : _elementRef$current3.clientWidth) {\n      var _elementRef$current4;\n\n      setWidth(elementRef === null || elementRef === void 0 ? void 0 : (_elementRef$current4 = elementRef.current) === null || _elementRef$current4 === void 0 ? void 0 : _elementRef$current4.clientWidth);\n      setScale(width / 4961);\n    }\n  }, [width]); // to get the area description given an area so you can actually use headers/captions\n  // returns null if such area doesn't exist in assets/description.json\n\n  const getAreaDescription = area => {\n    for (const description of descData.descriptionArray) {\n      if (description.id === Location[area]) {\n        return description;\n      }\n    }\n\n    return null;\n  };\n\n  const onMapClick = area => {\n    const areaDescription = getAreaDescription(area);\n    console.log(selected);\n\n    if (selected != null) {\n      console.log(\"xtrans\", svgData.groupArray[selected].xtrans); //const xtrans = svgData.groupArray[selected].xtrans;\n\n      setZoom(100);\n    }\n\n    if (selected !== area) {\n      const header = areaDescription === null || areaDescription === void 0 ? void 0 : areaDescription.headerText;\n      const caption = areaDescription === null || areaDescription === void 0 ? void 0 : areaDescription.captionText;\n      const showButton = areaDescription === null || areaDescription === void 0 ? void 0 : areaDescription.showButton;\n      const headerColor = areaDescription === null || areaDescription === void 0 ? void 0 : areaDescription.headerColor;\n      const maxWidth = areaDescription === null || areaDescription === void 0 ? void 0 : areaDescription.maxWidth;\n      const maxHeight = areaDescription === null || areaDescription === void 0 ? void 0 : areaDescription.maxHeight;\n      setTownbox( /*#__PURE__*/_jsxDEV(Townbox, {\n        maxWidth: maxWidth,\n        maxHeight: maxHeight,\n        headerColor: headerColor,\n        headerText: header,\n        captionText: caption,\n        showButton: showButton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this));\n    }\n\n    selected === area ? onSelect(null) : onSelect(area);\n  }; // eslint-disable-next-line\n\n\n  const handleClick = event => {\n    //need to change this type\n    event.preventDefault();\n    const area = event.target.alt;\n    onMapClick(Location[area]);\n  }; // Data can be made from dev/svgParse.py\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: elementRef,\n    className: \"flex-auto 2xl:flex-none xl:flex-none 2xl:h-4/5 xl:h-4/5 flex justify-center\",\n    children: height === 0 ? null : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"svgrow\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"relative\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            transform: \"translate3d(0px, 0px, 0px) scale(1)\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: mapImg,\n            style: {\n              transform: \"translate3d(\" + {\n                zoomScale\n              } + \",0,0) scale(1)\"\n            },\n            alt: \"Tucker Island Map\",\n            useMap: \"#tuckerislandmap\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 17\n          }, this), svgData.groupArray.map(location => {\n            const xtrans = parseInt(location.xtrans) * scale * 8; // I have no clue why everything is overscaled 8x\n\n            const ytrans = parseInt(location.ytrans) * scale * 8; // this is probably worth looking into\n\n            const translation = \"translate(\" + String(xtrans) + \"px, \" + String(ytrans) + \"px)\";\n            const up = [\"aquaOcean\", \"zombieWasteland\", \"grainField\"];\n            const left = [\"yoghurtMountains\", \"cluckyCoop\", \"grainField\", \"supplyStore\", \"wickedWaterway\"];\n            console.log(translation);\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                position: \"absolute\",\n                zIndex: 4,\n                top: 0,\n                transform: translation\n              },\n              children: [location.name, selected === Location[location.id] && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `townBox ${up.includes(location.id) ? \"up\" : \"\"} ${left.includes(location.id) ? \"left \" : \"\"}`,\n                children: townbox\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 23\n              }, this)]\n            }, location.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 19\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"map\", {\n        name: \"tuckerislandmap\",\n        children: svgData.groupArray.map(location => {\n          if (location.coords) {\n            console.log(location.id);\n            const scaledCoords = location.coords.map(coord => coord * scale);\n            const className = Location[location.id] === selected ? 'map-selected' : 'map-unselected';\n            return /*#__PURE__*/_jsxDEV(\"area\", {\n              id: location.id,\n              alt: location.id,\n              onClick: handleClick,\n              href: location.id,\n              coords: scaledCoords.join(),\n              className: className,\n              shape: \"poly\"\n            }, location.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 27\n            }, this);\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Map, \"3Cxg4MTNqd+MhfkwfAVekKPyRvc=\");\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/home/jun/foodbank/client/src/Components/Map/index.tsx"],"names":["React","useEffect","useRef","useState","Location","svgData","mapImg","descData","Townbox","Map","height","setHeight","width","setWidth","elementRef","selected","onSelect","scale","setScale","townbox","setTownbox","zoomScale","setZoom","current","clientHeight","handleResize","window","innerWidth","console","log","innerHeight","addEventListener","clientWidth","getAreaDescription","area","description","descriptionArray","id","onMapClick","areaDescription","groupArray","xtrans","header","headerText","caption","captionText","showButton","headerColor","maxWidth","maxHeight","handleClick","event","preventDefault","target","alt","position","transform","map","location","parseInt","ytrans","translation","String","up","left","zIndex","top","name","includes","coords","scaledCoords","coord","className","join"],"mappings":"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","sourcesContent":["// naming conventions of items in svg = id of group in camelCase, image import name in PascalCase.\n// svg tree generated from dev/svgParse.py (super hacky atm)\n\nimport React, { useEffect, useRef, useState } from 'react'\nimport './index.css'\nimport { Location } from '../../lib/types'\nimport svgData from './svgImageData.json'\nimport mapImg from './assets/TuckerMap.jpg'\nimport descData from './assets/description.json'\nimport Townbox from '../Townbox'\n//import { TransformWrapper, TransformComponent } from \"react-zoom-pan-pinch\";\n\nconst Map: React.FC = () => {\n  // Used because SVG does not scale properly without\n  const [height, setHeight] = useState(0)\n  const [width, setWidth] = useState(0)\n  const elementRef = useRef(null as null | HTMLDivElement)\n  const [selected, onSelect] = useState<Location | null>(null)\n  const [scale, setScale] = useState(1)\n  const [townbox, setTownbox] = useState(<></>)\n  const [zoomScale, setZoom] = useState(0)\n  type HeaderColor = 'primary' | 'orange';\n  useEffect(() => {\n    if (elementRef?.current?.clientHeight) {\n      setHeight(elementRef?.current?.clientHeight)\n    }\n  }, []) //empty dependency array so it only runs once at render\n\n  useEffect(() => {\n    function handleResize() {\n      setScale(window.innerWidth/4961)\n      console.log('resized to: ', window.innerWidth, 'x', window.innerHeight)\n    } window.addEventListener('resize', handleResize)})\n\n  useEffect(() => {\n    if (elementRef?.current?.clientWidth) {\n      setWidth(elementRef?.current?.clientWidth)\n      setScale(width/4961)\n    }\n  }, [width])\n\n  // to get the area description given an area so you can actually use headers/captions\n  // returns null if such area doesn't exist in assets/description.json\n  const getAreaDescription = (area: Location) => {\n    for(const description of descData.descriptionArray) {\n      if (description.id === Location[area]) {\n        return description\n      }\n    }\n\n    return null\n  }\n\n  const onMapClick = (area: Location) => {\n    const areaDescription = getAreaDescription(area)\n    console.log(selected)\n    if(selected != null)  {\n      console.log(\"xtrans\", svgData.groupArray[selected].xtrans)\n      //const xtrans = svgData.groupArray[selected].xtrans;\n      setZoom(100)\n    }\n    if(selected !== area) {\n      const header = areaDescription?.headerText\n      const caption = areaDescription?.captionText\n      const showButton = areaDescription?.showButton\n      const headerColor:HeaderColor = areaDescription?.headerColor as HeaderColor;\n      const maxWidth = areaDescription?.maxWidth\n      const maxHeight = areaDescription?.maxHeight\n\n      setTownbox(\n        <Townbox \n          maxWidth={maxWidth} \n          maxHeight={maxHeight}\n          headerColor={headerColor}\n          headerText={header}\n          captionText={caption}\n          showButton = {showButton}\n        />\n      )\n    }\n\n    selected === area ? onSelect(null) : onSelect(area)\n  }\n  // eslint-disable-next-line\n  const handleClick = (event: any) => { //need to change this type\n    event.preventDefault()\n    const area = event.target.alt\n    onMapClick(Location[area as keyof typeof Location])\n  }\n\n  // Data can be made from dev/svgParse.py\n  return (\n    <div\n      ref={elementRef}\n      className='flex-auto 2xl:flex-none xl:flex-none 2xl:h-4/5 xl:h-4/5 flex justify-center'\n    >\n      \n      \n      {height === 0 ? null : (\n          <div className='svgrow'>\n            <div style={{position:\"relative\"}}>\n                <div style={{transform: \"translate3d(0px, 0px, 0px) scale(1)\"}}>\n                <img src={mapImg} style={{transform: \"translate3d(\"+{zoomScale}+\",0,0) scale(1)\"}}alt=\"Tucker Island Map\" useMap=\"#tuckerislandmap\"/>\n              {svgData.groupArray.map(location =>{\n                const xtrans = parseInt(location.xtrans) * scale * 8; // I have no clue why everything is overscaled 8x\n                const ytrans = parseInt(location.ytrans) * scale * 8; // this is probably worth looking into\n                const translation = \"translate(\" + String(xtrans) + \"px, \" + String(ytrans) + \"px)\";\n                const up = [\"aquaOcean\", \"zombieWasteland\", \"grainField\"]\n                const left = [\"yoghurtMountains\", \"cluckyCoop\", \"grainField\", \"supplyStore\", \"wickedWaterway\"]\n                console.log(translation);\n                return (\n                  <div key={location.id} style={{position:\"absolute\", zIndex:4, top:0, transform:translation}}>\n                    {location.name} \n                    {\n                      selected === Location[location.id as keyof typeof Location] &&\n                      <div className={`townBox ${up.includes(location.id)? \"up\" : \"\"} ${left.includes(location.id)? \"left \" : \"\"}`}>{townbox}</div>\n                    }\n                  </div>\n                )\n              })}\n                \n              </div>\n            </div>\n            <map name=\"tuckerislandmap\">\n              {\n                svgData.groupArray.map(location => {\n                  if (location.coords){\n                    console.log(location.id)\n                    const scaledCoords = location.coords.map(coord => coord*scale)\n                    const className = Location[location.id as keyof typeof Location] === selected\n                          ? 'map-selected'\n                          : 'map-unselected'\n                    return (\n                          <area\n                            id={location.id} \n                            key={location.id}\n                            alt={location.id}\n                            onClick={handleClick}\n                            href={location.id}\n                            coords={scaledCoords.join()}\n                            className={className}\n                            shape=\"poly\"\n                          />\n                    )\n                  }\n                })\n              }\n            </map>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default Map\n"]},"metadata":{},"sourceType":"module"}