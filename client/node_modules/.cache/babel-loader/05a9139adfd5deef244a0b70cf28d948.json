{"ast":null,"code":"import Reference from '../Reference';\nexport default class ReferenceSet {\n  constructor() {\n    this.list = new Set();\n    this.refs = new Map();\n  }\n\n  get size() {\n    return this.list.size + this.refs.size;\n  }\n\n  describe() {\n    const description = [];\n\n    for (const item of this.list) description.push(item);\n\n    for (const [, ref] of this.refs) description.push(ref.describe());\n\n    return description;\n  }\n\n  toArray() {\n    return Array.from(this.list).concat(Array.from(this.refs.values()));\n  }\n\n  add(value) {\n    Reference.isRef(value) ? this.refs.set(value.key, value) : this.list.add(value);\n  }\n\n  delete(value) {\n    Reference.isRef(value) ? this.refs.delete(value.key) : this.list.delete(value);\n  }\n\n  has(value, resolve) {\n    if (this.list.has(value)) return true;\n    let item,\n        values = this.refs.values();\n\n    while (item = values.next(), !item.done) if (resolve(item.value) === value) return true;\n\n    return false;\n  }\n\n  clone() {\n    const next = new ReferenceSet();\n    next.list = new Set(this.list);\n    next.refs = new Map(this.refs);\n    return next;\n  }\n\n  merge(newItems, removeItems) {\n    const next = this.clone();\n    newItems.list.forEach(value => next.add(value));\n    newItems.refs.forEach(value => next.add(value));\n    removeItems.list.forEach(value => next.delete(value));\n    removeItems.refs.forEach(value => next.delete(value));\n    return next;\n  }\n\n}","map":{"version":3,"sources":["/home/jun/foodbank/node_modules/yup/es/util/ReferenceSet.js"],"names":["Reference","ReferenceSet","constructor","list","Set","refs","Map","size","describe","description","item","push","ref","toArray","Array","from","concat","values","add","value","isRef","set","key","delete","has","resolve","next","done","clone","merge","newItems","removeItems","forEach"],"mappings":"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","sourcesContent":["import Reference from '../Reference';\nexport default class ReferenceSet {\n  constructor() {\n    this.list = new Set();\n    this.refs = new Map();\n  }\n\n  get size() {\n    return this.list.size + this.refs.size;\n  }\n\n  describe() {\n    const description = [];\n\n    for (const item of this.list) description.push(item);\n\n    for (const [, ref] of this.refs) description.push(ref.describe());\n\n    return description;\n  }\n\n  toArray() {\n    return Array.from(this.list).concat(Array.from(this.refs.values()));\n  }\n\n  add(value) {\n    Reference.isRef(value) ? this.refs.set(value.key, value) : this.list.add(value);\n  }\n\n  delete(value) {\n    Reference.isRef(value) ? this.refs.delete(value.key) : this.list.delete(value);\n  }\n\n  has(value, resolve) {\n    if (this.list.has(value)) return true;\n    let item,\n        values = this.refs.values();\n\n    while (item = values.next(), !item.done) if (resolve(item.value) === value) return true;\n\n    return false;\n  }\n\n  clone() {\n    const next = new ReferenceSet();\n    next.list = new Set(this.list);\n    next.refs = new Map(this.refs);\n    return next;\n  }\n\n  merge(newItems, removeItems) {\n    const next = this.clone();\n    newItems.list.forEach(value => next.add(value));\n    newItems.refs.forEach(value => next.add(value));\n    removeItems.list.forEach(value => next.delete(value));\n    removeItems.refs.forEach(value => next.delete(value));\n    return next;\n  }\n\n}"]},"metadata":{},"sourceType":"module"}