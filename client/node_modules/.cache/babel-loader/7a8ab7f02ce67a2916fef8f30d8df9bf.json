{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/jun/foodbank/client/src/Components/Map/index.tsx\",\n    _s = $RefreshSig$();\n\n// naming conventions of items in svg = id of group in camelCase, image import name in PascalCase.\n// svg tree generated from dev/svgParse.py (super hacky atm)\nimport React, { useEffect, useRef, useState } from 'react';\nimport './index.css';\nimport { Location } from '../../lib/types';\nimport svgData from './svgImageData.json';\nimport SVGLocationGroup from './SVGLocationGroup';\nimport descData from './assets/description.json';\n\nconst Map = () => {\n  _s();\n\n  // Used because SVG does not scale properly without\n  const [height, setHeight] = useState(0);\n  const elementRef = useRef(null);\n  const [selected, onSelect] = useState(null);\n  const [header, setHeader] = useState(\"\");\n  const [caption, setCaption] = useState(\"\");\n  const [showButton, setButton] = useState(false);\n  const [maxWidth, setMaxWidth] = useState(\"200\");\n  const [maxHeight, setMaxHeight] = useState(\"100\");\n  useEffect(() => {\n    var _elementRef$current;\n\n    if (elementRef === null || elementRef === void 0 ? void 0 : (_elementRef$current = elementRef.current) === null || _elementRef$current === void 0 ? void 0 : _elementRef$current.clientHeight) {\n      var _elementRef$current2;\n\n      setHeight(elementRef === null || elementRef === void 0 ? void 0 : (_elementRef$current2 = elementRef.current) === null || _elementRef$current2 === void 0 ? void 0 : _elementRef$current2.clientHeight);\n    }\n  }, []); //empty dependency array so it only runs once at render\n\n  useEffect(() => {\n    if (selected != null) {\n      const description = descData.descriptionArray.filter(data => {\n        return Location[data.id] == selected;\n      }); //console.log(\"test\")\n\n      setHeader(description[0].headerText);\n      setCaption(description[0].captionText);\n      setButton(description[0].showButton);\n      setMaxWidth(description[0].maxWidth);\n      setMaxHeight(description[0].maxHeight);\n    }\n  }, [selected]);\n\n  const onMapClick = area => {\n    console.log(Location[area]);\n    let i;\n\n    for (i = 0; i < svgData.groupArray.length; i++) {\n      if (svgData.groupArray[i].id != Location[area]) {\n        svgData.groupArray[i].width = '0';\n      }\n\n      console.log(svgData.groupArray[i]);\n      svgData.groupArray[i].width = '100';\n      console.log(svgData.groupArray[i].xlinkHref);\n    }\n\n    console.log(svgData.groupArray);\n    selected === area ? onSelect(null) : onSelect(area);\n  }; // Data can be made from dev/svgParse.py\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: elementRef,\n    className: \"flex-auto 2xl:flex-none xl:flex-none 2xl:h-4/5 xl:h-4/5 flex justify-center\",\n    children: height === 0 ? null : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"svgrow\",\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n        viewBox: \"0 0 1000 490.56\",\n        height: height,\n        overflow: \"scroll\",\n        children: svgData.groupArray.map(group => /*#__PURE__*/_jsxDEV(SVGLocationGroup, {\n          name: Location[group.id],\n          width: group.width,\n          height: group.height,\n          header: header,\n          caption: caption,\n          showButton: showButton,\n          maxHeight: maxHeight,\n          maxWidth: maxWidth,\n          transform: group.transform,\n          className: Location[group.id] === selected ? 'map-selected' : 'map-unselected',\n          onClick: onMapClick,\n          image: group.id\n        }, group.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Map, \"HCYusWw/Iaj4QnhW8GJNRerzbyM=\");\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/home/jun/foodbank/client/src/Components/Map/index.tsx"],"names":["React","useEffect","useRef","useState","Location","svgData","SVGLocationGroup","descData","Map","height","setHeight","elementRef","selected","onSelect","header","setHeader","caption","setCaption","showButton","setButton","maxWidth","setMaxWidth","maxHeight","setMaxHeight","current","clientHeight","description","descriptionArray","filter","data","id","headerText","captionText","onMapClick","area","console","log","i","groupArray","length","width","xlinkHref","map","group","transform"],"mappings":"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","sourcesContent":["// naming conventions of items in svg = id of group in camelCase, image import name in PascalCase.\n// svg tree generated from dev/svgParse.py (super hacky atm)\n\nimport React, { useEffect, useRef, useState } from 'react'\nimport './index.css'\nimport { Location } from '../../lib/types'\nimport svgData from './svgImageData.json'\nimport SVGLocationGroup from './SVGLocationGroup'\nimport descData from './assets/description.json'\nconst Map: React.FC = () => {\n  // Used because SVG does not scale properly without\n  const [height, setHeight] = useState(0)\n  const elementRef = useRef(null as null | HTMLDivElement)\n\n  const [selected, onSelect] = useState<Location | null>(null)\n  const [header, setHeader] = useState<string>(\"\")\n  const [caption, setCaption] = useState<string>(\"\")\n  const [showButton, setButton] = useState<boolean>(false)\n  const [maxWidth, setMaxWidth] = useState<string>(\"200\")\n  const [maxHeight, setMaxHeight] = useState<string>(\"100\")\n  \n  useEffect(() => {\n    if (elementRef?.current?.clientHeight) {\n      setHeight(elementRef?.current?.clientHeight)\n    }\n  }, []) //empty dependency array so it only runs once at render\n\n  useEffect(() => {\n    if(selected != null){\n      const description = descData.descriptionArray.filter(data =>{\n        return Location[data.id as keyof typeof Location] == selected\n      });\n      //console.log(\"test\")\n      setHeader(description[0].headerText);\n      setCaption(description[0].captionText);\n      setButton(description[0].showButton);\n      setMaxWidth(description[0].maxWidth);\n      setMaxHeight(description[0].maxHeight);\n    }  \n  }, [selected])\n\n  const onMapClick = (area: Location) => {\n    console.log(Location[area]);\n    let i;\n    for(i=0; i < svgData.groupArray.length; i++) {\n      if (svgData.groupArray[i].id != Location[area]) {\n        svgData.groupArray[i].width = '0'\n      }\n      console.log(svgData.groupArray[i])\n      svgData.groupArray[i].width = '100'\n      console.log(svgData.groupArray[i].xlinkHref)\n    }\n    console.log(svgData.groupArray)\n    selected === area ? onSelect(null) : onSelect(area)\n  }\n\n  // Data can be made from dev/svgParse.py\n  return (\n    <div\n      ref={elementRef}\n      className='flex-auto 2xl:flex-none xl:flex-none 2xl:h-4/5 xl:h-4/5 flex justify-center'\n    >\n      {height === 0 ? null : (\n        <div className='svgrow'>\n          <svg\n            xmlns='http://www.w3.org/2000/svg'\n            xmlnsXlink='http://www.w3.org/1999/xlink'\n            viewBox='0 0 1000 490.56'\n            height={height}\n            overflow='scroll'\n          >\n            {svgData.groupArray.map(group => (\n              <SVGLocationGroup\n                key={group.id}\n                name={Location[group.id as keyof typeof Location]}\n                width={group.width}\n                height={group.height}\n                header={header}\n                caption={caption}\n                showButton={showButton}\n                maxHeight={maxHeight}\n                maxWidth={maxWidth}\n                transform={group.transform}\n                className={\n                  Location[group.id as keyof typeof Location] === selected\n                    ? 'map-selected'\n                    : 'map-unselected'\n                }\n                onClick={onMapClick}\n                image={group.id}\n              />\n            ))}\n          </svg>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default Map\n"]},"metadata":{},"sourceType":"module"}