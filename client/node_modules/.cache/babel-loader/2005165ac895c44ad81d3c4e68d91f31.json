{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Factory_1 = require(\"../Factory\");\n\nvar Node_1 = require(\"../Node\");\n\nvar Validators_1 = require(\"../Validators\");\n\nexports.RGBA = function (imageData) {\n  var data = imageData.data,\n      nPixels = data.length,\n      red = this.red(),\n      green = this.green(),\n      blue = this.blue(),\n      alpha = this.alpha(),\n      i,\n      ia;\n\n  for (i = 0; i < nPixels; i += 4) {\n    ia = 1 - alpha;\n    data[i] = red * alpha + data[i] * ia;\n    data[i + 1] = green * alpha + data[i + 1] * ia;\n    data[i + 2] = blue * alpha + data[i + 2] * ia;\n  }\n};\n\nFactory_1.Factory.addGetterSetter(Node_1.Node, 'red', 0, function (val) {\n  this._filterUpToDate = false;\n\n  if (val > 255) {\n    return 255;\n  } else if (val < 0) {\n    return 0;\n  } else {\n    return Math.round(val);\n  }\n});\nFactory_1.Factory.addGetterSetter(Node_1.Node, 'green', 0, function (val) {\n  this._filterUpToDate = false;\n\n  if (val > 255) {\n    return 255;\n  } else if (val < 0) {\n    return 0;\n  } else {\n    return Math.round(val);\n  }\n});\nFactory_1.Factory.addGetterSetter(Node_1.Node, 'blue', 0, Validators_1.RGBComponent, Factory_1.Factory.afterSetFilter);\nFactory_1.Factory.addGetterSetter(Node_1.Node, 'alpha', 1, function (val) {\n  this._filterUpToDate = false;\n\n  if (val > 1) {\n    return 1;\n  } else if (val < 0) {\n    return 0;\n  } else {\n    return val;\n  }\n});","map":{"version":3,"sources":["/home/jun/foodbank/node_modules/konva/lib/filters/RGBA.js"],"names":["Object","defineProperty","exports","value","Factory_1","require","Node_1","Validators_1","RGBA","imageData","data","nPixels","length","red","green","blue","alpha","i","ia","Factory","addGetterSetter","Node","val","_filterUpToDate","Math","round","RGBComponent","afterSetFilter"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Factory_1 = require(\"../Factory\");\nvar Node_1 = require(\"../Node\");\nvar Validators_1 = require(\"../Validators\");\nexports.RGBA = function (imageData) {\n    var data = imageData.data, nPixels = data.length, red = this.red(), green = this.green(), blue = this.blue(), alpha = this.alpha(), i, ia;\n    for (i = 0; i < nPixels; i += 4) {\n        ia = 1 - alpha;\n        data[i] = red * alpha + data[i] * ia;\n        data[i + 1] = green * alpha + data[i + 1] * ia;\n        data[i + 2] = blue * alpha + data[i + 2] * ia;\n    }\n};\nFactory_1.Factory.addGetterSetter(Node_1.Node, 'red', 0, function (val) {\n    this._filterUpToDate = false;\n    if (val > 255) {\n        return 255;\n    }\n    else if (val < 0) {\n        return 0;\n    }\n    else {\n        return Math.round(val);\n    }\n});\nFactory_1.Factory.addGetterSetter(Node_1.Node, 'green', 0, function (val) {\n    this._filterUpToDate = false;\n    if (val > 255) {\n        return 255;\n    }\n    else if (val < 0) {\n        return 0;\n    }\n    else {\n        return Math.round(val);\n    }\n});\nFactory_1.Factory.addGetterSetter(Node_1.Node, 'blue', 0, Validators_1.RGBComponent, Factory_1.Factory.afterSetFilter);\nFactory_1.Factory.addGetterSetter(Node_1.Node, 'alpha', 1, function (val) {\n    this._filterUpToDate = false;\n    if (val > 1) {\n        return 1;\n    }\n    else if (val < 0) {\n        return 0;\n    }\n    else {\n        return val;\n    }\n});\n"]},"metadata":{},"sourceType":"script"}