{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/jun/foodbank/client/src/Components/Map/index.tsx\",\n    _s = $RefreshSig$();\n\n// naming conventions of items in svg = id of group in camelCase, image import name in PascalCase.\n// svg tree generated from dev/svgParse.py (super hacky atm)\nimport React, { useEffect, useRef, useState } from 'react';\nimport './index.css';\nimport { Location } from '../../lib/types';\nimport svgData from './svgImageData.json';\nimport SVGLocationGroup from './SVGLocationGroup';\nimport descData from './assets/description.json';\nimport { TransformWrapper, TransformComponent } from 'react-zoom-pan-pinch';\n\nconst Map = () => {\n  _s();\n\n  // Used because SVG does not scale properly without\n  const [height, setHeight] = useState(0);\n  const elementRef = useRef(null); //const [selected, onSelect] = useState<Location | null>(null)\n\n  const [header, setHeader] = useState(\"\");\n  const [caption, setCaption] = useState(\"\");\n  const [showButton, setButton] = useState(false);\n  const [maxWidth, setMaxWidth] = useState(\"200\");\n  const [maxHeight, setMaxHeight] = useState(\"100\");\n  useEffect(() => {\n    var _elementRef$current;\n\n    if (elementRef === null || elementRef === void 0 ? void 0 : (_elementRef$current = elementRef.current) === null || _elementRef$current === void 0 ? void 0 : _elementRef$current.clientHeight) {\n      var _elementRef$current2;\n\n      setHeight(elementRef === null || elementRef === void 0 ? void 0 : (_elementRef$current2 = elementRef.current) === null || _elementRef$current2 === void 0 ? void 0 : _elementRef$current2.clientHeight);\n    }\n  }, []); //empty dependency array so it only runs once at render\n\n  useEffect(() => {\n    if (selected != null) {\n      const description = descData.descriptionArray.filter(data => {\n        return Location[data.id] == selected;\n      }); //console.log(\"test\")\n\n      setHeader(description[0].headerText);\n      setCaption(description[0].captionText);\n      setButton(description[0].showButton);\n      setMaxWidth(description[0].maxWidth);\n      setMaxHeight(description[0].maxHeight);\n    }\n  }, [selected]);\n  /*const onMapClick = (area: Location) => {\n    console.log(Location[area]);\n    // let i;\n    // for(i=0; i < svgData.groupArray.length; i++) {\n      \n    //   if ((svgData.groupArray[i].id == Location[area]) || (svgData.groupArray[i].id == \"bg\")) {\n    //     if(selected !== area) {\n    //       svgData.groupArray[i].transform = \"translate(0 0) scale(1)\"\n    //     }\n     //     else {\n    //       svgData.groupArray[i].transform = \"translate(0 0) scale(0.15)\"\n    //     }\n    //   }\n     //   else{\n    //     svgData.groupArray[i].width = '0'\n    //   }\n    // }\n    // console.log(svgData.groupArray)\n    selected === area ? onSelect(null) : onSelect(area)\n  }*/\n  // Data can be made from dev/svgParse.py\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: elementRef,\n    className: \"flex-auto 2xl:flex-none xl:flex-none 2xl:h-4/5 xl:h-4/5 flex justify-center\",\n    children: height === 0 ? null : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"svgrow\",\n      children: /*#__PURE__*/_jsxDEV(TransformWrapper, {\n        children: ({\n          zoomToElement,\n          resetTransform\n        }) => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => zoomToElement(\"healthyTown\"),\n              children: \"Zoom to element 1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => zoomToElement(\"element2\"),\n              children: \"Zoom to element 2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => zoomToElement(\"element3\"),\n              children: \"Zoom to element 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => resetTransform(),\n              children: \"Reset\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(TransformComponent, {\n            children: /*#__PURE__*/_jsxDEV(\"svg\", {\n              xmlns: \"http://www.w3.org/2000/svg\",\n              xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n              viewBox: \"0 0 1000 490.56\",\n              height: height,\n              overflow: \"scroll\",\n              children: svgData.groupArray.map(group => /*#__PURE__*/_jsxDEV(SVGLocationGroup, {\n                name: Location[group.id],\n                width: group.width,\n                height: group.height,\n                header: header,\n                caption: caption,\n                showButton: showButton,\n                maxHeight: maxHeight,\n                maxWidth: maxWidth,\n                transform: group.transform,\n                className: Location[group.id] === selected ? 'map-selected' : 'map-unselected',\n                onClick: () => zoomToElement(group.id),\n                image: group.id\n              }, group.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 98,\n                columnNumber: 15\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Map, \"jkQONzc89PtPChHqdev31mSw9mk=\");\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/home/jun/foodbank/client/src/Components/Map/index.tsx"],"names":["React","useEffect","useRef","useState","Location","svgData","SVGLocationGroup","descData","TransformWrapper","TransformComponent","Map","height","setHeight","elementRef","header","setHeader","caption","setCaption","showButton","setButton","maxWidth","setMaxWidth","maxHeight","setMaxHeight","current","clientHeight","selected","description","descriptionArray","filter","data","id","headerText","captionText","zoomToElement","resetTransform","groupArray","map","group","width","transform"],"mappings":";;;;;;AAAA;AACA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAO,aAAP;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,SAAQC,gBAAR,EAA0BC,kBAA1B,QAAmD,sBAAnD;;AACA,MAAMC,GAAa,GAAG,MAAM;AAAA;;AAC1B;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,CAAD,CAApC;AACA,QAAMU,UAAU,GAAGX,MAAM,CAAC,IAAD,CAAzB,CAH0B,CAK1B;;AACA,QAAM,CAACY,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAAS,EAAT,CAApC;AACA,QAAM,CAACa,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAS,EAAT,CAAtC;AACA,QAAM,CAACe,UAAD,EAAaC,SAAb,IAA0BhB,QAAQ,CAAU,KAAV,CAAxC;AACA,QAAM,CAACiB,QAAD,EAAWC,WAAX,IAA0BlB,QAAQ,CAAS,KAAT,CAAxC;AACA,QAAM,CAACmB,SAAD,EAAYC,YAAZ,IAA4BpB,QAAQ,CAAS,KAAT,CAA1C;AAEAF,EAAAA,SAAS,CAAC,MAAM;AAAA;;AACd,QAAIY,UAAJ,aAAIA,UAAJ,8CAAIA,UAAU,CAAEW,OAAhB,wDAAI,oBAAqBC,YAAzB,EAAuC;AAAA;;AACrCb,MAAAA,SAAS,CAACC,UAAD,aAACA,UAAD,+CAACA,UAAU,CAAEW,OAAb,yDAAC,qBAAqBC,YAAtB,CAAT;AACD;AACF,GAJQ,EAIN,EAJM,CAAT,CAZ0B,CAgBnB;;AAEPxB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAGyB,QAAQ,IAAI,IAAf,EAAoB;AAClB,YAAMC,WAAW,GAAGpB,QAAQ,CAACqB,gBAAT,CAA0BC,MAA1B,CAAiCC,IAAI,IAAG;AAC1D,eAAO1B,QAAQ,CAAC0B,IAAI,CAACC,EAAN,CAAR,IAA8CL,QAArD;AACD,OAFmB,CAApB,CADkB,CAIlB;;AACAX,MAAAA,SAAS,CAACY,WAAW,CAAC,CAAD,CAAX,CAAeK,UAAhB,CAAT;AACAf,MAAAA,UAAU,CAACU,WAAW,CAAC,CAAD,CAAX,CAAeM,WAAhB,CAAV;AACAd,MAAAA,SAAS,CAACQ,WAAW,CAAC,CAAD,CAAX,CAAeT,UAAhB,CAAT;AACAG,MAAAA,WAAW,CAACM,WAAW,CAAC,CAAD,CAAX,CAAeP,QAAhB,CAAX;AACAG,MAAAA,YAAY,CAACI,WAAW,CAAC,CAAD,CAAX,CAAeL,SAAhB,CAAZ;AACD;AACF,GAZQ,EAYN,CAACI,QAAD,CAZM,CAAT;AAcA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIE;;AACA,sBACE;AACE,IAAA,GAAG,EAAEb,UADP;AAEE,IAAA,SAAS,EAAC,6EAFZ;AAAA,cAIGF,MAAM,KAAK,CAAX,GAAe,IAAf,gBACC;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,6BACE,QAAC,gBAAD;AAAA,kBACC,CAAC;AAAEuB,UAAAA,aAAF;AAAiBC,UAAAA;AAAjB,SAAD,kBACD;AAAA,kCACA;AAAA,oCACE;AAAQ,cAAA,OAAO,EAAE,MAAMD,aAAa,CAAC,aAAD,CAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAIE;AAAQ,cAAA,OAAO,EAAE,MAAMA,aAAa,CAAC,UAAD,CAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJF,eAOE;AAAQ,cAAA,OAAO,EAAE,MAAMA,aAAa,CAAC,UAAD,CAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAPF,eAUE;AAAQ,cAAA,OAAO,EAAE,MAAMC,cAAc,EAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAVF;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA,eAaE,QAAC,kBAAD;AAAA,mCACF;AACE,cAAA,KAAK,EAAC,4BADR;AAEE,cAAA,UAAU,EAAC,8BAFb;AAGE,cAAA,OAAO,EAAC,iBAHV;AAIE,cAAA,MAAM,EAAExB,MAJV;AAKE,cAAA,QAAQ,EAAC,QALX;AAAA,wBAOGN,OAAO,CAAC+B,UAAR,CAAmBC,GAAnB,CAAuBC,KAAK,iBAC3B,QAAC,gBAAD;AAEE,gBAAA,IAAI,EAAElC,QAAQ,CAACkC,KAAK,CAACP,EAAP,CAFhB;AAGE,gBAAA,KAAK,EAAEO,KAAK,CAACC,KAHf;AAIE,gBAAA,MAAM,EAAED,KAAK,CAAC3B,MAJhB;AAKE,gBAAA,MAAM,EAAEG,MALV;AAME,gBAAA,OAAO,EAAEE,OANX;AAOE,gBAAA,UAAU,EAAEE,UAPd;AAQE,gBAAA,SAAS,EAAEI,SARb;AASE,gBAAA,QAAQ,EAAEF,QATZ;AAUE,gBAAA,SAAS,EAAEkB,KAAK,CAACE,SAVnB;AAWE,gBAAA,SAAS,EACPpC,QAAQ,CAACkC,KAAK,CAACP,EAAP,CAAR,KAAgDL,QAAhD,GACI,cADJ,GAEI,gBAdR;AAgBE,gBAAA,OAAO,EAAE,MAAMQ,aAAa,CAACI,KAAK,CAACP,EAAP,CAhB9B;AAiBE,gBAAA,KAAK,EAAEO,KAAK,CAACP;AAjBf,iBACOO,KAAK,CAACP,EADb;AAAA;AAAA;AAAA;AAAA,sBADD;AAPH;AAAA;AAAA;AAAA;AAAA;AADE;AAAA;AAAA;AAAA;AAAA,kBAbF;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AALJ;AAAA;AAAA;AAAA;AAAA,UADF;AA4DD,CApHD;;GAAMrB,G;;KAAAA,G;AAsHN,eAAeA,GAAf","sourcesContent":["// naming conventions of items in svg = id of group in camelCase, image import name in PascalCase.\n// svg tree generated from dev/svgParse.py (super hacky atm)\n\nimport React, { useEffect, useRef, useState } from 'react'\nimport './index.css'\nimport { Location } from '../../lib/types'\nimport svgData from './svgImageData.json'\nimport SVGLocationGroup from './SVGLocationGroup'\nimport descData from './assets/description.json'\nimport {TransformWrapper, TransformComponent} from 'react-zoom-pan-pinch'\nconst Map: React.FC = () => {\n  // Used because SVG does not scale properly without\n  const [height, setHeight] = useState(0)\n  const elementRef = useRef(null as null | HTMLDivElement)\n\n  //const [selected, onSelect] = useState<Location | null>(null)\n  const [header, setHeader] = useState<string>(\"\")\n  const [caption, setCaption] = useState<string>(\"\")\n  const [showButton, setButton] = useState<boolean>(false)\n  const [maxWidth, setMaxWidth] = useState<string>(\"200\")\n  const [maxHeight, setMaxHeight] = useState<string>(\"100\")\n  \n  useEffect(() => {\n    if (elementRef?.current?.clientHeight) {\n      setHeight(elementRef?.current?.clientHeight)\n    }\n  }, []) //empty dependency array so it only runs once at render\n\n  useEffect(() => {\n    if(selected != null){\n      const description = descData.descriptionArray.filter(data =>{\n        return Location[data.id as keyof typeof Location] == selected\n      });\n      //console.log(\"test\")\n      setHeader(description[0].headerText);\n      setCaption(description[0].captionText);\n      setButton(description[0].showButton);\n      setMaxWidth(description[0].maxWidth);\n      setMaxHeight(description[0].maxHeight);\n    }  \n  }, [selected])\n\n  /*const onMapClick = (area: Location) => {\n    console.log(Location[area]);\n    // let i;\n    // for(i=0; i < svgData.groupArray.length; i++) {\n      \n    //   if ((svgData.groupArray[i].id == Location[area]) || (svgData.groupArray[i].id == \"bg\")) {\n    //     if(selected !== area) {\n    //       svgData.groupArray[i].transform = \"translate(0 0) scale(1)\"\n    //     }\n\n    //     else {\n    //       svgData.groupArray[i].transform = \"translate(0 0) scale(0.15)\"\n    //     }\n    //   }\n\n    //   else{\n    //     svgData.groupArray[i].width = '0'\n    //   }\n    // }\n    // console.log(svgData.groupArray)\n    selected === area ? onSelect(null) : onSelect(area)\n  }*/\n\n  // Data can be made from dev/svgParse.py\n  return (\n    <div\n      ref={elementRef}\n      className='flex-auto 2xl:flex-none xl:flex-none 2xl:h-4/5 xl:h-4/5 flex justify-center'\n    >\n      {height === 0 ? null : (\n        <div className='svgrow'>\n          <TransformWrapper>\n          {({ zoomToElement, resetTransform }) => (\n          <>\n          <div>\n            <button onClick={() => zoomToElement(\"healthyTown\")}>\n              Zoom to element 1\n            </button>\n            <button onClick={() => zoomToElement(\"element2\")}>\n              Zoom to element 2\n            </button>\n            <button onClick={() => zoomToElement(\"element3\")}>\n              Zoom to element 3\n            </button>\n            <button onClick={() => resetTransform()}>Reset</button>\n          </div>\n            <TransformComponent>\n          <svg\n            xmlns='http://www.w3.org/2000/svg'\n            xmlnsXlink='http://www.w3.org/1999/xlink'\n            viewBox='0 0 1000 490.56'\n            height={height}\n            overflow='scroll'\n          >\n            {svgData.groupArray.map(group => (\n              <SVGLocationGroup\n                key={group.id}\n                name={Location[group.id as keyof typeof Location]}\n                width={group.width}\n                height={group.height}\n                header={header}\n                caption={caption}\n                showButton={showButton}\n                maxHeight={maxHeight}\n                maxWidth={maxWidth}\n                transform={group.transform}\n                className={\n                  Location[group.id as keyof typeof Location] === selected\n                    ? 'map-selected'\n                    : 'map-unselected'\n                }\n                onClick={() => zoomToElement(group.id)}\n                image={group.id}\n              />\n            ))}\n          </svg>\n          </TransformComponent>\n          </>\n        )}   \n          </TransformWrapper>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default Map\n"]},"metadata":{},"sourceType":"module"}