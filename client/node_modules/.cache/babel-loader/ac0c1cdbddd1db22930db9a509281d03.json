{"ast":null,"code":"import isSchema from './util/isSchema';\nexport function create(builder) {\n  return new Lazy(builder);\n}\n\nclass Lazy {\n  constructor(builder) {\n    this.type = 'lazy';\n    this.__isYupSchema__ = true;\n\n    this._resolve = (value, options = {}) => {\n      let schema = this.builder(value, options);\n      if (!isSchema(schema)) throw new TypeError('lazy() functions must return a valid schema');\n      return schema.resolve(options);\n    };\n\n    this.builder = builder;\n  }\n\n  resolve(options) {\n    return this._resolve(options.value, options);\n  }\n\n  cast(value, options) {\n    return this._resolve(value, options).cast(value, options);\n  }\n\n  validate(value, options, maybeCb) {\n    // @ts-expect-error missing public callback on type\n    return this._resolve(value, options).validate(value, options, maybeCb);\n  }\n\n  validateSync(value, options) {\n    return this._resolve(value, options).validateSync(value, options);\n  }\n\n  validateAt(path, value, options) {\n    return this._resolve(value, options).validateAt(path, value, options);\n  }\n\n  validateSyncAt(path, value, options) {\n    return this._resolve(value, options).validateSyncAt(path, value, options);\n  }\n\n  describe() {\n    return null;\n  }\n\n  isValid(value, options) {\n    return this._resolve(value, options).isValid(value, options);\n  }\n\n  isValidSync(value, options) {\n    return this._resolve(value, options).isValidSync(value, options);\n  }\n\n}\n\nexport default Lazy;","map":{"version":3,"sources":["/home/jun/foodbank/node_modules/yup/es/Lazy.js"],"names":["isSchema","create","builder","Lazy","constructor","type","__isYupSchema__","_resolve","value","options","schema","TypeError","resolve","cast","validate","maybeCb","validateSync","validateAt","path","validateSyncAt","describe","isValid","isValidSync"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,iBAArB;AACA,OAAO,SAASC,MAAT,CAAgBC,OAAhB,EAAyB;AAC9B,SAAO,IAAIC,IAAJ,CAASD,OAAT,CAAP;AACD;;AAED,MAAMC,IAAN,CAAW;AACTC,EAAAA,WAAW,CAACF,OAAD,EAAU;AACnB,SAAKG,IAAL,GAAY,MAAZ;AACA,SAAKC,eAAL,GAAuB,IAAvB;;AAEA,SAAKC,QAAL,GAAgB,CAACC,KAAD,EAAQC,OAAO,GAAG,EAAlB,KAAyB;AACvC,UAAIC,MAAM,GAAG,KAAKR,OAAL,CAAaM,KAAb,EAAoBC,OAApB,CAAb;AACA,UAAI,CAACT,QAAQ,CAACU,MAAD,CAAb,EAAuB,MAAM,IAAIC,SAAJ,CAAc,6CAAd,CAAN;AACvB,aAAOD,MAAM,CAACE,OAAP,CAAeH,OAAf,CAAP;AACD,KAJD;;AAMA,SAAKP,OAAL,GAAeA,OAAf;AACD;;AAEDU,EAAAA,OAAO,CAACH,OAAD,EAAU;AACf,WAAO,KAAKF,QAAL,CAAcE,OAAO,CAACD,KAAtB,EAA6BC,OAA7B,CAAP;AACD;;AAEDI,EAAAA,IAAI,CAACL,KAAD,EAAQC,OAAR,EAAiB;AACnB,WAAO,KAAKF,QAAL,CAAcC,KAAd,EAAqBC,OAArB,EAA8BI,IAA9B,CAAmCL,KAAnC,EAA0CC,OAA1C,CAAP;AACD;;AAEDK,EAAAA,QAAQ,CAACN,KAAD,EAAQC,OAAR,EAAiBM,OAAjB,EAA0B;AAChC;AACA,WAAO,KAAKR,QAAL,CAAcC,KAAd,EAAqBC,OAArB,EAA8BK,QAA9B,CAAuCN,KAAvC,EAA8CC,OAA9C,EAAuDM,OAAvD,CAAP;AACD;;AAEDC,EAAAA,YAAY,CAACR,KAAD,EAAQC,OAAR,EAAiB;AAC3B,WAAO,KAAKF,QAAL,CAAcC,KAAd,EAAqBC,OAArB,EAA8BO,YAA9B,CAA2CR,KAA3C,EAAkDC,OAAlD,CAAP;AACD;;AAEDQ,EAAAA,UAAU,CAACC,IAAD,EAAOV,KAAP,EAAcC,OAAd,EAAuB;AAC/B,WAAO,KAAKF,QAAL,CAAcC,KAAd,EAAqBC,OAArB,EAA8BQ,UAA9B,CAAyCC,IAAzC,EAA+CV,KAA/C,EAAsDC,OAAtD,CAAP;AACD;;AAEDU,EAAAA,cAAc,CAACD,IAAD,EAAOV,KAAP,EAAcC,OAAd,EAAuB;AACnC,WAAO,KAAKF,QAAL,CAAcC,KAAd,EAAqBC,OAArB,EAA8BU,cAA9B,CAA6CD,IAA7C,EAAmDV,KAAnD,EAA0DC,OAA1D,CAAP;AACD;;AAEDW,EAAAA,QAAQ,GAAG;AACT,WAAO,IAAP;AACD;;AAEDC,EAAAA,OAAO,CAACb,KAAD,EAAQC,OAAR,EAAiB;AACtB,WAAO,KAAKF,QAAL,CAAcC,KAAd,EAAqBC,OAArB,EAA8BY,OAA9B,CAAsCb,KAAtC,EAA6CC,OAA7C,CAAP;AACD;;AAEDa,EAAAA,WAAW,CAACd,KAAD,EAAQC,OAAR,EAAiB;AAC1B,WAAO,KAAKF,QAAL,CAAcC,KAAd,EAAqBC,OAArB,EAA8Ba,WAA9B,CAA0Cd,KAA1C,EAAiDC,OAAjD,CAAP;AACD;;AAjDQ;;AAqDX,eAAeN,IAAf","sourcesContent":["import isSchema from './util/isSchema';\nexport function create(builder) {\n  return new Lazy(builder);\n}\n\nclass Lazy {\n  constructor(builder) {\n    this.type = 'lazy';\n    this.__isYupSchema__ = true;\n\n    this._resolve = (value, options = {}) => {\n      let schema = this.builder(value, options);\n      if (!isSchema(schema)) throw new TypeError('lazy() functions must return a valid schema');\n      return schema.resolve(options);\n    };\n\n    this.builder = builder;\n  }\n\n  resolve(options) {\n    return this._resolve(options.value, options);\n  }\n\n  cast(value, options) {\n    return this._resolve(value, options).cast(value, options);\n  }\n\n  validate(value, options, maybeCb) {\n    // @ts-expect-error missing public callback on type\n    return this._resolve(value, options).validate(value, options, maybeCb);\n  }\n\n  validateSync(value, options) {\n    return this._resolve(value, options).validateSync(value, options);\n  }\n\n  validateAt(path, value, options) {\n    return this._resolve(value, options).validateAt(path, value, options);\n  }\n\n  validateSyncAt(path, value, options) {\n    return this._resolve(value, options).validateSyncAt(path, value, options);\n  }\n\n  describe() {\n    return null;\n  }\n\n  isValid(value, options) {\n    return this._resolve(value, options).isValid(value, options);\n  }\n\n  isValidSync(value, options) {\n    return this._resolve(value, options).isValidSync(value, options);\n  }\n\n}\n\nexport default Lazy;"]},"metadata":{},"sourceType":"module"}