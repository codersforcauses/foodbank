{"ast":null,"code":"// Generated by PEG.js v0.11.0-master.b7b87ea, https://pegjs.org/\nfunction peg$subclass(child, parent) {\n  function C() {\n    this.constructor = child;\n  }\n\n  C.prototype = parent.prototype;\n  child.prototype = new C();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message = message;\n  this.expected = expected;\n  this.found = found;\n  this.location = location;\n  this.name = \"SyntaxError\"; // istanbul ignore next\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function (expected, found, location) {\n  var DESCRIBE_EXPECTATION_FNS = {\n    literal: function (expectation) {\n      return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n    },\n    class: function (expectation) {\n      var escapedParts = expectation.parts.map(function (part) {\n        return Array.isArray(part) ? classEscape(part[0]) + \"-\" + classEscape(part[1]) : classEscape(part);\n      });\n      return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n    },\n    any: function () {\n      return \"any character\";\n    },\n    end: function () {\n      return \"end of input\";\n    },\n    other: function (expectation) {\n      return expectation.description;\n    },\n    not: function (expectation) {\n      return \"not \" + describeExpectation(expectation.expected);\n    }\n  };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, \"\\\\\\\"\").replace(/\\0/g, \"\\\\0\").replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/[\\x00-\\x0F]/g, function (ch) {\n      return \"\\\\x0\" + hex(ch);\n    }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) {\n      return \"\\\\x\" + hex(ch);\n    });\n  }\n\n  function classEscape(s) {\n    return s.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\]/g, \"\\\\]\").replace(/\\^/g, \"\\\\^\").replace(/-/g, \"\\\\-\").replace(/\\0/g, \"\\\\0\").replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/[\\x00-\\x0F]/g, function (ch) {\n      return \"\\\\x0\" + hex(ch);\n    }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) {\n      return \"\\\\x\" + hex(ch);\n    });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = expected.map(describeExpectation);\n    var i, j;\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \") + \", or \" + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== undefined ? options : {};\n  var peg$FAILED = {};\n  var peg$startRuleFunctions = {\n    transformList: peg$parsetransformList\n  };\n  var peg$startRuleFunction = peg$parsetransformList;\n  var peg$c0 = \"matrix\";\n  var peg$c1 = \"(\";\n  var peg$c2 = \")\";\n  var peg$c3 = \"translate\";\n  var peg$c4 = \"scale\";\n  var peg$c5 = \"rotate\";\n  var peg$c6 = \"skewX\";\n  var peg$c7 = \"skewY\";\n  var peg$c8 = \",\";\n  var peg$c9 = \".\";\n  var peg$r0 = /^[eE]/;\n  var peg$r1 = /^[+\\-]/;\n  var peg$r2 = /^[0-9]/;\n  var peg$r3 = /^[ \\t\\r\\n]/;\n  var peg$e0 = peg$literalExpectation(\"matrix\", false);\n  var peg$e1 = peg$literalExpectation(\"(\", false);\n  var peg$e2 = peg$literalExpectation(\")\", false);\n  var peg$e3 = peg$literalExpectation(\"translate\", false);\n  var peg$e4 = peg$literalExpectation(\"scale\", false);\n  var peg$e5 = peg$literalExpectation(\"rotate\", false);\n  var peg$e6 = peg$literalExpectation(\"skewX\", false);\n  var peg$e7 = peg$literalExpectation(\"skewY\", false);\n  var peg$e8 = peg$literalExpectation(\",\", false);\n  var peg$e9 = peg$otherExpectation(\"fractionalConstant\");\n  var peg$e10 = peg$classExpectation([\"e\", \"E\"], false, false);\n  var peg$e11 = peg$classExpectation([\"+\", \"-\"], false, false);\n  var peg$e12 = peg$classExpectation([[\"0\", \"9\"]], false, false);\n  var peg$e13 = peg$classExpectation([\" \", \"\\t\", \"\\r\", \"\\n\"], false, false);\n\n  var peg$f0 = function (ts) {\n    return ts;\n  };\n\n  var peg$f1 = function (t, ts) {\n    return t.concat(ts);\n  };\n\n  var peg$f2 = function (a, b, c, d, e, f) {\n    return [{\n      type: 'matrix',\n      a: a,\n      b: b,\n      c: c,\n      d: d,\n      e: e,\n      f: f\n    }];\n  };\n\n  var peg$f3 = function (tx, ty) {\n    var t = {\n      type: 'translate',\n      tx: tx\n    };\n    if (ty) t.ty = ty;\n    return [t];\n  };\n\n  var peg$f4 = function (sx, sy) {\n    var s = {\n      type: 'scale',\n      sx: sx\n    };\n    if (sy) s.sy = sy;\n    return [s];\n  };\n\n  var peg$f5 = function (angle, c) {\n    var r = {\n      type: 'rotate',\n      angle: angle\n    };\n\n    if (c) {\n      r.cx = c[0];\n      r.cy = c[1];\n    }\n\n    return [r];\n  };\n\n  var peg$f6 = function (angle) {\n    return [{\n      type: 'skewX',\n      angle: angle\n    }];\n  };\n\n  var peg$f7 = function (angle) {\n    return [{\n      type: 'skewY',\n      angle: angle\n    }];\n  };\n\n  var peg$f8 = function (f) {\n    return parseFloat(f.join(\"\"));\n  };\n\n  var peg$f9 = function (i) {\n    return parseInt(i.join(\"\"));\n  };\n\n  var peg$f10 = function (n) {\n    return n;\n  };\n\n  var peg$f11 = function (n1, n2) {\n    return [n1, n2];\n  };\n\n  var peg$f12 = function (ds) {\n    return ds.join(\"\");\n  };\n\n  var peg$f13 = function (f, e) {\n    return [f, e || null].join(\"\");\n  };\n\n  var peg$f14 = function (d, e) {\n    return [d, e].join(\"\");\n  };\n\n  var peg$f15 = function (d1, d2) {\n    return [d1 ? d1.join(\"\") : null, \".\", d2.join(\"\")].join(\"\");\n  };\n\n  var peg$f16 = function (d) {\n    return d.join(\"\");\n  };\n\n  var peg$f17 = function (s, d) {\n    return ['e', s, d.join(\"\")].join(\"\");\n  };\n\n  var peg$currPos = 0;\n  var peg$savedPos = 0;\n  var peg$posDetailsCache = [{\n    line: 1,\n    column: 1\n  }];\n  var peg$expected = [];\n  var peg$silentFails = 0;\n  var peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function offset() {\n    return peg$savedPos;\n  }\n\n  function range() {\n    return [peg$savedPos, peg$currPos];\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== undefined ? location : peg$computeLocation(peg$savedPos, peg$currPos);\n    throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location);\n  }\n\n  function error(message, location) {\n    location = location !== undefined ? location : peg$computeLocation(peg$savedPos, peg$currPos);\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return {\n      type: \"literal\",\n      text: text,\n      ignoreCase: ignoreCase\n    };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return {\n      type: \"class\",\n      parts: parts,\n      inverted: inverted,\n      ignoreCase: ignoreCase\n    };\n  }\n\n  function peg$anyExpectation() {\n    return {\n      type: \"any\"\n    };\n  }\n\n  function peg$endExpectation() {\n    return {\n      type: \"end\"\n    };\n  }\n\n  function peg$otherExpectation(description) {\n    return {\n      type: \"other\",\n      description: description\n    };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos];\n    var p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line: details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  var peg$VALIDFILENAME = typeof options.filename === \"string\" && options.filename.length > 0;\n\n  function peg$computeLocation(startPos, endPos) {\n    var loc = {};\n    if (peg$VALIDFILENAME) loc.filename = options.filename;\n    var startPosDetails = peg$computePosDetails(startPos);\n    loc.start = {\n      offset: startPos,\n      line: startPosDetails.line,\n      column: startPosDetails.column\n    };\n    var endPosDetails = peg$computePosDetails(endPos);\n    loc.end = {\n      offset: endPos,\n      line: endPosDetails.line,\n      column: endPosDetails.column\n    };\n    return loc;\n  }\n\n  function peg$begin() {\n    peg$expected.push({\n      pos: peg$currPos,\n      variants: []\n    });\n  }\n\n  function peg$expect(expected) {\n    var top = peg$expected[peg$expected.length - 1];\n\n    if (peg$currPos < top.pos) {\n      return;\n    }\n\n    if (peg$currPos > top.pos) {\n      top.pos = peg$currPos;\n      top.variants = [];\n    }\n\n    top.variants.push(expected);\n  }\n\n  function peg$end(invert) {\n    var expected = peg$expected.pop();\n    var top = peg$expected[peg$expected.length - 1];\n    var variants = expected.variants;\n\n    if (top.pos !== expected.pos) {\n      return;\n    }\n\n    if (invert) {\n      variants = variants.map(function (e) {\n        return e.type === \"not\" ? e.expected : {\n          type: \"not\",\n          expected: e\n        };\n      });\n    }\n\n    Array.prototype.push.apply(top.variants, variants);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected, found, location), expected, found, location);\n  }\n\n  function peg$buildError() {\n    var expected = peg$expected[0];\n    var failPos = expected.pos;\n    return peg$buildStructuredError(expected.variants, failPos < input.length ? input.charAt(failPos) : null, failPos < input.length ? peg$computeLocation(failPos, failPos + 1) : peg$computeLocation(failPos, failPos));\n  }\n\n  function peg$parsetransformList() {\n    var s0, s1, s2, s3, s4;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsewsp();\n\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      s2 = peg$parsewsp();\n    }\n\n    s2 = peg$parsetransforms();\n\n    if (s2 === peg$FAILED) {\n      s2 = null;\n    }\n\n    s3 = [];\n    s4 = peg$parsewsp();\n\n    while (s4 !== peg$FAILED) {\n      s3.push(s4);\n      s4 = peg$parsewsp();\n    }\n\n    peg$savedPos = s0;\n    s0 = peg$f0(s2);\n    return s0;\n  }\n\n  function peg$parsetransforms() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = peg$parsetransform();\n\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsecommaWsp();\n\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parsecommaWsp();\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetransforms();\n\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f1(s1, s3);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsetransform();\n    }\n\n    return s0;\n  }\n\n  function peg$parsetransform() {\n    var s0;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$parsematrix();\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsetranslate();\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsescale();\n\n        if (s0 === peg$FAILED) {\n          s0 = peg$parserotate();\n\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseskewX();\n\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseskewY();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsematrix() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    rule$expects(peg$e0);\n\n    if (input.substr(peg$currPos, 6) === peg$c0) {\n      s1 = peg$c0;\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsewsp();\n\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsewsp();\n      }\n\n      rule$expects(peg$e1);\n\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s3 = peg$c1;\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n      }\n\n      if (s3 !== peg$FAILED) {\n        s4 = [];\n        s5 = peg$parsewsp();\n\n        while (s5 !== peg$FAILED) {\n          s4.push(s5);\n          s5 = peg$parsewsp();\n        }\n\n        s5 = peg$parsenumber();\n\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parsecommaWsp();\n\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsenumber();\n\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parsecommaWsp();\n\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parsenumber();\n\n                if (s9 !== peg$FAILED) {\n                  s10 = peg$parsecommaWsp();\n\n                  if (s10 !== peg$FAILED) {\n                    s11 = peg$parsenumber();\n\n                    if (s11 !== peg$FAILED) {\n                      s12 = peg$parsecommaWsp();\n\n                      if (s12 !== peg$FAILED) {\n                        s13 = peg$parsenumber();\n\n                        if (s13 !== peg$FAILED) {\n                          s14 = peg$parsecommaWsp();\n\n                          if (s14 !== peg$FAILED) {\n                            s15 = peg$parsenumber();\n\n                            if (s15 !== peg$FAILED) {\n                              s16 = [];\n                              s17 = peg$parsewsp();\n\n                              while (s17 !== peg$FAILED) {\n                                s16.push(s17);\n                                s17 = peg$parsewsp();\n                              }\n\n                              rule$expects(peg$e2);\n\n                              if (input.charCodeAt(peg$currPos) === 41) {\n                                s17 = peg$c2;\n                                peg$currPos++;\n                              } else {\n                                s17 = peg$FAILED;\n                              }\n\n                              if (s17 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s0 = peg$f2(s5, s7, s9, s11, s13, s15);\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetranslate() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    rule$expects(peg$e3);\n\n    if (input.substr(peg$currPos, 9) === peg$c3) {\n      s1 = peg$c3;\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsewsp();\n\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsewsp();\n      }\n\n      rule$expects(peg$e1);\n\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s3 = peg$c1;\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n      }\n\n      if (s3 !== peg$FAILED) {\n        s4 = [];\n        s5 = peg$parsewsp();\n\n        while (s5 !== peg$FAILED) {\n          s4.push(s5);\n          s5 = peg$parsewsp();\n        }\n\n        s5 = peg$parsenumber();\n\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parsecommaWspNumber();\n\n          if (s6 === peg$FAILED) {\n            s6 = null;\n          }\n\n          s7 = [];\n          s8 = peg$parsewsp();\n\n          while (s8 !== peg$FAILED) {\n            s7.push(s8);\n            s8 = peg$parsewsp();\n          }\n\n          rule$expects(peg$e2);\n\n          if (input.charCodeAt(peg$currPos) === 41) {\n            s8 = peg$c2;\n            peg$currPos++;\n          } else {\n            s8 = peg$FAILED;\n          }\n\n          if (s8 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f3(s5, s6);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsescale() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    rule$expects(peg$e4);\n\n    if (input.substr(peg$currPos, 5) === peg$c4) {\n      s1 = peg$c4;\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsewsp();\n\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsewsp();\n      }\n\n      rule$expects(peg$e1);\n\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s3 = peg$c1;\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n      }\n\n      if (s3 !== peg$FAILED) {\n        s4 = [];\n        s5 = peg$parsewsp();\n\n        while (s5 !== peg$FAILED) {\n          s4.push(s5);\n          s5 = peg$parsewsp();\n        }\n\n        s5 = peg$parsenumber();\n\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parsecommaWspNumber();\n\n          if (s6 === peg$FAILED) {\n            s6 = null;\n          }\n\n          s7 = [];\n          s8 = peg$parsewsp();\n\n          while (s8 !== peg$FAILED) {\n            s7.push(s8);\n            s8 = peg$parsewsp();\n          }\n\n          rule$expects(peg$e2);\n\n          if (input.charCodeAt(peg$currPos) === 41) {\n            s8 = peg$c2;\n            peg$currPos++;\n          } else {\n            s8 = peg$FAILED;\n          }\n\n          if (s8 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f4(s5, s6);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parserotate() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    rule$expects(peg$e5);\n\n    if (input.substr(peg$currPos, 6) === peg$c5) {\n      s1 = peg$c5;\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsewsp();\n\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsewsp();\n      }\n\n      rule$expects(peg$e1);\n\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s3 = peg$c1;\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n      }\n\n      if (s3 !== peg$FAILED) {\n        s4 = [];\n        s5 = peg$parsewsp();\n\n        while (s5 !== peg$FAILED) {\n          s4.push(s5);\n          s5 = peg$parsewsp();\n        }\n\n        s5 = peg$parsenumber();\n\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parsecommaWspTwoNumbers();\n\n          if (s6 === peg$FAILED) {\n            s6 = null;\n          }\n\n          s7 = [];\n          s8 = peg$parsewsp();\n\n          while (s8 !== peg$FAILED) {\n            s7.push(s8);\n            s8 = peg$parsewsp();\n          }\n\n          rule$expects(peg$e2);\n\n          if (input.charCodeAt(peg$currPos) === 41) {\n            s8 = peg$c2;\n            peg$currPos++;\n          } else {\n            s8 = peg$FAILED;\n          }\n\n          if (s8 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f5(s5, s6);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseskewX() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    rule$expects(peg$e6);\n\n    if (input.substr(peg$currPos, 5) === peg$c6) {\n      s1 = peg$c6;\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsewsp();\n\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsewsp();\n      }\n\n      rule$expects(peg$e1);\n\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s3 = peg$c1;\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n      }\n\n      if (s3 !== peg$FAILED) {\n        s4 = [];\n        s5 = peg$parsewsp();\n\n        while (s5 !== peg$FAILED) {\n          s4.push(s5);\n          s5 = peg$parsewsp();\n        }\n\n        s5 = peg$parsenumber();\n\n        if (s5 !== peg$FAILED) {\n          s6 = [];\n          s7 = peg$parsewsp();\n\n          while (s7 !== peg$FAILED) {\n            s6.push(s7);\n            s7 = peg$parsewsp();\n          }\n\n          rule$expects(peg$e2);\n\n          if (input.charCodeAt(peg$currPos) === 41) {\n            s7 = peg$c2;\n            peg$currPos++;\n          } else {\n            s7 = peg$FAILED;\n          }\n\n          if (s7 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f6(s5);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseskewY() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    rule$expects(peg$e7);\n\n    if (input.substr(peg$currPos, 5) === peg$c7) {\n      s1 = peg$c7;\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsewsp();\n\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsewsp();\n      }\n\n      rule$expects(peg$e1);\n\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s3 = peg$c1;\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n      }\n\n      if (s3 !== peg$FAILED) {\n        s4 = [];\n        s5 = peg$parsewsp();\n\n        while (s5 !== peg$FAILED) {\n          s4.push(s5);\n          s5 = peg$parsewsp();\n        }\n\n        s5 = peg$parsenumber();\n\n        if (s5 !== peg$FAILED) {\n          s6 = [];\n          s7 = peg$parsewsp();\n\n          while (s7 !== peg$FAILED) {\n            s6.push(s7);\n            s7 = peg$parsewsp();\n          }\n\n          rule$expects(peg$e2);\n\n          if (input.charCodeAt(peg$currPos) === 41) {\n            s7 = peg$c2;\n            peg$currPos++;\n          } else {\n            s7 = peg$FAILED;\n          }\n\n          if (s7 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f7(s5);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumber() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parsesign();\n\n    if (s2 === peg$FAILED) {\n      s2 = null;\n    }\n\n    s3 = peg$parsefloatingPointConstant();\n\n    if (s3 !== peg$FAILED) {\n      s2 = [s2, s3];\n      s1 = s2;\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$f8(s1);\n    }\n\n    s0 = s1;\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parsesign();\n\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n\n      s3 = peg$parseintegerConstant();\n\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$f9(s1);\n      }\n\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecommaWspNumber() {\n    var s0, s1, s2;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = peg$parsecommaWsp();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsenumber();\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f10(s2);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecommaWspTwoNumbers() {\n    var s0, s1, s2, s3, s4;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = peg$parsecommaWsp();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsenumber();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecommaWsp();\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsenumber();\n\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f11(s2, s4);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecommaWsp() {\n    var s0, s1, s2, s3, s4;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsewsp();\n\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsewsp();\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsecomma();\n\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n\n      s3 = [];\n      s4 = peg$parsewsp();\n\n      while (s4 !== peg$FAILED) {\n        s3.push(s4);\n        s4 = peg$parsewsp();\n      }\n\n      s1 = [s1, s2, s3];\n      s0 = s1;\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsecomma();\n\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parsewsp();\n\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parsewsp();\n        }\n\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomma() {\n    var s0;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    rule$expects(peg$e8);\n\n    if (input.charCodeAt(peg$currPos) === 44) {\n      s0 = peg$c8;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseintegerConstant() {\n    var s0, s1;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = peg$parsedigitSequence();\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$f12(s1);\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parsefloatingPointConstant() {\n    var s0, s1, s2;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    s1 = peg$parsefractionalConstant();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseexponent();\n\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n\n      peg$savedPos = s0;\n      s0 = peg$f13(s1, s2);\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsedigitSequence();\n\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseexponent();\n\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f14(s1, s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefractionalConstant() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    rule$expects(peg$e9);\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parsedigitSequence();\n\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s2 = peg$c9;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n    }\n\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parsedigitSequence();\n\n      if (s3 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f15(s1, s3);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsedigitSequence();\n\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 46) {\n          s2 = peg$c9;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n        }\n\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f16(s1);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    peg$silentFails--;\n    return s0;\n  }\n\n  function peg$parseexponent() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = peg$currPos;\n    rule$expects(peg$e10);\n\n    if (peg$r0.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsesign();\n\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n\n      s3 = peg$parsedigitSequence();\n\n      if (s3 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f17(s2, s3);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsesign() {\n    var s0;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    rule$expects(peg$e11);\n\n    if (peg$r1.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedigitSequence() {\n    var s0, s1;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    s0 = [];\n    s1 = peg$parsedigit();\n\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        s1 = peg$parsedigit();\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedigit() {\n    var s0;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    rule$expects(peg$e12);\n\n    if (peg$r2.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewsp() {\n    var s0;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    };\n\n    rule$expects(peg$e13);\n\n    if (peg$r3.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  peg$begin();\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$expect(peg$endExpectation());\n    }\n\n    throw peg$buildError();\n  }\n}\n\nexport { peg$SyntaxError as SyntaxError, peg$parse as parse };\nexport default {\n  SyntaxError: peg$SyntaxError,\n  parse: peg$parse\n};","map":{"version":3,"sources":["/home/jun/foodbank/node_modules/transformation-matrix/src/fromTransformAttribute.autogenerated.js"],"names":["peg$subclass","child","parent","C","constructor","prototype","peg$SyntaxError","message","expected","found","location","name","Error","captureStackTrace","buildMessage","DESCRIBE_EXPECTATION_FNS","literal","expectation","literalEscape","text","class","escapedParts","parts","map","part","Array","isArray","classEscape","inverted","any","end","other","description","not","describeExpectation","hex","ch","charCodeAt","toString","toUpperCase","s","replace","type","describeExpected","descriptions","i","j","sort","length","slice","join","describeFound","peg$parse","input","options","undefined","peg$FAILED","peg$startRuleFunctions","transformList","peg$parsetransformList","peg$startRuleFunction","peg$c0","peg$c1","peg$c2","peg$c3","peg$c4","peg$c5","peg$c6","peg$c7","peg$c8","peg$c9","peg$r0","peg$r1","peg$r2","peg$r3","peg$e0","peg$literalExpectation","peg$e1","peg$e2","peg$e3","peg$e4","peg$e5","peg$e6","peg$e7","peg$e8","peg$e9","peg$otherExpectation","peg$e10","peg$classExpectation","peg$e11","peg$e12","peg$e13","peg$f0","ts","peg$f1","t","concat","peg$f2","a","b","c","d","e","f","peg$f3","tx","ty","peg$f4","sx","sy","peg$f5","angle","r","cx","cy","peg$f6","peg$f7","peg$f8","parseFloat","peg$f9","parseInt","peg$f10","n","peg$f11","n1","n2","peg$f12","ds","peg$f13","peg$f14","peg$f15","d1","d2","peg$f16","peg$f17","peg$currPos","peg$savedPos","peg$posDetailsCache","line","column","peg$expected","peg$silentFails","peg$result","startRule","substring","offset","range","peg$computeLocation","peg$buildStructuredError","error","peg$buildSimpleError","ignoreCase","peg$anyExpectation","peg$endExpectation","peg$computePosDetails","pos","details","p","peg$VALIDFILENAME","filename","startPos","endPos","loc","startPosDetails","start","endPosDetails","peg$begin","push","variants","peg$expect","top","peg$end","invert","pop","apply","peg$buildError","failPos","charAt","s0","s1","s2","s3","s4","rule$expects","peg$parsewsp","peg$parsetransforms","peg$parsetransform","peg$parsecommaWsp","peg$parsematrix","peg$parsetranslate","peg$parsescale","peg$parserotate","peg$parseskewX","peg$parseskewY","s5","s6","s7","s8","s9","s10","s11","s12","s13","s14","s15","s16","s17","substr","peg$parsenumber","peg$parsecommaWspNumber","peg$parsecommaWspTwoNumbers","peg$parsesign","peg$parsefloatingPointConstant","peg$parseintegerConstant","peg$parsecomma","peg$parsedigitSequence","peg$parsefractionalConstant","peg$parseexponent","test","peg$parsedigit","SyntaxError","parse"],"mappings":"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","sourcesContent":["// Generated by PEG.js v0.11.0-master.b7b87ea, https://pegjs.org/\n\nfunction peg$subclass(child, parent) {\n  function C() { this.constructor = child; }\n  C.prototype = parent.prototype;\n  child.prototype = new C();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message = message;\n  this.expected = expected;\n  this.found = found;\n  this.location = location;\n  this.name = \"SyntaxError\";\n\n  // istanbul ignore next\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function(expected, found, location) {\n  var DESCRIBE_EXPECTATION_FNS = {\n    literal: function(expectation) {\n      return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n    },\n\n    class: function(expectation) {\n      var escapedParts = expectation.parts.map(function(part) {\n        return Array.isArray(part)\n          ? classEscape(part[0]) + \"-\" + classEscape(part[1])\n          : classEscape(part);\n      });\n\n      return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n    },\n\n    any: function() {\n      return \"any character\";\n    },\n\n    end: function() {\n      return \"end of input\";\n    },\n\n    other: function(expectation) {\n      return expectation.description;\n    },\n\n    not: function(expectation) {\n      return \"not \" + describeExpectation(expectation.expected);\n    }\n  };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, \"\\\\\\\\\")\n      .replace(/\"/g,  \"\\\\\\\"\")\n      .replace(/\\0/g, \"\\\\0\")\n      .replace(/\\t/g, \"\\\\t\")\n      .replace(/\\n/g, \"\\\\n\")\n      .replace(/\\r/g, \"\\\\r\")\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return \"\\\\x0\" + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return \"\\\\x\"  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, \"\\\\\\\\\")\n      .replace(/\\]/g, \"\\\\]\")\n      .replace(/\\^/g, \"\\\\^\")\n      .replace(/-/g,  \"\\\\-\")\n      .replace(/\\0/g, \"\\\\0\")\n      .replace(/\\t/g, \"\\\\t\")\n      .replace(/\\n/g, \"\\\\n\")\n      .replace(/\\r/g, \"\\\\r\")\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return \"\\\\x0\" + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return \"\\\\x\"  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = expected.map(describeExpectation);\n    var i, j;\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== undefined ? options : {};\n\n  var peg$FAILED = {};\n\n  var peg$startRuleFunctions = { transformList: peg$parsetransformList };\n  var peg$startRuleFunction = peg$parsetransformList;\n\n  var peg$c0 = \"matrix\";\n  var peg$c1 = \"(\";\n  var peg$c2 = \")\";\n  var peg$c3 = \"translate\";\n  var peg$c4 = \"scale\";\n  var peg$c5 = \"rotate\";\n  var peg$c6 = \"skewX\";\n  var peg$c7 = \"skewY\";\n  var peg$c8 = \",\";\n  var peg$c9 = \".\";\n\n  var peg$r0 = /^[eE]/;\n  var peg$r1 = /^[+\\-]/;\n  var peg$r2 = /^[0-9]/;\n  var peg$r3 = /^[ \\t\\r\\n]/;\n\n  var peg$e0 = peg$literalExpectation(\"matrix\", false);\n  var peg$e1 = peg$literalExpectation(\"(\", false);\n  var peg$e2 = peg$literalExpectation(\")\", false);\n  var peg$e3 = peg$literalExpectation(\"translate\", false);\n  var peg$e4 = peg$literalExpectation(\"scale\", false);\n  var peg$e5 = peg$literalExpectation(\"rotate\", false);\n  var peg$e6 = peg$literalExpectation(\"skewX\", false);\n  var peg$e7 = peg$literalExpectation(\"skewY\", false);\n  var peg$e8 = peg$literalExpectation(\",\", false);\n  var peg$e9 = peg$otherExpectation(\"fractionalConstant\");\n  var peg$e10 = peg$classExpectation([\"e\", \"E\"], false, false);\n  var peg$e11 = peg$classExpectation([\"+\", \"-\"], false, false);\n  var peg$e12 = peg$classExpectation([[\"0\", \"9\"]], false, false);\n  var peg$e13 = peg$classExpectation([\" \", \"\\t\", \"\\r\", \"\\n\"], false, false);\n\n  var peg$f0 = function(ts) { return ts; };\n  var peg$f1 = function(t, ts) { return t.concat(ts) };\n  var peg$f2 = function(a, b, c, d, e, f) {\n        return [{type: 'matrix', a: a, b: b, c: c, d: d, e: e, f: f}];\n      };\n  var peg$f3 = function(tx, ty) {\n        var t = {type: 'translate', tx: tx};\n        if (ty) t.ty = ty;\n        return [t];\n      };\n  var peg$f4 = function(sx, sy) {\n        var s = {type:'scale', sx: sx};\n        if (sy) s.sy = sy;\n        return [s];\n      };\n  var peg$f5 = function(angle, c) {\n        var r = {type:'rotate', angle: angle};\n        if (c) {\n          r.cx = c[0];\n          r.cy = c[1];\n        }\n        return [r];\n      };\n  var peg$f6 = function(angle) {\n        return [{type: 'skewX', angle: angle}];\n      };\n  var peg$f7 = function(angle) {\n        return [{type: 'skewY', angle: angle}];\n      };\n  var peg$f8 = function(f) { return parseFloat(f.join(\"\")); };\n  var peg$f9 = function(i) { return parseInt(i.join(\"\")); };\n  var peg$f10 = function(n) { return n; };\n  var peg$f11 = function(n1, n2) { return [n1, n2]; };\n  var peg$f12 = function(ds) { return ds.join(\"\"); };\n  var peg$f13 = function(f, e) { return [f, e || null].join(\"\")};\n  var peg$f14 = function(d, e) { return [d, e].join(\"\")};\n  var peg$f15 = function(d1, d2) { return [d1 ? d1.join(\"\") : null, \".\", d2.join(\"\")].join(\"\"); };\n  var peg$f16 = function(d) { return d.join(\"\"); };\n  var peg$f17 = function(s, d) { return ['e', s, d.join(\"\")].join(\"\") };\n\n  var peg$currPos = 0;\n  var peg$savedPos = 0;\n  var peg$posDetailsCache = [{ line: 1, column: 1 }];\n  var peg$expected = [];\n  var peg$silentFails = 0;\n\n  var peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function offset() {\n    return peg$savedPos;\n  }\n\n  function range() {\n    return [peg$savedPos, peg$currPos];\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== undefined\n      ? location\n      : peg$computeLocation(peg$savedPos, peg$currPos);\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== undefined\n      ? location\n      : peg$computeLocation(peg$savedPos, peg$currPos);\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos];\n    var p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line: details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n\n      return details;\n    }\n  }\n\n  var peg$VALIDFILENAME = typeof options.filename === \"string\" && options.filename.length > 0;\n  function peg$computeLocation(startPos, endPos) {\n    var loc = {};\n\n    if ( peg$VALIDFILENAME ) loc.filename = options.filename;\n\n    var startPosDetails = peg$computePosDetails(startPos);\n    loc.start = {\n      offset: startPos,\n      line: startPosDetails.line,\n      column: startPosDetails.column\n    };\n\n    var endPosDetails = peg$computePosDetails(endPos);\n    loc.end = {\n      offset: endPos,\n      line: endPosDetails.line,\n      column: endPosDetails.column\n    };\n\n    return loc;\n  }\n\n  function peg$begin() {\n    peg$expected.push({ pos: peg$currPos, variants: [] });\n  }\n\n  function peg$expect(expected) {\n    var top = peg$expected[peg$expected.length - 1];\n\n    if (peg$currPos < top.pos) { return; }\n\n    if (peg$currPos > top.pos) {\n      top.pos = peg$currPos;\n      top.variants = [];\n    }\n\n    top.variants.push(expected);\n  }\n\n  function peg$end(invert) {\n    var expected = peg$expected.pop();\n    var top = peg$expected[peg$expected.length - 1];\n    var variants = expected.variants;\n\n    if (top.pos !== expected.pos) { return; }\n\n    if (invert) {\n      variants = variants.map(function(e) {\n        return e.type === \"not\" ? e.expected : { type: \"not\", expected: e };\n      });\n    }\n\n    Array.prototype.push.apply(top.variants, variants);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found, location),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$buildError() {\n    var expected = peg$expected[0];\n    var failPos = expected.pos;\n\n    return peg$buildStructuredError(\n      expected.variants,\n      failPos < input.length ? input.charAt(failPos) : null,\n      failPos < input.length\n        ? peg$computeLocation(failPos, failPos + 1)\n        : peg$computeLocation(failPos, failPos)\n    );\n  }\n\n  function peg$parsetransformList() {\n    var s0, s1, s2, s3, s4;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    }\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsewsp();\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      s2 = peg$parsewsp();\n    }\n    s2 = peg$parsetransforms();\n    if (s2 === peg$FAILED) {\n      s2 = null;\n    }\n    s3 = [];\n    s4 = peg$parsewsp();\n    while (s4 !== peg$FAILED) {\n      s3.push(s4);\n      s4 = peg$parsewsp();\n    }\n    peg$savedPos = s0;\n    s0 = peg$f0(s2);\n\n    return s0;\n  }\n\n  function peg$parsetransforms() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$parsetransform();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsecommaWsp();\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parsecommaWsp();\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetransforms();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f1(s1, s3);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsetransform();\n    }\n\n    return s0;\n  }\n\n  function peg$parsetransform() {\n    var s0;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    }\n\n    s0 = peg$parsematrix();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsetranslate();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsescale();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parserotate();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseskewX();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseskewY();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsematrix() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    }\n\n    s0 = peg$currPos;\n    rule$expects(peg$e0);\n    if (input.substr(peg$currPos, 6) === peg$c0) {\n      s1 = peg$c0;\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsewsp();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsewsp();\n      }\n      rule$expects(peg$e1);\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s3 = peg$c1;\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        s4 = [];\n        s5 = peg$parsewsp();\n        while (s5 !== peg$FAILED) {\n          s4.push(s5);\n          s5 = peg$parsewsp();\n        }\n        s5 = peg$parsenumber();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parsecommaWsp();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsenumber();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parsecommaWsp();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parsenumber();\n                if (s9 !== peg$FAILED) {\n                  s10 = peg$parsecommaWsp();\n                  if (s10 !== peg$FAILED) {\n                    s11 = peg$parsenumber();\n                    if (s11 !== peg$FAILED) {\n                      s12 = peg$parsecommaWsp();\n                      if (s12 !== peg$FAILED) {\n                        s13 = peg$parsenumber();\n                        if (s13 !== peg$FAILED) {\n                          s14 = peg$parsecommaWsp();\n                          if (s14 !== peg$FAILED) {\n                            s15 = peg$parsenumber();\n                            if (s15 !== peg$FAILED) {\n                              s16 = [];\n                              s17 = peg$parsewsp();\n                              while (s17 !== peg$FAILED) {\n                                s16.push(s17);\n                                s17 = peg$parsewsp();\n                              }\n                              rule$expects(peg$e2);\n                              if (input.charCodeAt(peg$currPos) === 41) {\n                                s17 = peg$c2;\n                                peg$currPos++;\n                              } else {\n                                s17 = peg$FAILED;\n                              }\n                              if (s17 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s0 = peg$f2(s5, s7, s9, s11, s13, s15);\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetranslate() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    }\n\n    s0 = peg$currPos;\n    rule$expects(peg$e3);\n    if (input.substr(peg$currPos, 9) === peg$c3) {\n      s1 = peg$c3;\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsewsp();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsewsp();\n      }\n      rule$expects(peg$e1);\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s3 = peg$c1;\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        s4 = [];\n        s5 = peg$parsewsp();\n        while (s5 !== peg$FAILED) {\n          s4.push(s5);\n          s5 = peg$parsewsp();\n        }\n        s5 = peg$parsenumber();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parsecommaWspNumber();\n          if (s6 === peg$FAILED) {\n            s6 = null;\n          }\n          s7 = [];\n          s8 = peg$parsewsp();\n          while (s8 !== peg$FAILED) {\n            s7.push(s8);\n            s8 = peg$parsewsp();\n          }\n          rule$expects(peg$e2);\n          if (input.charCodeAt(peg$currPos) === 41) {\n            s8 = peg$c2;\n            peg$currPos++;\n          } else {\n            s8 = peg$FAILED;\n          }\n          if (s8 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f3(s5, s6);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsescale() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    }\n\n    s0 = peg$currPos;\n    rule$expects(peg$e4);\n    if (input.substr(peg$currPos, 5) === peg$c4) {\n      s1 = peg$c4;\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsewsp();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsewsp();\n      }\n      rule$expects(peg$e1);\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s3 = peg$c1;\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        s4 = [];\n        s5 = peg$parsewsp();\n        while (s5 !== peg$FAILED) {\n          s4.push(s5);\n          s5 = peg$parsewsp();\n        }\n        s5 = peg$parsenumber();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parsecommaWspNumber();\n          if (s6 === peg$FAILED) {\n            s6 = null;\n          }\n          s7 = [];\n          s8 = peg$parsewsp();\n          while (s8 !== peg$FAILED) {\n            s7.push(s8);\n            s8 = peg$parsewsp();\n          }\n          rule$expects(peg$e2);\n          if (input.charCodeAt(peg$currPos) === 41) {\n            s8 = peg$c2;\n            peg$currPos++;\n          } else {\n            s8 = peg$FAILED;\n          }\n          if (s8 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f4(s5, s6);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parserotate() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    }\n\n    s0 = peg$currPos;\n    rule$expects(peg$e5);\n    if (input.substr(peg$currPos, 6) === peg$c5) {\n      s1 = peg$c5;\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsewsp();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsewsp();\n      }\n      rule$expects(peg$e1);\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s3 = peg$c1;\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        s4 = [];\n        s5 = peg$parsewsp();\n        while (s5 !== peg$FAILED) {\n          s4.push(s5);\n          s5 = peg$parsewsp();\n        }\n        s5 = peg$parsenumber();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parsecommaWspTwoNumbers();\n          if (s6 === peg$FAILED) {\n            s6 = null;\n          }\n          s7 = [];\n          s8 = peg$parsewsp();\n          while (s8 !== peg$FAILED) {\n            s7.push(s8);\n            s8 = peg$parsewsp();\n          }\n          rule$expects(peg$e2);\n          if (input.charCodeAt(peg$currPos) === 41) {\n            s8 = peg$c2;\n            peg$currPos++;\n          } else {\n            s8 = peg$FAILED;\n          }\n          if (s8 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f5(s5, s6);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseskewX() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    }\n\n    s0 = peg$currPos;\n    rule$expects(peg$e6);\n    if (input.substr(peg$currPos, 5) === peg$c6) {\n      s1 = peg$c6;\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsewsp();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsewsp();\n      }\n      rule$expects(peg$e1);\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s3 = peg$c1;\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        s4 = [];\n        s5 = peg$parsewsp();\n        while (s5 !== peg$FAILED) {\n          s4.push(s5);\n          s5 = peg$parsewsp();\n        }\n        s5 = peg$parsenumber();\n        if (s5 !== peg$FAILED) {\n          s6 = [];\n          s7 = peg$parsewsp();\n          while (s7 !== peg$FAILED) {\n            s6.push(s7);\n            s7 = peg$parsewsp();\n          }\n          rule$expects(peg$e2);\n          if (input.charCodeAt(peg$currPos) === 41) {\n            s7 = peg$c2;\n            peg$currPos++;\n          } else {\n            s7 = peg$FAILED;\n          }\n          if (s7 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f6(s5);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseskewY() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    }\n\n    s0 = peg$currPos;\n    rule$expects(peg$e7);\n    if (input.substr(peg$currPos, 5) === peg$c7) {\n      s1 = peg$c7;\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsewsp();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsewsp();\n      }\n      rule$expects(peg$e1);\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s3 = peg$c1;\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        s4 = [];\n        s5 = peg$parsewsp();\n        while (s5 !== peg$FAILED) {\n          s4.push(s5);\n          s5 = peg$parsewsp();\n        }\n        s5 = peg$parsenumber();\n        if (s5 !== peg$FAILED) {\n          s6 = [];\n          s7 = peg$parsewsp();\n          while (s7 !== peg$FAILED) {\n            s6.push(s7);\n            s7 = peg$parsewsp();\n          }\n          rule$expects(peg$e2);\n          if (input.charCodeAt(peg$currPos) === 41) {\n            s7 = peg$c2;\n            peg$currPos++;\n          } else {\n            s7 = peg$FAILED;\n          }\n          if (s7 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f7(s5);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumber() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parsesign();\n    if (s2 === peg$FAILED) {\n      s2 = null;\n    }\n    s3 = peg$parsefloatingPointConstant();\n    if (s3 !== peg$FAILED) {\n      s2 = [s2, s3];\n      s1 = s2;\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$f8(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parsesign();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      s3 = peg$parseintegerConstant();\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$f9(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecommaWspNumber() {\n    var s0, s1, s2;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$parsecommaWsp();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsenumber();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f10(s2);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecommaWspTwoNumbers() {\n    var s0, s1, s2, s3, s4;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$parsecommaWsp();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsenumber();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecommaWsp();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsenumber();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f11(s2, s4);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecommaWsp() {\n    var s0, s1, s2, s3, s4;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    }\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsewsp();\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsewsp();\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsecomma();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      s3 = [];\n      s4 = peg$parsewsp();\n      while (s4 !== peg$FAILED) {\n        s3.push(s4);\n        s4 = peg$parsewsp();\n      }\n      s1 = [s1, s2, s3];\n      s0 = s1;\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsecomma();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parsewsp();\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parsewsp();\n        }\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomma() {\n    var s0;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    }\n\n    rule$expects(peg$e8);\n    if (input.charCodeAt(peg$currPos) === 44) {\n      s0 = peg$c8;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseintegerConstant() {\n    var s0, s1;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$parsedigitSequence();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$f12(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsefloatingPointConstant() {\n    var s0, s1, s2;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$parsefractionalConstant();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseexponent();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      peg$savedPos = s0;\n      s0 = peg$f13(s1, s2);\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsedigitSequence();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseexponent();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f14(s1, s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefractionalConstant() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    }\n\n    rule$expects(peg$e9);\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parsedigitSequence();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s2 = peg$c9;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parsedigitSequence();\n      if (s3 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f15(s1, s3);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsedigitSequence();\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 46) {\n          s2 = peg$c9;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f16(s1);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n    peg$silentFails--;\n\n    return s0;\n  }\n\n  function peg$parseexponent() {\n    var s0, s1, s2, s3;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    }\n\n    s0 = peg$currPos;\n    rule$expects(peg$e10);\n    if (peg$r0.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsesign();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      s3 = peg$parsedigitSequence();\n      if (s3 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f17(s2, s3);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsesign() {\n    var s0;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    }\n\n    rule$expects(peg$e11);\n    if (peg$r1.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedigitSequence() {\n    var s0, s1;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    }\n\n    s0 = [];\n    s1 = peg$parsedigit();\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        s1 = peg$parsedigit();\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedigit() {\n    var s0;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    }\n\n    rule$expects(peg$e12);\n    if (peg$r2.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewsp() {\n    var s0;\n\n    var rule$expects = function (expected) {\n      if (peg$silentFails === 0) peg$expect(expected);\n    }\n\n    rule$expects(peg$e13);\n    if (peg$r3.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  peg$begin();\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$expect(peg$endExpectation());\n    }\n\n    throw peg$buildError();\n  }\n}\n\nexport {\n  peg$SyntaxError as SyntaxError,\n  peg$parse as parse\n};\n\nexport default {\n  SyntaxError: peg$SyntaxError,\n  parse: peg$parse\n};\n"]},"metadata":{},"sourceType":"module"}