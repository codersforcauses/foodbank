{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Factory_1 = require(\"../Factory\");\n\nvar Util_1 = require(\"../Util\");\n\nvar Node_1 = require(\"../Node\");\n\nvar Validators_1 = require(\"../Validators\");\n\nexports.Pixelate = function (imageData) {\n  var pixelSize = Math.ceil(this.pixelSize()),\n      width = imageData.width,\n      height = imageData.height,\n      x,\n      y,\n      i,\n      red,\n      green,\n      blue,\n      alpha,\n      nBinsX = Math.ceil(width / pixelSize),\n      nBinsY = Math.ceil(height / pixelSize),\n      xBinStart,\n      xBinEnd,\n      yBinStart,\n      yBinEnd,\n      xBin,\n      yBin,\n      pixelsInBin,\n      data = imageData.data;\n\n  if (pixelSize <= 0) {\n    Util_1.Util.error('pixelSize value can not be <= 0');\n    return;\n  }\n\n  for (xBin = 0; xBin < nBinsX; xBin += 1) {\n    for (yBin = 0; yBin < nBinsY; yBin += 1) {\n      red = 0;\n      green = 0;\n      blue = 0;\n      alpha = 0;\n      xBinStart = xBin * pixelSize;\n      xBinEnd = xBinStart + pixelSize;\n      yBinStart = yBin * pixelSize;\n      yBinEnd = yBinStart + pixelSize;\n      pixelsInBin = 0;\n\n      for (x = xBinStart; x < xBinEnd; x += 1) {\n        if (x >= width) {\n          continue;\n        }\n\n        for (y = yBinStart; y < yBinEnd; y += 1) {\n          if (y >= height) {\n            continue;\n          }\n\n          i = (width * y + x) * 4;\n          red += data[i + 0];\n          green += data[i + 1];\n          blue += data[i + 2];\n          alpha += data[i + 3];\n          pixelsInBin += 1;\n        }\n      }\n\n      red = red / pixelsInBin;\n      green = green / pixelsInBin;\n      blue = blue / pixelsInBin;\n      alpha = alpha / pixelsInBin;\n\n      for (x = xBinStart; x < xBinEnd; x += 1) {\n        if (x >= width) {\n          continue;\n        }\n\n        for (y = yBinStart; y < yBinEnd; y += 1) {\n          if (y >= height) {\n            continue;\n          }\n\n          i = (width * y + x) * 4;\n          data[i + 0] = red;\n          data[i + 1] = green;\n          data[i + 2] = blue;\n          data[i + 3] = alpha;\n        }\n      }\n    }\n  }\n};\n\nFactory_1.Factory.addGetterSetter(Node_1.Node, 'pixelSize', 8, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);","map":{"version":3,"sources":["/home/jun/foodbank/node_modules/konva/lib/filters/Pixelate.js"],"names":["Object","defineProperty","exports","value","Factory_1","require","Util_1","Node_1","Validators_1","Pixelate","imageData","pixelSize","Math","ceil","width","height","x","y","i","red","green","blue","alpha","nBinsX","nBinsY","xBinStart","xBinEnd","yBinStart","yBinEnd","xBin","yBin","pixelsInBin","data","Util","error","Factory","addGetterSetter","Node","getNumberValidator","afterSetFilter"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Factory_1 = require(\"../Factory\");\nvar Util_1 = require(\"../Util\");\nvar Node_1 = require(\"../Node\");\nvar Validators_1 = require(\"../Validators\");\nexports.Pixelate = function (imageData) {\n    var pixelSize = Math.ceil(this.pixelSize()), width = imageData.width, height = imageData.height, x, y, i, red, green, blue, alpha, nBinsX = Math.ceil(width / pixelSize), nBinsY = Math.ceil(height / pixelSize), xBinStart, xBinEnd, yBinStart, yBinEnd, xBin, yBin, pixelsInBin, data = imageData.data;\n    if (pixelSize <= 0) {\n        Util_1.Util.error('pixelSize value can not be <= 0');\n        return;\n    }\n    for (xBin = 0; xBin < nBinsX; xBin += 1) {\n        for (yBin = 0; yBin < nBinsY; yBin += 1) {\n            red = 0;\n            green = 0;\n            blue = 0;\n            alpha = 0;\n            xBinStart = xBin * pixelSize;\n            xBinEnd = xBinStart + pixelSize;\n            yBinStart = yBin * pixelSize;\n            yBinEnd = yBinStart + pixelSize;\n            pixelsInBin = 0;\n            for (x = xBinStart; x < xBinEnd; x += 1) {\n                if (x >= width) {\n                    continue;\n                }\n                for (y = yBinStart; y < yBinEnd; y += 1) {\n                    if (y >= height) {\n                        continue;\n                    }\n                    i = (width * y + x) * 4;\n                    red += data[i + 0];\n                    green += data[i + 1];\n                    blue += data[i + 2];\n                    alpha += data[i + 3];\n                    pixelsInBin += 1;\n                }\n            }\n            red = red / pixelsInBin;\n            green = green / pixelsInBin;\n            blue = blue / pixelsInBin;\n            alpha = alpha / pixelsInBin;\n            for (x = xBinStart; x < xBinEnd; x += 1) {\n                if (x >= width) {\n                    continue;\n                }\n                for (y = yBinStart; y < yBinEnd; y += 1) {\n                    if (y >= height) {\n                        continue;\n                    }\n                    i = (width * y + x) * 4;\n                    data[i + 0] = red;\n                    data[i + 1] = green;\n                    data[i + 2] = blue;\n                    data[i + 3] = alpha;\n                }\n            }\n        }\n    }\n};\nFactory_1.Factory.addGetterSetter(Node_1.Node, 'pixelSize', 8, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);\n"]},"metadata":{},"sourceType":"script"}