{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport printValue from './util/printValue';\nimport toArray from './util/toArray';\nlet strReg = /\\$\\{\\s*(\\w+)\\s*\\}/g;\nexport default class ValidationError extends Error {\n  static formatError(message, params) {\n    const path = params.label || params.path || 'this';\n    if (path !== params.path) params = _extends({}, params, {\n      path\n    });\n    if (typeof message === 'string') return message.replace(strReg, (_, key) => printValue(params[key]));\n    if (typeof message === 'function') return message(params);\n    return message;\n  }\n\n  static isError(err) {\n    return err && err.name === 'ValidationError';\n  }\n\n  constructor(errorOrErrors, value, field, type) {\n    super();\n    this.name = 'ValidationError';\n    this.value = value;\n    this.path = field;\n    this.type = type;\n    this.errors = [];\n    this.inner = [];\n    toArray(errorOrErrors).forEach(err => {\n      if (ValidationError.isError(err)) {\n        this.errors.push(...err.errors);\n        this.inner = this.inner.concat(err.inner.length ? err.inner : err);\n      } else {\n        this.errors.push(err);\n      }\n    });\n    this.message = this.errors.length > 1 ? `${this.errors.length} errors occurred` : this.errors[0];\n    if (Error.captureStackTrace) Error.captureStackTrace(this, ValidationError);\n  }\n\n}","map":{"version":3,"sources":["/home/jun/foodbank/node_modules/yup/es/ValidationError.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","printValue","toArray","strReg","ValidationError","Error","formatError","message","params","path","label","replace","_","isError","err","name","constructor","errorOrErrors","value","field","type","errors","inner","forEach","push","concat","captureStackTrace"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport printValue from './util/printValue';\nimport toArray from './util/toArray';\nlet strReg = /\\$\\{\\s*(\\w+)\\s*\\}/g;\nexport default class ValidationError extends Error {\n  static formatError(message, params) {\n    const path = params.label || params.path || 'this';\n    if (path !== params.path) params = _extends({}, params, {\n      path\n    });\n    if (typeof message === 'string') return message.replace(strReg, (_, key) => printValue(params[key]));\n    if (typeof message === 'function') return message(params);\n    return message;\n  }\n\n  static isError(err) {\n    return err && err.name === 'ValidationError';\n  }\n\n  constructor(errorOrErrors, value, field, type) {\n    super();\n    this.name = 'ValidationError';\n    this.value = value;\n    this.path = field;\n    this.type = type;\n    this.errors = [];\n    this.inner = [];\n    toArray(errorOrErrors).forEach(err => {\n      if (ValidationError.isError(err)) {\n        this.errors.push(...err.errors);\n        this.inner = this.inner.concat(err.inner.length ? err.inner : err);\n      } else {\n        this.errors.push(err);\n      }\n    });\n    this.message = this.errors.length > 1 ? `${this.errors.length} errors occurred` : this.errors[0];\n    if (Error.captureStackTrace) Error.captureStackTrace(this, ValidationError);\n  }\n\n}"]},"metadata":{},"sourceType":"module"}